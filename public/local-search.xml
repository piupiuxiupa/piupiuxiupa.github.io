<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Zabbix 配置邮件告警</title>
    <link href="/2025/04/23/zabbix-alter-by-email/"/>
    <url>/2025/04/23/zabbix-alter-by-email/</url>
    
    <content type="html"><![CDATA[<blockquote><p>zabbix 版本6.4.21</p><p>以监控温度为例</p></blockquote><h2 id="配置监控项"><a href="#配置监控项" class="headerlink" title="配置监控项"></a>配置监控项</h2><ol><li><p>在agent端配置文件中添加如下配置</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># /etc/zabbix/zabbix_agentd.conf</span><br><span class="hljs-attr">UserParameter</span>=get_temp_cpu[*],sensors|grep <span class="hljs-string">&quot;Package id $1&quot;</span>|cut -c <span class="hljs-number">17</span>-<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p> 保存后重启zabbix-agent</p></li><li><p>在Web页面添加监控项</p><p> 数据采集 -&gt; 主机 -&gt; 监控项 -&gt;  创建监控项</p><p> 键值就是在agent配置文件中的get_temp_cpu</p><p> <img src="/../images/zabbix_alert/monitor_item.png" alt="monitor_item"></p></li></ol><h2 id="配置触发器"><a href="#配置触发器" class="headerlink" title="配置触发器"></a>配置触发器</h2><p>数据采集 -&gt; 主机 -&gt; 触发器 -&gt;  创建触发器</p><p><img src="/../images/zabbix_alert/trigger.png" alt="trigger"></p><p>表达式可以通过页面中<strong>表达式构造器</strong>来生成</p><p><img src="/../images/zabbix_alert/config_trigger.png" alt="trigger"></p><p>通过页面选择后会自动生成表达式，然后点击测试按钮，测试是否能触发</p><p><img src="/../images/zabbix_alert/config_trigger2.png" alt="trigger"></p><h2 id="配置邮箱告警"><a href="#配置邮箱告警" class="headerlink" title="配置邮箱告警"></a>配置邮箱告警</h2><h3 id="配置触发器动作"><a href="#配置触发器动作" class="headerlink" title="配置触发器动作"></a>配置触发器动作</h3><p>告警 -&gt; 动作 -&gt; 触发器动作 -&gt; 创建动作</p><p><img src="/../images/zabbix_alert/trigger_action.png" alt="trigger_action"></p><p>然后点击操作</p><p>这里操作是指告警时要做的行为，恢复操作是指问题恢复后的行为</p><p>点击编辑，可以看到如下页面</p><p>其中步骤 <code>1-0</code> 是指从告警到恢复的过程， 步骤持续时间是指这个过程中间隔多少时间操作一次，比如1800秒发送邮件一次。</p><p>下面可以自定义发送的内容，也可以根据媒介中配置的模板自动生成，媒介配置在后面。</p><p><img src="/../images/zabbix_alert/config_action.png" alt="trigger_action"></p><h3 id="配置媒介"><a href="#配置媒介" class="headerlink" title="配置媒介"></a>配置媒介</h3><p>告警 -&gt; 媒介 -&gt; 创建媒介类型</p><p><img src="/../images/zabbix_alert/media.png" alt="media"></p><p>根据自己的邮箱进行配置</p><p>一般服务器地址和端口会在你使用的邮箱设置中能看到</p><p>用户名称即邮箱地址</p><p>通常需要自己去开启邮箱的SMTP功能，然后生成授权码，填入下面的密码中。</p><p><img src="/../images/zabbix_alert/config_media.png" alt="media"></p><p>在消息模板中配置对应类型的消息模板，我这里配置了两个，一个在告警时发送，一个在告警恢复时发送通知。</p><p>点击添加会自动生成通用模板，也可以自己定义，这里需要注意html语法的换行，如果去掉html标签，会导致邮件内容显示成一行。</p><p><img src="/../images/zabbix_alert/message_model.png" alt="media"></p><p>如果触发器有多个值可以通过如下形式获取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#123;ITEM.NAME1&#125; = &#123;ITEM.VALUE1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#123;ITEM.NAME2&#125; = &#123;ITEM.VALUE2&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h3><p>告警 -&gt; 用户</p><p>这里我们就使用默认的Admin进行邮件发送</p><p><img src="/../images/zabbix_alert/config_user.png" alt="choose_user"></p><p>在报警媒介中添加收件人，填写email地址即可</p><p><img src="/../images/zabbix_alert/config_email.png" alt="config_email"></p>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stress Test Tools</title>
    <link href="/2025/04/08/stress-test-tool/"/>
    <url>/2025/04/08/stress-test-tool/</url>
    
    <content type="html"><![CDATA[<h2 id="查看磁盘类型"><a href="#查看磁盘类型" class="headerlink" title="查看磁盘类型"></a>查看磁盘类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1 HDD, 0 SSD</span><br><span class="hljs-built_in">cat</span> /sys/block/sdX/queue/rotational<br>lsblk -d -o name,rota,model<br></code></pre></td></tr></table></figure><h2 id="fio"><a href="#fio" class="headerlink" title="fio"></a>fio</h2><p>Linux磁盘IO测试工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 顺序读取</span><br>fio --name=seqread --filename=testfile --rw=<span class="hljs-built_in">read</span> --bs=1M --size=2G --numjobs=1 --iodepth=1 --runtime=60 --time_based --direct=1 --group_reporting<br><span class="hljs-comment"># 顺序写入</span><br>fio --name=seqwrite --filename=testfile --rw=write --bs=1M --size=2G --numjobs=1 --iodepth=1 --runtime=60 --direct=1 --time_based --group_reporting<br><br><span class="hljs-comment"># 随机读取</span><br>fio --name=randread --filename=testfile --rw=randread --bs=4k --size=2G --numjobs=4 --iodepth=16 --runtime=60 --direct=1 --time_based --group_reporting<br><span class="hljs-comment"># 随机写入</span><br>fio --name=randwrite --filename=testfile --rw=randwrite --bs=4k --size=2G --numjobs=4 --iodepth=16 --runtime=60 --direct=1 --time_based --group_reporting<br><br><span class="hljs-comment"># 高并发随机读写</span><br>fio --name=randrw --filename=testfile --rw=randrw --rwmixread=70 --bs=4k --size=2G --numjobs=8 --iodepth=16 --direct=1 --runtime=60 --time_based --group_reporting<br></code></pre></td></tr></table></figure><p>–bs&#x3D;4k：每次 I&#x2F;O 4KB</p><p>–rw&#x3D;：读写模式（read、write、randread、randwrite、randrw）</p><p>–numjobs&#x3D;4：并发线程数</p><p>–direct&#x3D;1：绕过缓存，直接访问设备</p><p>–ioengine&#x3D;libaio：使用异步 I&#x2F;O 引擎 或–ioengine&#x3D;io_uring （5.1 内核以上）更能反映ssd盘的真实性能</p><p>–runtime&#x3D;30s：测试持续 30 秒</p><h2 id="DiskSpd"><a href="#DiskSpd" class="headerlink" title="DiskSpd"></a>DiskSpd</h2><p>Windows的磁盘IO测试工具</p><p><a href="https://github.com/microsoft/diskspd">https://github.com/microsoft/diskspd</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">diskspd.exe -c64M -b64K -t1 -o32 -si64K -w50 -S D:\test<br></code></pre></td></tr></table></figure><h2 id="prime95"><a href="#prime95" class="headerlink" title="prime95"></a>prime95</h2><p>windows CPU测试工具</p><p><a href="https://prime95.net/download/">https://prime95.net/download/</a></p><h2 id="iperf3"><a href="#iperf3" class="headerlink" title="iperf3"></a>iperf3</h2><p>网络测试工具，linux和windows都可使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 服务器端</span><br>iperf3 -s<br><span class="hljs-comment"># 设置监控时间间隔为 10 秒，监控端口为 5201</span><br>iperf3 -s -i 10 -p 5201<br><span class="hljs-comment"># 客户端</span><br>iperf3 -c <span class="hljs-variable">$IP</span> -R<br><span class="hljs-comment"># 指定-c测速服务器IP，-p指定端口为5201，-t测速时间5s，-P指定发送连接数10，-R表示下载测速</span><br>iperf3 -c <span class="hljs-variable">$IP</span> -p 5201 -t 5 -P 10 -R<br><span class="hljs-comment"># 指定-c测速服务器IP，-t测速时间20s，-i指定监控时间间隔为5s</span><br>iperf3 -c 43.248.136.69 -t 20 -i 5<br><span class="hljs-comment"># 指定-c测速服务器IP，-i指定监控时间间隔为7s，-n指定发送数据量为5G</span><br>iperf3 -c 43.248.136.69 -i 7 -n 5G<br><span class="hljs-comment"># 指定-c测速服务器IP，-i指定监控时间间隔为2s，-F指定要传输的文件，-t指定测速时间20s</span><br>iperf3 -c 43.248.136.69 -i 2 -F Python-3.7.1rc2.tgz -t 20<br></code></pre></td></tr></table></figure><h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><p>Linux 磁盘监控工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每 1 秒采样一次，持续 5 秒</span><br>iostat -xd sda 1 5<br></code></pre></td></tr></table></figure><h2 id="nmon-监控"><a href="#nmon-监控" class="headerlink" title="nmon 监控"></a>nmon 监控</h2><p>Linux 系统资源监控工具。</p><p>可以收集服务器系统资源使用情况，并输出成特定文件，且可利用excel分析工具进行数据统计分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每 5 秒采样一次，持续 120 秒</span><br>nmon -f -s 5 -c 120 -m /tmp/nmon.out<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>c</td><td>带条形图的 CPU 利用率统计信息（CPU 核心线程）</td></tr><tr><td>m</td><td>内存和交换统计</td></tr><tr><td>d</td><td>磁盘 I&#x2F;O 繁忙百分比 &amp; 每秒读\写数据量 KB&#x2F;s 图</td></tr><tr><td>r</td><td>资源：机器类型，名称，缓存详细信息和操作系统版本以及 Distro + LPAR</td></tr><tr><td>t</td><td>top 进程，1 基础、3 性能、4 大小、5 I&#x2F;O 仅 root 用户可用</td></tr><tr><td>n</td><td>网络统计信息和错误（如果没有错误，则消失）</td></tr><tr><td>j</td><td>文件系统，包括日记文件系统</td></tr><tr><td>k</td><td>内核统计信息运行队列，上下文切换，派生，平均负载和正常运行时间</td></tr><tr><td>U</td><td>CPU 使用率统计信息 user, user_nice, system, idle, iowait, irq, softirq, steal, guest, guest_nice</td></tr><tr><td>u</td><td>进程详细信息</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim</title>
    <link href="/2025/04/03/vim/"/>
    <url>/2025/04/03/vim/</url>
    
    <content type="html"><![CDATA[<h2 id="Normal模式"><a href="#Normal模式" class="headerlink" title="Normal模式"></a>Normal模式</h2><p>w 从前到后光标移动到下一个单词的开头。</p><p>b 从后到前光标移动到上一个单词的开头。</p><p>e 从前到后光标移动到下一个单词的结尾。</p><p>0 光标移动到当前行的开头。</p><p>$ 光标移动到当前行的结尾。</p><p>^ 光标移动到当前行的第一个非空字符。</p><p>f{char} 让vim查找下一处指定字符出现的位置，按<code>;</code>查找下一处，<code>,</code>返回上一处</p><p>ctrl a 对数字加，光标不在数字上时会在当前行正向查找一个数字</p><p>ctrl x 对数字减</p><blockquote><p>vim 会把0开头的数字当做8进制处理，0x开头的数字当做16进制处理。</p><p>如果想把所有数字都当作十进制 set nrformats&#x3D;</p></blockquote><h3 id="操作符-动作命令-操作"><a href="#操作符-动作命令-操作" class="headerlink" title="操作符 + 动作命令 &#x3D; 操作"></a>操作符 + 动作命令 &#x3D; 操作</h3><p>cw 删除从光标位置到当前词结尾处的文本，并且换到插入模式。</p><p>dw 删除光标下的单词。</p><p>dG 删除光标到文件末尾的文本。</p><p>D 删除光标到行尾的文本。</p><p>dap 删除整个段落</p><p>gul 将当前字符转换为小写</p><p>gUl 将当前字符转为大写</p><p>gUap 将整个段落转换为大写</p><p>gUaw 将整个单词转换为大写</p><p>v  高亮显示可视选区。</p><p>ctrl+v 块可视模式（列选择模式）。</p><p>shift+v 行可视模式。</p><p>vG 高亮显示光标到文件末尾的文本。</p><p>ctrl+n 向下补全</p><p>ctrl+p 向上补全</p><p>&gt; 向右缩进</p><p>&lt; 向左缩进</p><p>zz 将光标所在行移动到窗口中间。</p><p>vim -u NONE -N   <code>-u NONE</code>使vim启动时不加载自定义的vimrc, <code>-N</code>不进入vi兼容模式。</p><h2 id="命令"><a href="#命令" class="headerlink" title=". 命令"></a><code>.</code> 命令</h2><p><code>.</code>可以重复上次的修改。</p><p>f{char} 让vim查找下一处指定字符出现的位置，按<code>;</code>查找下一处，<code>,</code>返回上一处</p><p>* 可以查找当前光标下的单词，按n查找下一个, :set hls 高亮</p><p>如果想控制<code>u</code>撤销的粒度可以在想截止的地方ESC，撤销以一次修改操作为单位，即进入编辑模式后，修改完毕，ESC退出编辑模式。</p><h2 id="Insert模式"><a href="#Insert模式" class="headerlink" title="Insert模式"></a>Insert模式</h2><p>ctrl+[ 回到正常模式，等价于ESC</p><p>ctrl+h 删除前一个字符</p><p>ctrl+w 删除前一个单词</p><p>ctrl+u 删除至行首</p><p>ctrl+o 这个操作会临时让你可以使用正常模式下的命令，完成后自动进入插入模式</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue Notes</title>
    <link href="/2025/03/30/vue-notes/"/>
    <url>/2025/03/30/vue-notes/</url>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">value</span>) <span class="hljs-comment">// 在script标签中可以直接使用</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 双大括号绑定变量<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 点击事件<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  // 鼠标移入事件<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">mouseenter</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  // 鼠标移出事件<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">mouseleave</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">// 修改变量的值</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 点击事件后，输入框的值会自动修改为888</span></span><br><span class="language-javascript">    str.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;888&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 输入框的值会自动绑定到str变量上<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;completed&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">    str.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;item&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 动态绑定class<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">true</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">    str.<span class="hljs-property">value</span> = !str.<span class="hljs-property">value</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 动态绑定class<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[str ? &#x27;completed&#x27; : &#x27;item&#x27;]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-title function_">ref</span>([</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">20</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">22</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">])</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 列表渲染<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; item.name + index &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; item.age + index &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)      </span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">newValue, oldValue</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue, oldValue)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 监听变量的变化</span></span><br><span class="language-javascript"><span class="hljs-title function_">watch</span>(str, add)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="监听对象"><a href="#监听对象" class="headerlink" title="监听对象"></a>监听对象</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">ref</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">newValue, oldValue</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue, oldValue)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 监听对象的变化</span></span><br><span class="language-javascript"><span class="hljs-title function_">watch</span>(obj, add, &#123;<span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;obj.name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> bool = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">true</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 条件渲染<br>  // v-show 会创建div，但是会根据bool的值来显示或者隐藏div<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;bool&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello vue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  // v-if 会根据bool的值来判断是否创建div<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;bool&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello vue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>一个vue文件可以看做一个组件</p><ol><li><p>父组件给子组件传值</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;defineProps&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;text&#x27;</span>])</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  // 组件<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;button&#x27;</span>&gt;</span><br>    &#123;&#123; props.text &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.button</span>&#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 引入组件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 假设文件叫myButton.vue，在components目录下</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> myButton <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/myButton.vue&#x27;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    // 父组件给子组件传值<br>    <span class="hljs-tag">&lt;<span class="hljs-name">myButton</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;hello&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>子组件往父组件传值</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;defineProps, defineEmits&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;text&#x27;</span>])</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;ok&#x27;</span>]) </span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;button&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span><br>    &#123;&#123; props.text &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.button</span>&#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: red;    </span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 父组件接收子组件的值</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 假设文件叫myButton.vue，在components目录下</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> myButton <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/myButton.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">str</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    // 给子组件传值<br>    <span class="hljs-tag">&lt;<span class="hljs-name">myButton</span> @<span class="hljs-attr">ok</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Hi&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-title function_">ref</span>([])</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getList</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https:// example.com&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  list.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&quot;Data from backend&quot;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://xxx.com&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">value</span>: value.<span class="hljs-property">value</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">    &#125;   </span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript">  <span class="hljs-title function_">getList</span>()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://example.com/update&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        id,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-title function_">getList</span>()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 调用函数</span></span><br><span class="language-javascript"><span class="hljs-title function_">getData</span>()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[item.flag ? &#x27;completed&#x27; : &#x27;item&#x27; ]&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;update(item.id)&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;item.flag&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item.value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Free Notes</title>
    <link href="/2025/03/27/Free-Notes/"/>
    <url>/2025/03/27/Free-Notes/</url>
    
    <content type="html"><![CDATA[<h2 id="收集cpu-磁盘信息"><a href="#收集cpu-磁盘信息" class="headerlink" title="收集cpu 磁盘信息"></a>收集cpu 磁盘信息</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk -db -e 7 -o SIZE -n | awk <span class="hljs-string">&#x27;&#123;s+=$1&#125; END&#123;printf &quot;%.1fTB&quot;, s/1024/1024/1024/1024&#125;&#x27;</span><br><br><span class="hljs-comment"># CPU信息：Socket(s) 插槽数，Core(s) per socket 每个插槽核心数，Thread(s) per core 每个核心线程数</span><br><span class="hljs-comment"># CPU名：</span><br>lscpu | grep <span class="hljs-string">&#x27;Model name&#x27;</span><br><span class="hljs-comment"># 物理核心数：</span><br>lscpu | grep -i <span class="hljs-string">&#x27;socket&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span> | <span class="hljs-built_in">paste</span> -s -d <span class="hljs-string">&#x27;*&#x27;</span> | bc<br><span class="hljs-comment"># 总线程数（逻辑核心数）：</span><br>lscpu | grep  <span class="hljs-string">&#x27;^CPU(s):&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br><br><span class="hljs-comment"># 查看网口信息</span><br>ethtool eth0 <br><br><span class="hljs-comment"># 查看GPU</span><br>lspci<br></code></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看网络接口信息</span><br><span class="hljs-built_in">Get-NetAdapter</span> | <span class="hljs-built_in">Select-Object</span> Name, InterfaceDescription, LinkSpeed<br><span class="hljs-comment"># 查看内存信息</span><br><span class="hljs-built_in">Get-CimInstance</span> Win32_ComputerSystem | <span class="hljs-built_in">Select-Object</span> <span class="hljs-selector-tag">@</span>&#123;Name=<span class="hljs-string">&quot;TotalMemory(GB)&quot;</span>;Expression=&#123;[<span class="hljs-type">math</span>]::Round(<span class="hljs-variable">$_</span>.TotalPhysicalMemory / <span class="hljs-number">1</span>GB, <span class="hljs-number">2</span>)&#125;&#125;<br><span class="hljs-comment"># 查看每条内存信息</span><br><span class="hljs-built_in">Get-CimInstance</span> Win32_PhysicalMemory | <span class="hljs-built_in">Select-Object</span> Manufacturer, <span class="hljs-selector-tag">@</span>&#123;Name=<span class="hljs-string">&quot;Size(GB)&quot;</span>;Expression=&#123;[<span class="hljs-type">math</span>]::Round(<span class="hljs-variable">$_</span>.Capacity / <span class="hljs-number">1</span>GB, <span class="hljs-number">2</span>)&#125;&#125;, Speed<br><span class="hljs-comment"># 查看CPU信息</span><br><span class="hljs-built_in">Get-CimInstance</span> Win32_Processor | <span class="hljs-built_in">Select-Object</span> Name, NumberOfCores, NumberOfLogicalProcessors<br><span class="hljs-comment"># 查看磁盘信息</span><br><span class="hljs-built_in">Get-PhysicalDisk</span> | <span class="hljs-built_in">Select-Object</span> FriendlyName, MediaType, <span class="hljs-selector-tag">@</span>&#123;Name=<span class="hljs-string">&quot;Size(GB)&quot;</span>;Expression=&#123;[<span class="hljs-type">math</span>]::Round(<span class="hljs-variable">$_</span>.Size / <span class="hljs-number">1</span>GB, <span class="hljs-number">2</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="Windows-配置winrm"><a href="#Windows-配置winrm" class="headerlink" title="Windows 配置winrm"></a>Windows 配置winrm</h2><ul><li>python基础环境</li><li>防火墙放开5985端口</li></ul><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ps1"><span class="hljs-comment"># 查看powershell版本</span><br><span class="hljs-built_in">get-host</span><br><span class="hljs-comment"># 查看执行策略</span><br><span class="hljs-built_in">get-executionpolicy</span><br><span class="hljs-comment"># 修改执行策略</span><br><span class="hljs-built_in">set-executionpolicy</span> remotesigned<br><span class="hljs-comment"># 启动winrm服务</span><br>winrm quickconfig<br><span class="hljs-comment"># 列出该计算机上的所有 WinRM 侦听程序</span><br>winrm enumerate winrm/config/listener<br><span class="hljs-comment"># 修改配置</span><br><span class="hljs-comment"># 允许基本身份验证</span><br>winrm <span class="hljs-built_in">set</span> winrm/config/service/auth <span class="hljs-string">&#x27;@&#123;Basic=&quot;true&quot;&#125;&#x27;</span> <br><span class="hljs-comment"># 允许非加密通信</span><br>winrm <span class="hljs-built_in">set</span> winrm/config/service <span class="hljs-string">&#x27;@&#123;AllowUnencrypted=&quot;true&quot;&#125;&#x27;</span> <br><span class="hljs-comment"># 允许远程访问</span><br><span class="hljs-built_in">Set-Item</span> WSMan:\localhost\Client\TrustedHosts <span class="hljs-literal">-Value</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-literal">-Force</span><br><span class="hljs-comment"># 打开防火墙端口</span><br><span class="hljs-built_in">New-NetFirewallRule</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;WinRM&quot;</span> <span class="hljs-literal">-DisplayName</span> <span class="hljs-string">&quot;WinRM&quot;</span> <span class="hljs-literal">-Enabled</span> True <span class="hljs-literal">-Protocol</span> TCP <span class="hljs-literal">-Action</span> Allow <span class="hljs-literal">-LocalPort</span> <span class="hljs-number">5985</span><br></code></pre></td></tr></table></figure><h2 id="windows-设置密码"><a href="#windows-设置密码" class="headerlink" title="windows 设置密码"></a>windows 设置密码</h2><p>如果通过界面设置密码，密码会被显示为*，不好分辨是否包含空格或回车，设置的时候可以点击显示查看下。<br>如果通过cmd来设置，如:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 此处与linux不同，&#x27;&#x27;也会被视为密码的一部分</span><br>net user administrator <span class="hljs-string">&#x27;as^df!@ii&#x27;</span><br><span class="hljs-comment"># ^ 是windows命令行的转义符，^d 其实是 d</span><br><span class="hljs-built_in">echo</span> ^d  <span class="hljs-comment"># 会输出 d</span><br></code></pre></td></tr></table></figure><h2 id="创建用户并设置管理员和远程登陆"><a href="#创建用户并设置管理员和远程登陆" class="headerlink" title="创建用户并设置管理员和远程登陆"></a>创建用户并设置管理员和远程登陆</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">net user newuser password123 /add<br>net localgroup <span class="hljs-string">&quot;Administrators&quot;</span> newuser /add<br>net localgroup <span class="hljs-string">&quot;Remote Desktop Users&quot;</span> newuser /add<br></code></pre></td></tr></table></figure><h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible 执行 win分组下所有30.21的机器 -&gt; `ansible <span class="hljs-string">&#x27;win:&amp;*.30.21&#x27;</span> -m win_ping`<br><span class="hljs-comment"># 用ansible模块创建用户时，如果用户已存在，也会是新建用户，由于原来的用户目录已存在，会导致登陆时原来的用户目录变为用户名+机器名</span><br>ansible 172.22.30.135 -m win_user -a <span class="hljs-string">&quot;name=NewUser password=&#x27;11qfZY\$\$1111&#x27;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="比较两列不同"><a href="#比较两列不同" class="headerlink" title="比较两列不同"></a>比较两列不同</h2><p>comm -3 &lt;(sort -u list) &lt;(sort -u list2)</p><h2 id="mysql-授权远程登录及错误问题处理"><a href="#mysql-授权远程登录及错误问题处理" class="headerlink" title="mysql 授权远程登录及错误问题处理"></a>mysql 授权远程登录及错误问题处理</h2><p><a href="https://blog.csdn.net/hanhanwanghaha/article/details/105599321">参考链接</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;bind-address = 0.0.0.0&quot;</span> &gt;&gt; /etc/my.cnf<br>service mysqld restart<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;password&#x27;</span>;<br><span class="hljs-comment">-- 库.表    *.* 所有库所有表</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>flush privileges;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pandas Intro</title>
    <link href="/2025/03/27/pandas-intro/"/>
    <url>/2025/03/27/pandas-intro/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pandas<br></code></pre></td></tr></table></figure><h2 id="Pandas-基础操作"><a href="#Pandas-基础操作" class="headerlink" title="Pandas 基础操作"></a>Pandas 基础操作</h2><ol><li><p>字典生成表格数据</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">dict_sample=&#123;<br>    <span class="hljs-string">&quot;A&quot;</span>: [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br>    <span class="hljs-string">&quot;B&quot;</span>: [<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>]<br>    <span class="hljs-string">&quot;C&quot;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]<br>&#125;<br>df = pd.DataFrame(dict_sample)<br>display(df)<br></code></pre></td></tr></table></figure></li><li><p>行索引和列索引</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 行索引</span><br>df.index<br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-comment"># RangeIndex(start=0, stop=4, step=1)</span><br><span class="hljs-comment"># 列索引</span><br>df.columns<br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-comment"># Index([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;], dtype=&#x27;object&#x27;)</span><br><span class="hljs-comment"># 转化为列表</span><br>df.columns.tolist()<br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-comment"># [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br>df.index.tolist()   <br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-comment"># [0, 1, 2, 3]</span><br></code></pre></td></tr></table></figure></li><li><p>指定行索引列索引</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重新赋值行索引</span><br>df.index = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]<br><span class="hljs-comment"># 重新赋值列索引</span><br>df.columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]<br><span class="hljs-comment"># 单独改变某一列列名</span><br>df = df.rename(columns=&#123;<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>&#125;)<br><span class="hljs-comment"># 直接修改原数据，不返回新对象</span><br>df.rename(columns=&#123;<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>&#125;,inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 转换回字典</span><br>df_dict = df.to_dict()<br><br><span class="hljs-comment">## 单独指定行索引</span><br>df = pd.DataFrame(dict_sample,index=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>四种选取数据的方法</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 选取某一列，且返回为Series类型</span><br>df[<span class="hljs-string">&#x27;A&#x27;</span>]<br><span class="hljs-comment"># 选取某一列，且返回为DataFrame类型</span><br>df[[<span class="hljs-string">&#x27;A&#x27;</span>]]<br><span class="hljs-comment"># loc 根据索引选取数据</span><br>df.loc[<span class="hljs-string">&#x27;a&#x27;</span>，:]<br><span class="hljs-comment"># 选取某几行， 且返回为DataFrame类型</span><br>df.loc[[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]，:]<br><span class="hljs-comment"># iloc 根据位置选取数据，从0开始编号</span><br>df.iloc[<span class="hljs-number">0</span>,：]<br><span class="hljs-comment"># 选取某几行某几列</span><br>df.iloc[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], :]<br>df.iloc[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br>df.iloc[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br><span class="hljs-comment"># 选取某行某列的一个元素</span><br>df.at[<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;A&#x27;</span>]<br></code></pre></td></tr></table></figure></li></ol><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ol><li><p>外部数据读取</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取csv文件</span><br><span class="hljs-comment"># 常用参数：index_col 索引行； sep 分隔符；</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)  <br></code></pre></td></tr></table></figure></li><li><p>打印预览</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印前几行数据</span><br>df.head()<br><span class="hljs-comment"># 打印后几行数据</span><br>df.tail()<br><span class="hljs-comment"># 打印随机几行数据</span><br>df.sample()<br></code></pre></td></tr></table></figure></li><li><p>基本信息预览</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基本信息预览</span><br>df.info()   <br>df.describe()<br>df.dtypes<br>df.shape<br></code></pre></td></tr></table></figure></li><li><p>统计性信息</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计性信息</span><br>df.count()<br>df.mean()<br>df[<span class="hljs-string">&#x27;A&#x27;</span>].unique()<br><span class="hljs-comment"># 根据列的值分类，对每个类型进行计数</span><br>df[[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>]].groupby([<span class="hljs-string">&#x27;A&#x27;</span>]).count()<br></code></pre></td></tr></table></figure></li><li><p>索引设置</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 索引设置</span><br><span class="hljs-comment"># 将行索引变为列</span><br>df.reset_index()   <br><span class="hljs-comment"># set_index 与 reset_index 相反</span><br>df.set_index([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>排序</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 排序</span><br><span class="hljs-comment"># 根据某一列排序</span><br>df.sort_values(by=<span class="hljs-string">&#x27;A&#x27;</span>,ascending=<span class="hljs-literal">True</span>)      <br><span class="hljs-comment"># 根据多列排序</span><br>df.sort_values(by=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>],ascending=[<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>])<br></code></pre></td></tr></table></figure></li><li><p>拼接</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拼接</span><br><span class="hljs-comment"># 横向拼接</span><br>df1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;)<br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]&#125;)  <br>pd.concat([df1, df2], axis=<span class="hljs-number">1</span>)   <br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-comment">#    A  B  A  B</span><br><span class="hljs-comment"># 0  1  3  5  7</span><br><span class="hljs-comment"># 1  2  4  6  8 </span><br><span class="hljs-comment"># 纵向拼接</span><br>pd.concat([df1, df2], axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-comment">#    A  B</span><br><span class="hljs-comment"># 0  1  3</span><br><span class="hljs-comment"># 1  2  4</span><br><span class="hljs-comment"># 0  5  7</span><br><span class="hljs-comment"># 1  6  8</span><br><br><span class="hljs-comment"># merge 合并</span><br><span class="hljs-comment"># 左连接</span><br>df1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>], <span class="hljs-string">&#x27;value&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;)<br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>], <span class="hljs-string">&#x27;value&#x27;</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]&#125;)    <br>pd.merge(df1, df2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;left&#x27;</span>)    <br><span class="hljs-comment"># 右连接</span><br>pd.merge(df1, df2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;right&#x27;</span>)<br><span class="hljs-comment"># 内连接</span><br>pd.merge(df1, df2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;inner&#x27;</span>)   <br><span class="hljs-comment"># 外连接</span><br>pd.merge(df1, df2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda Install &amp; Use</title>
    <link href="/2025/03/27/anaconda/"/>
    <url>/2025/03/27/anaconda/</url>
    
    <content type="html"><![CDATA[<h1 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.anaconda.com/archive/Anaconda3-2023.07-2-Linux-x86_64.sh<br>bash Anaconda3-2023.07-2-Linux-x86_64.sh<br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 配置国内源</span><br><span class="hljs-built_in">cat</span> &gt;&gt; ~/.condarc &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">channels:</span><br><span class="hljs-string">  - conda-forge</span><br><span class="hljs-string">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="hljs-string">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="hljs-string">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="hljs-string">  - defaults</span><br><span class="hljs-string">show_channel_urls: true</span><br><span class="hljs-string">EOF</span><br><br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>conda config --add channels conda-forge<br><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda --version<br>conda init<br>conda activate base<br>conda config --show<br>conda config --show channels<br>conda clean -a<br>conda update conda<br>conda deactivate<br>conda create -n py310 python=3.10<br>conda list <br>conda info<br>conda <span class="hljs-built_in">env</span> list<br>conda <span class="hljs-built_in">env</span> <span class="hljs-built_in">export</span> -n myenv &gt; myenv.yml<br>conda <span class="hljs-built_in">env</span> create -f myenv.yml<br>conda list --<span class="hljs-built_in">export</span> &gt; conda_requirements.txt<br>conda install --file conda_requirements.txt<br>conda config --add channels conda-forge<br></code></pre></td></tr></table></figure><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><h3 id="gcc-源码安装"><a href="#gcc-源码安装" class="headerlink" title="gcc 源码安装"></a>gcc 源码安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://ftp.gnu.org/gnu/gcc/gcc-11.2.0/gcc-11.2.0.tar.gz<br>tar -zxvf gcc-11.2.0.tar.gz<br><span class="hljs-built_in">cd</span> gcc-11.2.0<br><span class="hljs-comment"># 下载必要的依赖</span><br>./contrib/download_prerequisites<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br>../configure --enable-languages=c,c++ --disable-multilib --prefix=/usr/local/gcc-13.2.0<br><span class="hljs-comment"># 使用所有 CPU 核心来加速编译</span><br>make -j$(<span class="hljs-built_in">nproc</span>) <br>make install<br><span class="hljs-comment"># 配置环境变量，根据实际情况选择</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/gcc-13.2.0/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/gcc-13.2.0/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h3 id="python封装成so文件"><a href="#python封装成so文件" class="headerlink" title="python封装成so文件"></a>python封装成so文件</h3><h4 id="安装cython"><a href="#安装cython" class="headerlink" title="安装cython"></a>安装cython</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install cython<br></code></pre></td></tr></table></figure><h4 id="创建编写源码文件及setup"><a href="#创建编写源码文件及setup" class="headerlink" title="创建编写源码文件及setup"></a>创建编写源码文件及setup</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># example.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a * b<br><br><span class="hljs-comment"># setup.py</span><br><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup<br><span class="hljs-keyword">from</span> Cython.Build <span class="hljs-keyword">import</span> cythonize<br><br>setup(<br>    ext_modules=cythonize(<span class="hljs-string">&quot;example.py&quot;</span>)<br>)<br></code></pre></td></tr></table></figure><h4 id="运行setup"><a href="#运行setup" class="headerlink" title="运行setup"></a>运行setup</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python setup.py build_ext --inplace<br></code></pre></td></tr></table></figure><p>编译成功后会有一个类似<code>example.cpython-310-x86_64-linux-gnu.so</code>的文件</p><ul><li>.so 文件必须在当前工作目录下，或者在 PYTHONPATH 中。</li><li>如果你想放在其他目录下，可以手动修改 sys.path：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&#x27;/path/to/your/so/file&#x27;</span>)<br><br><span class="hljs-keyword">import</span> example<br><span class="hljs-built_in">print</span>(example.add(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 8</span><br></code></pre></td></tr></table></figure><h4 id="在python中导入so文件"><a href="#在python中导入so文件" class="headerlink" title="在python中导入so文件"></a>在python中导入so文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> example<br><br><span class="hljs-built_in">print</span>(example.add(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>))      <span class="hljs-comment"># 输出: 8</span><br><span class="hljs-built_in">print</span>(example.multiply(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment"># 输出: 15</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker cannot pull images</title>
    <link href="/2025/03/07/docker-cannot-pull-images/"/>
    <url>/2025/03/07/docker-cannot-pull-images/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac-Docker-镜像网络问题"><a href="#Mac-Docker-镜像网络问题" class="headerlink" title="Mac Docker 镜像网络问题"></a>Mac Docker 镜像网络问题</h1><p>国内环境无法拉取docker镜像，网上有很多方法。</p><p>有修改 docker镜像源的，有往配置文件加代理或者加dns的。</p><p>个人常用方法是用喵喵，以前也只需要挂喵喵即可，最近发现只用它也没用了。</p><p>不知道是因为换了mac有什么不同，还是因为某些wall的限制加强了。</p><p>然后尝试修改了dns解析，成功了，dns地址使用</p><h2 id="Mac-终端配置代理"><a href="#Mac-终端配置代理" class="headerlink" title="Mac 终端配置代理"></a>Mac 终端配置代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> proxy=<span class="hljs-string">&#x27;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&#x27;</span><br><span class="hljs-built_in">alias</span> unproxy=<span class="hljs-string">&#x27;unset https_proxy http_proxy all_proxy&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Mac修改DNS"><a href="#Mac修改DNS" class="headerlink" title="Mac修改DNS"></a>Mac修改DNS</h2><ul><li>可以通过mac界面的网络来修改</li><li>也可以通过命令行修改</li></ul><p>个人一般需要修改的场景只在terminal中，所以将命令做成alias来快捷使用。</p><p>修改dns命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看网络接口</span><br>networksetup -listallnetworkservice<br><br>networksetup -setdnsservers Wi-Fi 8.8.8.8 114.114.114.114<br><br><span class="hljs-comment"># 查看wi-fi接口的dns配置</span><br>networksetup -getdnsservers Wi-Fi<br><br><span class="hljs-comment"># 或用scutil查看dns配置</span><br>scutil --dns<br><br><span class="hljs-comment"># 清空dns配置，即恢复默认</span><br>networksetup -setdnsservers Wi-Fi empty<br><br><span class="hljs-comment"># 刷新dns缓存</span><br>dscacheutil -flushcache<br></code></pre></td></tr></table></figure><h2 id="DNS推荐"><a href="#DNS推荐" class="headerlink" title="DNS推荐"></a>DNS推荐</h2><p>谷歌DNS: 8.8.8.8  – 个人尝试下来比较推荐</p><p>腾讯DNS : 119.29.29.29</p><p>AliDNS 阿里<br>首选： 223.5.5.5 备用： 223.6.6.6</p><p>114 DNS<br>常规公共 DNS (干净无劫持)</p><p>首选： 114.114.114.114</p><p>备选： 114.114.115.115</p><p>拦截钓鱼病毒木马网站 (保护上网安全)</p><p>首选： 114.114.114.119</p><p>备用： 114.114.115.119</p><p>拦截色情网站 (保护儿童)</p><p>首选： 114.114.114.110</p><p>备用： 114.114.115.110</p>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab download files</title>
    <link href="/2025/03/06/gitlab-download-files/"/>
    <url>/2025/03/06/gitlab-download-files/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitlab-下载文件"><a href="#Gitlab-下载文件" class="headerlink" title="Gitlab 下载文件"></a>Gitlab 下载文件</h1><p>背景：有需求从 gitlab 下载文件，但是又不想下载整个项目，而是只想下载某个目录下的所有文件。<br>     gitlab 上有些项目能达到几 G 到几十 G 不等，全部下载耗时。<br>     内网办公环境下无权限传入三方开源工具，所以只能重复造轮子，写了个 shell 版的临时使用。</p><p>主要用到三个接口：</p><ul><li><code>api/v4/projects?search=$&#123;proj_name&#125;</code> 查询项目信息接口</li><li><code>api/v4/projects/$&#123;proj_id&#125;/repository/tree?ref=$&#123;branch&#125;&amp;path=$&#123;path&#125;</code> 查询目录下文件信息接口</li><li><code>api/v4/projects/$&#123;proj_id&#125;/repository/files/$&#123;path&#125;/raw?ref=$&#123;branch&#125;</code> 下载文件接口</li></ul><p>大概思路：</p><ol><li>先通过 <code>api/v4/projects?search=$&#123;proj_name&#125;</code> 查询项目信息接口，获取项目 id</li><li>通过 <code>api/v4/projects/$&#123;proj_id&#125;/repository/tree?ref=$&#123;branch&#125;&amp;path=$&#123;path&#125;</code> 查询目录下文件信息接口，获取目录下所有文件路径</li><li>遍历目录下所有文件路径，通过 <code>api/v4/projects/$&#123;proj_id&#125;/repository/files/$&#123;path&#125;/raw?ref=$&#123;branch&#125;</code> 下载文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>:&lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>API from gitlab version 17.4<br>EOF<br><br><span class="hljs-keyword">function</span> get_params &#123;<br>    proj_name=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> | awk -F<span class="hljs-string">&#x27;/-/&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs <span class="hljs-built_in">basename</span>`<br>    branch=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> | awk -F<span class="hljs-string">&#x27;/-/&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F/ <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>    version_path=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> | awk -F<span class="hljs-string">&quot;/-/&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;branch&#125;</span>&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>    gitlab_url=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span> | sed -E <span class="hljs-string">&#x27;s|^(https?://[^/]+).*|\1|&#x27;</span>`<br>&#125;<br><br><span class="hljs-keyword">function</span> encode_to_url &#123;<br>    orl_name=<span class="hljs-variable">$&#123;1##*/&#125;</span><br>    file_name=<span class="hljs-variable">$&#123;orl_name%.*&#125;</span><br>    file_postfix=<span class="hljs-variable">$&#123;orl_name##*.&#125;</span><br><br>    <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file_postfix&#125;</span>&quot;</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file_name&#125;</span>&quot;</span> &amp;&amp; file_postfix=<span class="hljs-string">&quot;&quot;</span><br><br>    file_name=`<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file_name&#125;</span>&quot;</span> | <span class="hljs-built_in">od</span> -An -tx1 | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27; &#x27;</span> % | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&quot;\n&quot;</span>`<br><br>    <span class="hljs-built_in">test</span> -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file_postfix&#125;</span>&quot;</span> &amp;&amp; file_name_plus=<span class="hljs-variable">$&#123;file_name&#125;</span> || file_name_plus=<span class="hljs-variable">$&#123;file_name&#125;</span>.<span class="hljs-variable">$&#123;file_postfix&#125;</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> get_files &#123;<br>    proj_id=$(curl -s -H <span class="hljs-string">&quot;PRIVATE-TOKEN: <span class="hljs-variable">$&#123;TOKEN&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;gitlab_url&#125;</span>/api/v4/projects?search=<span class="hljs-variable">$&#123;proj_name&#125;</span>&quot;</span> \<br>        | jq -r --arg proj_name <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;proj_name&#125;</span>&quot;</span> <span class="hljs-string">&#x27;.[] | select(.name==$proj_name) | .id&#x27;</span>)<br><br>    path_list=$(curl -s -H <span class="hljs-string">&quot;PRIVATE-TOKEN: <span class="hljs-variable">$&#123;TOKEN&#125;</span>&quot;</span> \<br>        <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;gitlab_url&#125;</span>/api/v4/projects/<span class="hljs-variable">$&#123;proj_id&#125;</span>/repository/tree?ref=<span class="hljs-variable">$&#123;branch&#125;</span>&amp;path=<span class="hljs-variable">$&#123;version_path#/*&#125;</span>&quot;</span> | jq -r <span class="hljs-string">&quot;.[].path&quot;</span>)<br><br>    version_path=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;version_path#/*&#125;</span> | sed <span class="hljs-string">&#x27;s#/#%2F#g&#x27;</span>`<br>    IFS=$<span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;path_list&#125;</span><br>    <span class="hljs-keyword">do</span><br>        encode_to_url <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;item&#125;</span>&quot;</span><br>        download_files<br>    <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-keyword">function</span> download_files &#123;<br>    file_url=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;gitlab_url&#125;</span>/api/v4/projects/<span class="hljs-variable">$&#123;proj_id&#125;</span>/repository/files/<span class="hljs-variable">$&#123;version_path&#125;</span>%2F<span class="hljs-variable">$&#123;file_name_plus&#125;</span>/raw?ref=<span class="hljs-variable">$&#123;branch&#125;</span>&quot;</span><br>    curl -sSL -H <span class="hljs-string">&quot;PRIVATE-TOKEN: <span class="hljs-variable">$&#123;TOKEN&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file_url&#125;</span>&quot;</span> -o <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;orl_name&#125;</span>&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> options &#123;<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">test</span> <span class="hljs-variable">$#</span> -gt 0<br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>            -u|--url)<br>                url=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>                ;;<br>            -t|--token)<br>                TOKEN=<span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>                ;;<br>            *) Usage ;;<br>        <span class="hljs-keyword">esac</span><br>        <span class="hljs-built_in">shift</span> 2<br>    <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">Usage</span></span>()&#123;<br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">$&#123;0##*/&#125; in order to download files from gitlab</span><br><span class="hljs-string">    Usage:</span><br><span class="hljs-string">        -u|--url       gitlab url.</span><br><span class="hljs-string">        -t|--token     gitlab token.</span><br><span class="hljs-string">EOF</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br>    TOKEN=<span class="hljs-string">&quot;&quot;</span><br>    options <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br>    get_params<br>    get_files<br>&#125;<br><br>main <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python jinja2</title>
    <link href="/2025/03/05/python-jinja2/"/>
    <url>/2025/03/05/python-jinja2/</url>
    
    <content type="html"><![CDATA[<h1 id="jinjia2-模板引擎"><a href="#jinjia2-模板引擎" class="headerlink" title="jinjia2 模板引擎"></a>jinjia2 模板引擎</h1><p>jinjia2 可用于生成 html、xml、yaml 等格式的文件</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br>template = Template(<span class="hljs-string">&#x27;Hello &#123;&#123; name &#125;&#125;!&#x27;</span>)<br>template.render(name=<span class="hljs-string">&#x27;John Doe&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>模板包含<code>变量</code>或<code>表达式</code> ，这两者在模板求值的时候会被替换为值。模板中还有标签，控制模板的逻辑。模板语法的大量灵感来自于 Django 和 Python 。</p><p>两类分隔符：</p><ul><li><code>&#123;&#123;  &#125;&#125;</code></li><li><code>&#123;%  %&#125;</code></li></ul><blockquote><p>在前或后加上-可以用于去掉空格或空行，如 <code>&#123;&#123;- -&#125;&#125;</code> <code>&#123;&#123;%-  -%&#125;&#125;</code></p></blockquote><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li><p>safe 渲染时值不转义</p></li><li><p>capitialize 把值的首字母转换成大写，其他字母转换为小写</p></li><li><p>lower 把值转换成小写形式</p></li><li><p>upper 把值转换成大写形式</p></li><li><p>title 把值中每个单词的首字母都转换成大写</p></li><li><p>trim 把值的首尾空格去掉</p></li><li><p>striptags 渲染之前把值中所有的HTML标签都删掉</p></li><li><p>join 拼接多个值为字符串</p></li><li><p>replace 替换字符串的值</p></li><li><p>round 默认对数字进行四舍五入，也可以用参数进行控制</p></li><li><p>int 把值转换成整型</p></li></ul><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><h3 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;<br>&lt;head&gt;<br>    &#123;% block head %&#125;<br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;<br>    &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125; - My Webpage&lt;/title&gt;<br>    &#123;% endblock %&#125;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;&#123;% block content %&#125;&#123;% endblock %&#125;&lt;/div&gt;<br>    &lt;div <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;<br>        &#123;% block footer %&#125;<br>        &amp;copy; Copyright <span class="hljs-number">2008</span> by &lt;a href=<span class="hljs-string">&quot;http://domain.invalid/&quot;</span>&gt;you&lt;/a&gt;.<br>        &#123;% endblock %&#125;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="子模板"><a href="#子模板" class="headerlink" title="子模板"></a>子模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% extends <span class="hljs-string">&quot;base.html&quot;</span> %&#125;<br>&#123;% block title %&#125;Index&#123;% endblock %&#125;<br>&#123;% block head %&#125;<br>    &#123;&#123; <span class="hljs-built_in">super</span>() &#125;&#125;<br>    &lt;style <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        .important &#123; color: <span class="hljs-comment">#336699; &#125;</span><br>    &lt;/style&gt;<br>&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    &lt;h1&gt;Index&lt;/h1&gt;<br>    &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;important&quot;</span>&gt;<br>      Welcome on my awesome homepage.<br>    &lt;/p&gt;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>在一个 for 循环块中你可以访问这些特殊的变量:</p><ul><li><p>loop.index 当前循环迭代的次数（从 1 开始）</p></li><li><p>loop.index0 当前循环迭代的次数（从 0 开始）</p></li><li><p>loop.revindex 到循环结束需要迭代的次数（从 1 开始）</p></li><li><p>loop.revindex0 到循环结束需要迭代的次数（从 0 开始）</p></li><li><p>loop.first 如果是第一次迭代，为 True 。</p></li><li><p>loop.last 如果是最后一次迭代，为 True 。</p></li><li><p>loop.length 序列中的项目数。</p></li><li><p>loop.cycle 在一串序列间期取值的辅助函数。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> %&#125;<br>    &#123;&#123; item &#125;&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="if-条件判断"><a href="#if-条件判断" class="headerlink" title="if 条件判断"></a>if 条件判断</h3><ul><li><p><code>==</code> 比较两个对象是否相等。</p></li><li><p><code>!=</code> 比较两个对象的不等式。</p></li><li><p><code>&gt;</code> 如果左侧大于右侧，则为true。</p></li><li><p><code>&gt;=</code> 如果左侧大于或等于右侧，则为true。</p></li><li><p><code>&lt;</code> 如果左侧小于右侧，则为true。</p></li><li><p><code>&lt;=</code> 如果左侧小于或等于右侧，则为true</p></li><li><p>and 如果左右操作数为真，则返回true。</p></li><li><p>or 如果左操作数或右操作数为真，则返回true。</p></li><li><p>not 非，not x ：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">if</span> path != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">and</span> path <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> none %&#125;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p>可以看做 jinjia2 中的函数，用于取代重复的工作</p>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell script ssh &amp; linux cmd tips</title>
    <link href="/2025/03/05/shell-script-ssh/"/>
    <url>/2025/03/05/shell-script-ssh/</url>
    
    <content type="html"><![CDATA[<h1 id="脚本批量ssh登录"><a href="#脚本批量ssh登录" class="headerlink" title="脚本批量ssh登录"></a>脚本批量ssh登录</h1><ul><li>可以通过 expect 实现</li><li>可以通过 sshpass 实现</li></ul><h2 id="expect-脚本"><a href="#expect-脚本" class="headerlink" title="expect 脚本"></a>expect 脚本</h2><p>后续补充</p><h2 id="sshpass-脚本"><a href="#sshpass-脚本" class="headerlink" title="sshpass 脚本"></a>sshpass 脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">while</span> IFS=<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-built_in">read</span> -r ip <span class="hljs-built_in">uname</span> passwd<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssh <span class="hljs-variable">$ip</span> <span class="hljs-variable">$uname</span> <span class="hljs-variable">$password</span>&quot;</span><br>    sshpass -p <span class="hljs-string">&quot;<span class="hljs-variable">$passwd</span>&quot;</span> ssh -o StrictHostKeyChecking=no -n <span class="hljs-string">&quot;<span class="hljs-variable">$uname</span>@<span class="hljs-variable">$ip</span>&quot;</span> &lt; /dev/null<br>    <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span> &lt; info.txt<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong></p><p>ssh 会在登录后读取所有标准输入，因此会导致循环 read 后面的内容被 ssh 吞掉，导致只会登录一次</p><p>因此需要用 ssh -n选项或者在最后使用 &lt; &#x2F;dev&#x2F;null</p></blockquote><h2 id="linux-command-tips"><a href="#linux-command-tips" class="headerlink" title="linux command tips"></a>linux command tips</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rpm -q 只能按开头查询， 如 rpm -q zabbix-agent 只能查到zabbix-agent包，查不到 pcp-export-zabbix-agent这样的包</span><br>ps -Fu zabbix <span class="hljs-comment"># 按用户查找进程</span><br><span class="hljs-built_in">cp</span> /tmp/test.sh&#123;,.bak&#125; <span class="hljs-comment"># 复制文件并重命名，这样不用再多敲一段路径</span><br><br><span class="hljs-comment">## 这段sed基本囊括常用写法，-i.bak 修改的同时生成一个.bak后缀的未修改版文件，-e 后接 sed 表达式，\1表示第一个括号内匹配的内容</span><br>sed -i.bak -e <span class="hljs-string">&quot;s/\(Server=\|ServerActive=\)[^ ]*/\1192.168.4.4/g&quot;</span> \<br>    -e <span class="hljs-string">&quot;s/\(^Hostname=\)[^.]*/\1&quot;</span>$(ip a | grep inet | grep brd | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>| <span class="hljs-built_in">head</span> -1 | <span class="hljs-built_in">cut</span> -d/ -f1)<span class="hljs-string">&quot;/g&quot;</span> \<br>    -e <span class="hljs-string">&quot;/# HostMetadata=/a HostMetadata=Linux&quot;</span> \<br>    -e <span class="hljs-string">&quot;/# HostMetadataItem=/a HostMetadataItem=Linux&quot;</span> \<br>    /etc/zabbix/zabbix_agentd.conf<br><br><span class="hljs-comment"># test命令做逆判断会出现退出状态码为非0的情况，比如</span><br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">test</span> $? -ne 0 &amp;&amp; &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125; <br><span class="hljs-comment"># 由于ls命令执行成功，test $? -ne 0 为假，test命令本身返回非零值</span><br><span class="hljs-comment"># 如果这个语句作为整个脚本的最后一句，会导致即使脚本实际执行成功，但最后脚本的退出码也为非0</span><br><span class="hljs-comment"># 改成顺逻辑即可</span><br><span class="hljs-built_in">test</span> $? -eq 0 || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;failed&quot;</span>; <span class="hljs-built_in">exit</span> 1; &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 多线程编程</title>
    <link href="/2025/01/03/python-multithread/"/>
    <url>/2025/01/03/python-multithread/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-多线程编程"><a href="#Python-多线程编程" class="headerlink" title="Python 多线程编程"></a>Python 多线程编程</h1><h2 id="线程分配公式"><a href="#线程分配公式" class="headerlink" title="线程分配公式"></a>线程分配公式</h2><p><code>concurrent.futures.ThreadPoolExecutor</code> 默认线程数 <code>min(32, (os.cpu_count() or 1) + 4)</code></p><ul><li>计算密集型<ul><li>线程数 ≈ CPU 核心数，避免过多线程增加上下文切换的开销</li></ul></li><li>I&#x2F;O 密集型<ul><li>线程数可以适当增大，具体根据任务类型（如网络请求、文件 I&#x2F;O）调整</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    <span class="hljs-built_in">print</span>(executor._max_workers)  <span class="hljs-comment"># 输出默认线程数</span><br></code></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">with</span> ThreadPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>    <span class="hljs-comment"># 提交任务</span><br>    future1 = executor.submit(<span class="hljs-built_in">pow</span>, <span class="hljs-number">323</span>, <span class="hljs-number">1235</span>)<br>    future2 = executor.submit(<span class="hljs-built_in">pow</span>, <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># 获取任务结果</span><br>    <span class="hljs-built_in">print</span>(future1.result())<br>    <span class="hljs-built_in">print</span>(future2.result())<br><br>    <span class="hljs-comment"># 返回结果迭代器</span><br>    res = executor.<span class="hljs-built_in">map</span>(<span class="hljs-built_in">pow</span>, [<span class="hljs-number">323</span>, <span class="hljs-number">1235</span>], [<span class="hljs-number">1235</span>, <span class="hljs-number">1235</span>])<br></code></pre></td></tr></table></figure><h2 id="map-函数-lambda-函数"><a href="#map-函数-lambda-函数" class="headerlink" title="map 函数 &amp; lambda 函数"></a>map 函数 &amp; lambda 函数</h2><h3 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 嵌套 lambda 函数</span><br><span class="hljs-comment"># lambda 函数解包参数</span><br><span class="hljs-keyword">lambda</span> item: (<span class="hljs-keyword">lambda</span> route, flag: func(<span class="hljs-string">&quot;&quot;</span>, route, flag))(*item)<br><br><span class="hljs-comment"># item也可以是字典等可迭代对象</span><br><span class="hljs-comment"># 示例：解包字典</span><br>kwargs = &#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;z&quot;</span>: <span class="hljs-number">3</span>&#125;<br>result = (<span class="hljs-keyword">lambda</span> x, y, z: x + y + z)(**kwargs)  <span class="hljs-comment"># 使用 ** 解包字典</span><br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 输出: 6</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">key1, key2</span>):<br>    <span class="hljs-keyword">return</span> key1 + key2<br>result = (<span class="hljs-keyword">lambda</span> key1, key2: func(key1, key2))(**item)<br><br><span class="hljs-comment"># 示例：同时解包列表和字典</span><br>args = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>kwargs = &#123;<span class="hljs-string">&quot;z&quot;</span>: <span class="hljs-number">3</span>&#125;<br>result = (<span class="hljs-keyword">lambda</span> x, y, z: x + y + z)(*args, **kwargs)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 输出: 6</span><br><br><span class="hljs-comment"># 示例：嵌套解包</span><br>nested = [&#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;z&quot;</span>: <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;z&quot;</span>: <span class="hljs-number">6</span>&#125;]<br>result = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> item: (<span class="hljs-keyword">lambda</span> x, y, z: x + y + z)(**item), nested))<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 输出: [6, 15]</span><br></code></pre></td></tr></table></figure><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map 函数"></a>map 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">map</span>(func, iterables)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># 使用 map 将两个列表中的元素传入 add 函数</span><br>result = <span class="hljs-built_in">map</span>(add, list1, list2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result))  <span class="hljs-comment"># 输出: [5, 7, 9]</span><br><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-comment"># 使用 lambda 表达式直接传递两个值</span><br>result = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x, y: x * y, list1, list2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result))  <span class="hljs-comment"># 输出: [10, 40, 90]</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">concat</span>(<span class="hljs-params">prefix, word</span>):<br>    <span class="hljs-keyword">return</span> prefix + word<br><br><span class="hljs-comment"># 第一个参数固定为 &quot;&quot;, 第二个参数是列表</span><br>words = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br><br><span class="hljs-comment"># 使用 map 函数</span><br>result = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> word: concat(<span class="hljs-string">&quot;&quot;</span>, word), words)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result))  <span class="hljs-comment"># 输出: [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span><br><br><span class="hljs-comment"># 使用 itertools.repeat</span><br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> repeat<br><br><span class="hljs-comment"># 定义列表</span><br>words = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br><br><span class="hljs-comment"># 使用 repeat 将 &quot;&quot; 作为固定值传递</span><br>result = <span class="hljs-built_in">map</span>(concat, repeat(<span class="hljs-string">&quot;&quot;</span>), words)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result))  <span class="hljs-comment"># 输出: [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 异步</title>
    <link href="/2024/12/27/python-async/"/>
    <url>/2024/12/27/python-async/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-异步编程"><a href="#Python-异步编程" class="headerlink" title="Python 异步编程"></a>Python 异步编程</h1><p>使用 async 和 await 时，await 会使当前的协程暂停并等待异步操作完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">async_task</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;i&#125;</span> started&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;i&#125;</span> completed&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">await</span> async_task(i)<br><br><span class="hljs-comment"># 运行协程</span><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>执行过程：</p><ol><li>Task 0 started 会打印出来。</li><li>await asyncio.sleep(1) 会暂停当前协程 1 秒，并将控制权交回事件循环。</li><li>在这 1 秒钟内，事件循环可能会运行其他任务（如果有的话）。</li><li>1 秒后，Task 0 completed 会打印出来，然后循环进入下一次迭代，Task 1 开始。</li></ol><h2 id="异步并行任务"><a href="#异步并行任务" class="headerlink" title="异步并行任务"></a>异步并行任务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    tasks = [async_task(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br></code></pre></td></tr></table></figure><ol><li>返回值：每个异步任务的返回值会按任务的顺序排列在 gather() 返回的列表中。</li><li>捕获异常：asyncio.gather() 默认会在某个任务抛出异常时取消其他任务的执行。如果想捕获所有任务的异常并继续执行，可以将 return_exceptions&#x3D;True 传递给 gather()。</li></ol><p>async def 定义的函数返回一个协程对象，只有通过 await 或通过事件循环运行它时，它才会开始执行。</p><ul><li>async_task(i) 返回一个协程对象，并没有立刻执行任务，只是生成了一个协程。</li><li>await asyncio.gather(*tasks) 才是实际调度这些协程并开始执行它们的代码。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">async_task</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;i&#125;</span> started&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Result from Task <span class="hljs-subst">&#123;i&#125;</span>&quot;</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建协程对象列表，但这些协程对象并没有开始执行</span><br>    tasks = [async_task(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Tasks created&quot;</span>)<br><br>    <span class="hljs-comment"># 通过 asyncio.gather 来运行所有协程对象并等待它们的结果</span><br>    results = <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All results:&quot;</span>, results)<br><br><span class="hljs-comment"># 运行协程</span><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><h2 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-comment"># 异步函数，发送 HTTP 请求</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.text()<br><br><span class="hljs-comment"># 调用异步函数</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    url = <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span><br>    result = <span class="hljs-keyword">await</span> fetch(url)<br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment"># 启动事件循环</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure><blockquote><p>aiohttp 的 headers、URL 参数、cookies 中的 键 必须是字符串类型</p><p>aiohttp 不接受 None 类型的数据</p></blockquote><h2 id="aiofiles"><a href="#aiofiles" class="headerlink" title="aiofiles"></a>aiofiles</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> aiofiles<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-comment"># 异步写文件</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">write_file</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiofiles.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, mode=<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">await</span> f.write(<span class="hljs-string">&quot;Hello, aiofiles!&quot;</span>)<br><br><span class="hljs-comment"># 异步读文件</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiofiles.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        content = <span class="hljs-keyword">await</span> f.read()<br>        <span class="hljs-built_in">print</span>(content)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">await</span> write_file()  <span class="hljs-comment"># 写入文件</span><br>    <span class="hljs-keyword">await</span> read_file()   <span class="hljs-comment"># 读取文件</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s ConfigMap</title>
    <link href="/2024/12/23/k8s-configmap/"/>
    <url>/2024/12/23/k8s-configmap/</url>
    
    <content type="html"><![CDATA[<h1 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h1><h2 id="基于一个目录来创建-ConfigMap"><a href="#基于一个目录来创建-ConfigMap" class="headerlink" title="基于一个目录来创建 ConfigMap"></a>基于一个目录来创建 ConfigMap</h2><p>基于目录来创建 ConfigMap 时，kubectl 识别目录下文件名可以作为合法键名的文件， 并将这些文件打包到新的 ConfigMap 中。普通文件之外的所有目录项都会被忽略 （例如：子目录、符号链接、设备、管道等等）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p configure-pod-container/configmap/<br><br><span class="hljs-comment"># 将示例文件下载到 `configure-pod-container/configmap/` 目录</span><br>wget https://kubernetes.io/examples/configmap/game.properties -O configure-pod-container/configmap/game.properties<br>wget https://kubernetes.io/examples/configmap/ui.properties -O configure-pod-container/configmap/ui.properties<br><br><span class="hljs-comment"># 创建 ConfigMap</span><br>kubectl create configmap game-config --from-file=configure-pod-container/configmap/<br><br><span class="hljs-comment"># 查看 ConfigMap 详情</span><br>kubectl describe configmaps game-config<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-number">2022-02-18T18:52:05Z</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">game-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;516&quot;</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">b4952dc3-d670-11e5-8cd0-68f728db1985</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">game.properties:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    enemies=aliens</span><br><span class="hljs-string">    lives=3</span><br><span class="hljs-string">    enemies.cheat=true</span><br><span class="hljs-string">    enemies.cheat.level=noGoodRotten</span><br><span class="hljs-string">    secret.code.passphrase=UUDDLRLRBABAS</span><br><span class="hljs-string">    secret.code.allowed=true</span><br><span class="hljs-string">    secret.code.lives=30    </span><br><span class="hljs-string"></span>  <span class="hljs-attr">ui.properties:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    color.good=purple</span><br><span class="hljs-string">    color.bad=yellow</span><br><span class="hljs-string">    allow.textmode=true</span><br><span class="hljs-string">    how.nice.to.look=fairlyNice    </span><br></code></pre></td></tr></table></figure><h2 id="基于文件创建-ConfigMap"><a href="#基于文件创建-ConfigMap" class="headerlink" title="基于文件创建 ConfigMap"></a>基于文件创建 ConfigMap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties<br><br>kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties --from-file=configure-pod-container/configmap/ui.properties<br></code></pre></td></tr></table></figure><p><strong>使用 –from-env-file 选项基于 env 文件创建 ConfigMap</strong></p><p>每行都是一个环境变量，格式为 VAR&#x3D;VAL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Env 文件包含环境变量列表。其中适用以下语法规则:</span><br><span class="hljs-comment"># 这些语法规则适用：</span><br><span class="hljs-comment">#   Env 文件中的每一行必须为 VAR=VAL 格式。</span><br><span class="hljs-comment">#   以＃开头的行（即注释）将被忽略。</span><br><span class="hljs-comment">#   空行将被忽略。</span><br><span class="hljs-comment">#   引号不会被特殊处理（即它们将成为 ConfigMap 值的一部分）。</span><br><br><span class="hljs-comment"># 将示例文件下载到 `configure-pod-container/configmap/` 目录</span><br>wget https://kubernetes.io/examples/configmap/game-env-file.properties -O configure-pod-container/configmap/game-env-file.properties<br>wget https://kubernetes.io/examples/configmap/ui-env-file.properties -O configure-pod-container/configmap/ui-env-file.properties<br><br><span class="hljs-comment"># Env 文件 `game-env-file.properties` 如下所示</span><br><span class="hljs-built_in">cat</span> configure-pod-container/configmap/game-env-file.properties<br>enemies=aliens<br>lives=3<br>allowed=<span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-comment"># 此注释和上方的空行将被忽略</span><br><br>kubectl create configmap game-config-env-file \<br>       --from-env-file=configure-pod-container/configmap/game-env-file.properties<br></code></pre></td></tr></table></figure><h2 id="使用-ConfigMap-数据定义容器环境变量"><a href="#使用-ConfigMap-数据定义容器环境变量" class="headerlink" title="使用 ConfigMap 数据定义容器环境变量"></a>使用 ConfigMap 数据定义容器环境变量</h2><h3 id="使用单个-ConfigMap-中的数据定义容器环境变量"><a href="#使用单个-ConfigMap-中的数据定义容器环境变量" class="headerlink" title="使用单个 ConfigMap 中的数据定义容器环境变量"></a>使用单个 ConfigMap 中的数据定义容器环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create configmap special-config --from-literal=special.how=very<br></code></pre></td></tr></table></figure><p>将 ConfigMap 中定义的 special.how 赋值给 Pod 规约中的 SPECIAL_LEVEL_KEY 环境变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">registry.k8s.io/busybox</span><br>      <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;env&quot;</span> ]<br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-comment"># 定义环境变量</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPECIAL_LEVEL_KEY</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-comment"># ConfigMap 包含你要赋给 SPECIAL_LEVEL_KEY 的值</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>              <span class="hljs-comment"># 指定与取值相关的键名</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">special.how</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h3 id="使用来自多个-ConfigMap-的数据定义容器环境变量"><a href="#使用来自多个-ConfigMap-的数据定义容器环境变量" class="headerlink" title="使用来自多个 ConfigMap 的数据定义容器环境变量"></a>使用来自多个 ConfigMap 的数据定义容器环境变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">special.how:</span> <span class="hljs-string">very</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">env-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">log_level:</span> <span class="hljs-string">INFO</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">registry.k8s.io/busybox</span><br>      <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;env&quot;</span> ]<br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPECIAL_LEVEL_KEY</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">special.how</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LOG_LEVEL</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">configMapKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">env-config</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">log_level</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h3 id="将-ConfigMap-中的所有键值对配置为容器环境变量"><a href="#将-ConfigMap-中的所有键值对配置为容器环境变量" class="headerlink" title="将 ConfigMap 中的所有键值对配置为容器环境变量"></a>将 ConfigMap 中的所有键值对配置为容器环境变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">SPECIAL_LEVEL:</span> <span class="hljs-string">very</span><br>  <span class="hljs-attr">SPECIAL_TYPE:</span> <span class="hljs-string">charm</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">registry.k8s.io/busybox</span><br>      <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;env&quot;</span> ]<br>      <span class="hljs-attr">envFrom:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">configMapRef:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h3 id="将-ConfigMap-数据添加到一个卷中"><a href="#将-ConfigMap-数据添加到一个卷中" class="headerlink" title="将 ConfigMap 数据添加到一个卷中"></a>将 ConfigMap 数据添加到一个卷中</h3><p>如基于文件创建 ConfigMap 中所述，当你使用 –from-file 创建 ConfigMap 时，文件名成为存储在 ConfigMap 的 data 部分中的键， 文件内容成为键对应的值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">SPECIAL_LEVEL:</span> <span class="hljs-string">very</span><br>  <span class="hljs-attr">SPECIAL_TYPE:</span> <span class="hljs-string">charm</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">registry.k8s.io/busybox</span><br>      <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;ls /etc/config/&quot;</span> ]<br>      <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-comment"># 提供包含要添加到容器中的文件的 ConfigMap 的名称</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><p>Pod 运行时，命令 ls &#x2F;etc&#x2F;config&#x2F; 产生下面的输出:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">SPECIAL<span class="hljs-emphasis">_LEVEL</span><br><span class="hljs-emphasis">SPECIAL_</span>TYPE<br></code></pre></td></tr></table></figure><blockquote><p>如果该容器镜像的 &#x2F;etc&#x2F;config 目录中有一些文件，卷挂载将覆盖这些文件。</p></blockquote><h3 id="将-ConfigMap-数据添加到卷中的特定路径"><a href="#将-ConfigMap-数据添加到卷中的特定路径" class="headerlink" title="将 ConfigMap 数据添加到卷中的特定路径"></a>将 ConfigMap 数据添加到卷中的特定路径</h3><p>使用 path 字段为特定的 ConfigMap 项目指定预期的文件路径。 在这里，ConfigMap 中键 SPECIAL_LEVEL 的内容将挂载在 config-volume 卷中 &#x2F;etc&#x2F;config&#x2F;keys 文件中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">registry.k8s.io/busybox</span><br>      <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;cat /etc/config/keys&quot;</span> ]<br>      <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>        <span class="hljs-attr">items:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">SPECIAL_LEVEL</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">keys</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h2 id="使用-subPath"><a href="#使用-subPath" class="headerlink" title="使用 subPath"></a>使用 subPath</h2><p>volumeMounts[*].subPath 属性可用于指定所引用的卷内的子路径，而不是其根路径。</p><p>使用 subPath 字段将 ConfigMap 中的特定项目挂载到容器中的特定路径。 在这里，ConfigMap 中键 game.properties 的内容将挂载在 config-volume 卷中 &#x2F;usr&#x2F;game.properties 文件中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">subpath-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>      <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>      <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;cd /usr &amp;&amp; ls &amp;&amp; cat /usr/keys&quot;</span> ]<br>      <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/game.properties</span><br>        <span class="hljs-attr">subPath:</span> <span class="hljs-string">game.properties</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/ui.properties</span><br>        <span class="hljs-attr">subPath:</span> <span class="hljs-string">ui.properties</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">game-config</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><blockquote><p>以subPath方式挂载时，configmap更新，容器不会更新</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Helm 初探</title>
    <link href="/2024/12/20/helm-intro/"/>
    <url>/2024/12/20/helm-intro/</url>
    
    <content type="html"><![CDATA[<h1 id="helm-初探"><a href="#helm-初探" class="headerlink" title="helm 初探"></a>helm 初探</h1><blockquote><p><a href="https://helm.sh/zh/docs/intro/using_helm/">https://helm.sh/zh/docs/intro/using_helm/</a></p></blockquote><h2 id="三大概念"><a href="#三大概念" class="headerlink" title="三大概念"></a>三大概念</h2><p>Chart 代表着 Helm 包。它包含在 Kubernetes 集群内部运行应用程序，工具或服务所需的所有资源定义。你可以把它看作是 Homebrew formula，Apt dpkg，或 Yum RPM 在Kubernetes 中的等价物。</p><p>Repository（仓库） 是用来存放和共享 charts 的地方。它就像 Perl 的 CPAN 档案库网络 或是 Fedora 的 软件包仓库，只不过它是供 Kubernetes 包所使用的。</p><p>Release 是运行在 Kubernetes 集群中的 chart 的实例。一个 chart 通常可以在同一个集群中安装多次。每一次安装都会创建一个新的 release。以 MySQL chart为例，如果你想在你的集群中运行两个数据库，你可以安装该chart两次。每一个数据库都会拥有它自己的 release 和 release name。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前配置的仓库地址</span><br>helm repo list<br><span class="hljs-comment"># 删除默认仓库，默认在国外pull很慢</span><br>helm repo remove stable<br><span class="hljs-comment"># 添加几个常用的仓库,可自定义名字</span><br>helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts<br>helm repo add kaiyuanshe http://mirror.kaiyuanshe.cn/kubernetes/charts<br>helm repo add azure http://mirror.azure.cn/kubernetes/charts<br>helm repo add dandydev https://dandydeveloper.github.io/charts<br>helm repo add bitnami https://charts.bitnami.com/bitnami<br></code></pre></td></tr></table></figure><h2 id="搜索-chart"><a href="#搜索-chart" class="headerlink" title="搜索 chart"></a>搜索 chart</h2><p>Helm 可以从两种来源中进行搜索：</p><p><code>helm search hub</code> 从 Artifact Hub 中查找并列出 helm charts。 Artifact Hub中存放了大量不同的仓库。</p><p><code>helm search repo</code> 从你添加（使用 helm repo add）到本地 helm 客户端中的仓库中进行查找。该命令基于本地数据进行搜索，无需连接互联网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm search hub wordpress<br><br>helm repo update <br>helm search repo redis<br><span class="hljs-comment"># 拉取chart包到本地</span><br>helm pull bitnami/redis-cluster --version 8.1.2<br></code></pre></td></tr></table></figure><h2 id="安装前修改配置"><a href="#安装前修改配置" class="headerlink" title="安装前修改配置"></a>安装前修改配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm show values bitnami/wordpress<br></code></pre></td></tr></table></figure><h2 id="安装-helm-包"><a href="#安装-helm-包" class="headerlink" title="安装 helm 包"></a>安装 helm 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装redis-ha集群，取名redis-ha，需要指定持存储类</span><br>helm install redis-cluster bitnami/redis-cluster --<span class="hljs-built_in">set</span> global.storageClass=nfs,global.redis.password=xiagao --version 8.1.2<br><br><span class="hljs-comment"># 追踪 release 的状态，或是重新读取配置信息</span><br>helm status redis-cluster<br><br><span class="hljs-comment"># 卸载</span><br>helm uninstall redis-cluster<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastAPI Notes 2</title>
    <link href="/2024/12/11/fastapi-notes-2/"/>
    <url>/2024/12/11/fastapi-notes-2/</url>
    
    <content type="html"><![CDATA[<h1 id="FastAPI-Notes-2"><a href="#FastAPI-Notes-2" class="headerlink" title="FastAPI Notes 2"></a>FastAPI Notes 2</h1><h2 id="关闭交互式文档访问"><a href="#关闭交互式文档访问" class="headerlink" title="关闭交互式文档访问"></a>关闭交互式文档访问</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br>app = FastAPI(<br>    docs_url=<span class="hljs-literal">None</span>, <br>    redoc_url=<span class="hljs-literal">None</span>,<br>    <span class="hljs-comment"># 或直接设置</span><br>    openapi_url=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><h2 id="全局异常错误捕获"><a href="#全局异常错误捕获" class="headerlink" title="全局异常错误捕获"></a>全局异常错误捕获</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">from</span> starlette.respnses <span class="hljs-keyword">import</span> JSONResponse<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">exception_not_found</span>(<span class="hljs-params">request, exc</span>):<br>    <span class="hljs-keyword">return</span> JSONResponse(&#123;<br>        <span class="hljs-string">&quot;code&quot;</span>: exc.status_code,<br>        <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;not found&quot;</span>,<br>        &#125;, status_code=exc.status_code)<br><br>exception_handlers = &#123;<br>    <span class="hljs-number">404</span>: exception_not_found,<br>    &#125;<br><br>app = FastAPI(<br>    exception_handlers=exception_handlers)<br></code></pre></td></tr></table></figure><h2 id="多应用挂载"><a href="#多应用挂载" class="headerlink" title="多应用挂载"></a>多应用挂载</h2><h3 id="主从应用挂载"><a href="#主从应用挂载" class="headerlink" title="主从应用挂载"></a>主从应用挂载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">from</span> fastapi.repsponses <span class="hljs-keyword">import</span> JSONResponse<br><br>app = FastAPI(title=<span class="hljs-string">&quot;主应用&quot;</span>)<br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> JSONResponse(&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;主应用&quot;</span>&#125;)<br><br>subapp = FastAPI(title=<span class="hljs-string">&quot;子应用&quot;</span>)<br><span class="hljs-meta">@subapp.get(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> JSONResponse(&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;子应用&quot;</span>&#125;)<br><br>app.mount(path=<span class="hljs-string">&quot;/subapp&quot;</span>, app=subapp, name=<span class="hljs-string">&quot;子应用&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>主应用交互式文档地址为<a href="http://127.0.0.1:8000/docs%E3%80%82">http://127.0.0.1:8000/docs。</a></li><li>子应用交互式文档地址为<a href="http://127.0.0.1:8000/subapp/docs">http://127.0.0.1:8000/subapp/docs</a></li></ul><h3 id="挂载其他WSGI应用"><a href="#挂载其他WSGI应用" class="headerlink" title="挂载其他WSGI应用"></a>挂载其他WSGI应用</h3><p>可以用来挂载如Flask、Django等应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建fastapi主应用</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">from</span> fastapi.responses <span class="hljs-keyword">import</span> JSONResponse<br><br>app = FastAPI()<br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> JSONResponse(&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;fastapi应用&quot;</span>&#125;)<br><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> fastapi.middleware.wsgi <span class="hljs-keyword">import</span> WSGIMiddleware<br>flask_app = Flask(__name__)<br><span class="hljs-meta">@flask_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/index&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flask_main</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;flask应用&quot;</span>&#125;<br><br>app.mount(path=<span class="hljs-string">&quot;/flaskapp&quot;</span>, app=WSGIMiddleware(flask_app), name=<span class="hljs-string">&quot;flask应用&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="自定义配置swagger-ui"><a href="#自定义配置swagger-ui" class="headerlink" title="自定义配置swagger_ui"></a>自定义配置swagger_ui</h2><p>由于相关的swagger-ui.css和swagger-ui-bundle.js资源是从第三方的CDN服务商上加载的，第三方的CDN服务出现问题就会导致无法正常加载可视化API文档界面的情况。为了避免出现这种情况，以及在无网络情况下也能正常访问API交互式文档，就需要自定义（或改造）并渲染HTML模板中的一些变量，让swagger-ui.css和swagger-ui-bundle.js等静态资源从本地进行加载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">from</span> fastapi.openapi.docs <span class="hljs-keyword">import</span> get_swagger_ui_html, get_redoc_html, get_swagger_ui_oauth2_redirect_html<br><span class="hljs-keyword">from</span> fastapi.staticfiles <span class="hljs-keyword">import</span> StaticFiles<br><span class="hljs-keyword">import</span> pathlib<br><br>app = FastAPI(docs_url=<span class="hljs-literal">None</span>, redoc_url=<span class="hljs-literal">None</span>)<br>app.mount(<br>    path=<span class="hljs-string">&quot;/static&quot;</span>,<br>    app=StaticFiles(directory=<span class="hljs-string">f&quot;pathlib.Path.cwd()/static&quot;</span>),<br>    name=<span class="hljs-string">&quot;static&quot;</span><br>)<br><br><span class="hljs-comment"># 函数参数缺一不可，否则会访问不了</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/docs&quot;</span>, include_in_schema=<span class="hljs-literal">False</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_swagger_ui_html</span>():<br>    <span class="hljs-keyword">return</span> get_swagger_ui_html(<br>        openapi_url=app.openapi_url,<br>        title=app.title + <span class="hljs-string">&quot; - Swagger UI&quot;</span>,<br>        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,<br>        swagger_js_url=<span class="hljs-string">&quot;/static/swagger-ui-bundle.js&quot;</span>,<br>        swagger_css_url=<span class="hljs-string">&quot;/static/swagger-ui.css&quot;</span>,<br>        swagger_favicon_url=<span class="hljs-string">&quot;/static/favicon.png&quot;</span>,<br>    )<br></code></pre></td></tr></table></figure><h2 id="Body参数"><a href="#Body参数" class="headerlink" title="Body参数"></a>Body参数</h2><h3 id="引入Pydantic模型声明请求体"><a href="#引入Pydantic模型声明请求体" class="headerlink" title="引入Pydantic模型声明请求体"></a>引入Pydantic模型声明请求体</h3><p>将请求体参数识别为JSON格式字符串，并自动将字段转换为相应的数据类型。</p><p>自动进行参数规则的校验。如果校验失败，则响应报文内容会自动返回一个错误，并准确指出错误数据的位置和信息。</p><p>为模型生成JSON Schema定义，并显示在API交互式文档中，Schema会成为OpenAPI Schema的一部分。</p><p>在函数内部，可以直接访问模型对象的所有属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    username: <span class="hljs-built_in">str</span> = Field(..., min_length=<span class="hljs-number">1</span>, max_length=<span class="hljs-number">20</span>, title=<span class="hljs-string">&quot;用户名&quot;</span>, description=<span class="hljs-string">&quot;用户名&quot;</span>, example=<span class="hljs-string">&quot;admin&quot;</span>)<br>    password: <span class="hljs-built_in">str</span> = Field(..., min_length=<span class="hljs-number">8</span>, max_length=<span class="hljs-number">20</span>)<br>    age: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 把模型绑定到视图函数中</span><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/user&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params">user: User</span>):<br>    <span class="hljs-keyword">return</span> user<br></code></pre></td></tr></table></figure><h3 id="用Body声明请求体"><a href="#用Body声明请求体" class="headerlink" title="用Body声明请求体"></a>用Body声明请求体</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/user&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params"></span><br><span class="hljs-params">    username: <span class="hljs-built_in">str</span> = Body(<span class="hljs-params">..., min_length=<span class="hljs-number">1</span>, max_length=<span class="hljs-number">20</span></span>),</span><br><span class="hljs-params">    password: <span class="hljs-built_in">str</span> = Body(<span class="hljs-params">..., min_length=<span class="hljs-number">8</span>, max_length=<span class="hljs-number">20</span></span>),</span><br><span class="hljs-params">    age: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = Body(<span class="hljs-params"><span class="hljs-literal">None</span>, gt=<span class="hljs-number">0</span>, lt=<span class="hljs-number">100</span></span>),</span><br><span class="hljs-params">    </span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;username&quot;</span>: username, <span class="hljs-string">&quot;password&quot;</span>: password, <span class="hljs-string">&quot;age&quot;</span>: age&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Body的embed参数"><a href="#Body的embed参数" class="headerlink" title="Body的embed参数"></a>Body的embed参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    username: <span class="hljs-built_in">str</span><br>    password: <span class="hljs-built_in">str</span><br>    age: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/user&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params">user: User = Body(<span class="hljs-params">..., embed=<span class="hljs-literal">True</span></span>)</span>):<br>    <span class="hljs-keyword">return</span> user<br></code></pre></td></tr></table></figure><h2 id="后台异步任务执行"><a href="#后台异步任务执行" class="headerlink" title="后台异步任务执行"></a>后台异步任务执行</h2><p>这种后台执行的任务本质是在当前服务进程中完成的，若当前服务进程被关闭，则任务也会被终止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建后台任务函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">background_task</span>(<span class="hljs-params">n</span>):<br>    time.sleep(n)<br><span class="hljs-comment"># 定义后台任务</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> BackgroundTasks<br><span class="hljs-meta">@app.api_route(<span class="hljs-params">path=<span class="hljs-string">&quot;/task&quot;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_task</span>(<span class="hljs-params">background_tasks: BackgroundTasks</span>):<br>    background_tasks.add_task(background_task, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="应用启动和关闭事件"><a href="#应用启动和关闭事件" class="headerlink" title="应用启动和关闭事件"></a>应用启动和关闭事件</h2><p>startup和shutdown事件是FastAPI提供的进行服务启动和关闭时执行的事件回调通知处理机制</p><ol><li>startup事件</li></ol><p>应用场景：</p><ul><li>设置和读取应用配置参数。</li><li>通过对数据库初始化把初始化的对象存储到app对象上下文中。</li><li>初始化第三方插件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">app = FastAPI()<br><span class="hljs-meta">@app.on_event(<span class="hljs-params"><span class="hljs-string">&quot;startup&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">startup_event</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;应用启动&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>shutdown事件</li></ol><p>当服务关闭并进行一些资源释放操作时，可以通过shutdown事件进行相关资源释放处理</p><p>只有当所有连接都已关闭，并且任何正在进行的后台任务都已完成时，才会调用关闭处理事件。如果服务被强制进行kill操作，则回调函数不会执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.on_event(<span class="hljs-params"><span class="hljs-string">&quot;shutdown&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">shutdown_event</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;应用关闭&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="HTTPException-异常处理"><a href="#HTTPException-异常处理" class="headerlink" title="HTTPException 异常处理"></a>HTTPException 异常处理</h2><p>通过@app.exception_handler(HTTPException)进行一个全局异常的捕获处理。当手动抛出HTTPException异常时，FastAPI会对此类异常进行拦截处理，并进入http_exception_handler()函数。在该函数内部会对异常信息进行提取处理，然后通过JSONResponse进行响应报文封装输出并返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> HTTPException, FastAPI, Request<br><span class="hljs-keyword">from</span> fastapi.responses <span class="hljs-keyword">import</span> JSONResponse<br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> Query<br>app = FastAPI()<br><br><span class="hljs-meta">@app.exception_handler(<span class="hljs-params">HTTPException</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">http_exception_handler</span>(<span class="hljs-params">request: Request, exc: HTTPException</span>):<br>    <span class="hljs-keyword">return</span> JSONResponse(<br>        content=exc.detail,<br>        status_code=exc.status_code,<br>        headers=exc.headers)<br></code></pre></td></tr></table></figure><h2 id="设置和环境变量"><a href="#设置和环境变量" class="headerlink" title="设置和环境变量"></a>设置和环境变量</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># .env文件设置</span><br><span class="hljs-attr">ADMIN_EMAIL</span>=<span class="hljs-string">&quot;deadpool@example.com&quot;</span><br><span class="hljs-attr">APP_NAME</span>=<span class="hljs-string">&quot;ChimichangApp&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> lru_cache<br><span class="hljs-keyword">from</span> pydantic_settings <span class="hljs-keyword">import</span> BaseSettings<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>(<span class="hljs-title class_ inherited__">BaseSettings</span>):<br>    app_name: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Awesome API&quot;</span><br>    admin_email: <span class="hljs-built_in">str</span><br>    items_per_user: <span class="hljs-built_in">int</span> = <span class="hljs-number">50</span><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>:<br>        env_file = <span class="hljs-string">&quot;.env&quot;</span><br><br><span class="hljs-meta">@lru_cache</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_settings</span>():<br>    load_dotenv()<br>    <span class="hljs-keyword">return</span> Settings()<br></code></pre></td></tr></table></figure><h2 id="中间件记录请求日志"><a href="#中间件记录请求日志" class="headerlink" title="中间件记录请求日志"></a>中间件记录请求日志</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Request<br><span class="hljs-keyword">import</span> time<br><br>app = FastAPI()<br><br><span class="hljs-comment"># 定义中间件函数</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">log_request_info</span>(<span class="hljs-params">request: Request, call_next</span>):<br>    start_time = time.time()<br>    <span class="hljs-comment"># 获取客户端IP地址（考虑反向代理情况）</span><br>    x_forwarded_for = request.headers.get(<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>)<br>    <span class="hljs-keyword">if</span> x_forwarded_for:<br>        client_ip = x_forwarded_for.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>].strip()<br>    <span class="hljs-keyword">else</span>:<br>        client_ip = request.client.host<br><br>    <span class="hljs-comment"># 获取请求方法（如GET、POST等）</span><br>    request_method = request.method<br>    <span class="hljs-comment"># 获取请求路径</span><br>    request_path = request.url.path<br>    <span class="hljs-comment"># 获取用户代理信息</span><br>    user_agent = request.headers.get(<span class="hljs-string">&quot;user-agent&quot;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        response = <span class="hljs-keyword">await</span> call_next(request)<br>    <span class="hljs-keyword">finally</span>:<br>        process_time = (time.time() - start_time) * <span class="hljs-number">1000</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[Request Log] - IP: <span class="hljs-subst">&#123;client_ip&#125;</span>, Method: <span class="hljs-subst">&#123;request_method&#125;</span>, Path: <span class="hljs-subst">&#123;request_path&#125;</span>, User-Agent: <span class="hljs-subst">&#123;user_agent&#125;</span>, Process Time: <span class="hljs-subst">&#123;process_time:<span class="hljs-number">.2</span>f&#125;</span>ms&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> response<br><br><span class="hljs-comment"># 添加中间件到应用</span><br>app.middleware(<span class="hljs-string">&quot;http&quot;</span>)(log_request_info)<br><br><span class="hljs-comment"># 定义一个简单的路由用于测试</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_root</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello, World!&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="UploadFile"><a href="#UploadFile" class="headerlink" title="UploadFile"></a>UploadFile</h3><p>UploadFile 是一个异步对象，它的文件内容是通过 read() 方法逐步读取的。一旦你调用 read() 方法并读取文件内容，文件指针会被移动，后续的读取会发生错误或无法读取到任何内容。这意味着如果你在一个函数中调用了 read() 并读取了文件的内容，那么在另一个函数中调用 read() 时，文件指针已经到达文件的末尾，无法再次读取文件内容。</p><p>因此可以使用变量对读取的内容进行保存来多次使用，而不是多次调用 read() 方法。</p><h3 id="接收文件上传"><a href="#接收文件上传" class="headerlink" title="接收文件上传"></a>接收文件上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, File, UploadFile<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/upload-multiple/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_multiple_files</span>(<span class="hljs-params">files: <span class="hljs-type">List</span>[UploadFile] = File(<span class="hljs-params">...</span>)</span>):<br>    file_details = []<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        content = <span class="hljs-keyword">await</span> file.read()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Filename: <span class="hljs-subst">&#123;file.filename&#125;</span>, Content-Type: <span class="hljs-subst">&#123;file.content_type&#125;</span>&quot;</span>)<br>        file_details.append(&#123;<span class="hljs-string">&quot;filename&quot;</span>: file.filename, <span class="hljs-string">&quot;content_type&quot;</span>: file.content_type&#125;)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;files&quot;</span>: file_details&#125;<br><br><span class="hljs-comment">## 保存上传的文件</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, File, UploadFile<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/save-file/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_file</span>(<span class="hljs-params">file: UploadFile = File(<span class="hljs-params">...</span>)</span>):<br>    file_location = <span class="hljs-string">f&quot;uploads/<span class="hljs-subst">&#123;file.filename&#125;</span>&quot;</span>  <span class="hljs-comment"># 文件保存路径</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_location, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> buffer:<br>        buffer.write(<span class="hljs-keyword">await</span> file.read())  <span class="hljs-comment"># 保存文件内容</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;info&quot;</span>: <span class="hljs-string">f&quot;File &#x27;<span class="hljs-subst">&#123;file.filename&#125;</span>&#x27; saved at &#x27;<span class="hljs-subst">&#123;file_location&#125;</span>&#x27;&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="限制上传文件大小"><a href="#限制上传文件大小" class="headerlink" title="限制上传文件大小"></a>限制上传文件大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Request, HTTPException<br><span class="hljs-keyword">from</span> starlette.middleware.trustedhost <span class="hljs-keyword">import</span> TrustedHostMiddleware<br><span class="hljs-keyword">from</span> starlette.middleware.exceptions <span class="hljs-keyword">import</span> ExceptionMiddleware<br><span class="hljs-keyword">from</span> starlette.middleware.gzip <span class="hljs-keyword">import</span> GZipMiddleware<br><br>app = FastAPI()<br><br><span class="hljs-comment"># 设置文件大小限制</span><br><span class="hljs-meta">@app.middleware(<span class="hljs-params"><span class="hljs-string">&quot;http&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">limit_upload_size</span>(<span class="hljs-params">request: Request, call_next</span>):<br>    max_size = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>  <span class="hljs-comment"># 最大文件大小：1MB</span><br>    content_length = request.headers.get(<span class="hljs-string">&quot;Content-Length&quot;</span>)<br>    <span class="hljs-keyword">if</span> content_length <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(content_length) &gt; max_size:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">413</span>, detail=<span class="hljs-string">&quot;File too large&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> call_next(request)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pymysql与连接池</title>
    <link href="/2024/12/09/pymysql-pool/"/>
    <url>/2024/12/09/pymysql-pool/</url>
    
    <content type="html"><![CDATA[<h1 id="pymysql-与连接池"><a href="#pymysql-与连接池" class="headerlink" title="pymysql 与连接池"></a>pymysql 与连接池</h1><h2 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1. 连接到 MySQL 数据库</span><br>connection = pymysql.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,         <span class="hljs-comment"># 数据库地址</span><br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,              <span class="hljs-comment"># 数据库用户名</span><br>    password=<span class="hljs-string">&#x27;your_password&#x27;</span>, <span class="hljs-comment"># 数据库密码</span><br>    database=<span class="hljs-string">&#x27;test_db&#x27;</span>,       <span class="hljs-comment"># 数据库名称（需事先创建好）</span><br>    charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>,        <span class="hljs-comment"># 设置字符集</span><br>    cursorclass=pymysql.cursors.DictCursor  <span class="hljs-comment"># 返回结果为字典格式</span><br>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 2. 创建游标对象</span><br>    <span class="hljs-keyword">with</span> connection.cursor() <span class="hljs-keyword">as</span> cursor:<br>        <span class="hljs-comment"># 创建表</span><br>        create_table_query = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        CREATE TABLE IF NOT EXISTS users (</span><br><span class="hljs-string">            id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="hljs-string">            name VARCHAR(100) NOT NULL,</span><br><span class="hljs-string">            age INT NOT NULL,</span><br><span class="hljs-string">            email VARCHAR(100)</span><br><span class="hljs-string">        );</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        cursor.execute(create_table_query)<br><br>        <span class="hljs-comment"># 插入数据</span><br>        insert_query = <span class="hljs-string">&quot;INSERT INTO users (name, age, email) VALUES (%s, %s, %s)&quot;</span><br>        cursor.execute(insert_query, (<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;alice@example.com&quot;</span>))<br>        cursor.execute(insert_query, (<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;bob@example.com&quot;</span>))<br><br>        <span class="hljs-comment"># 提交事务</span><br>        connection.commit()<br><br>        <span class="hljs-comment"># 查询数据</span><br>        select_query = <span class="hljs-string">&quot;SELECT * FROM users&quot;</span><br>        cursor.execute(select_query)<br>        results = cursor.fetchall()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;查询结果:&quot;</span>)<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results:<br>            <span class="hljs-built_in">print</span>(row)<br><br>        <span class="hljs-comment"># 更新数据</span><br>        update_query = <span class="hljs-string">&quot;UPDATE users SET age = %s WHERE name = %s&quot;</span><br>        cursor.execute(update_query, (<span class="hljs-number">28</span>, <span class="hljs-string">&quot;Alice&quot;</span>))<br>        connection.commit()<br><br>        <span class="hljs-comment"># 删除数据</span><br>        delete_query = <span class="hljs-string">&quot;DELETE FROM users WHERE name = %s&quot;</span><br>        cursor.execute(delete_query, (<span class="hljs-string">&quot;Bob&quot;</span>,))<br>        connection.commit()<br><br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-comment"># 3. 关闭数据库连接</span><br>    connection.close()<br></code></pre></td></tr></table></figure><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>在使用 pymysql 连接 MySQL 时，可以通过引入 连接池 来提高数据库操作效率，避免频繁建立和关闭连接带来的开销。</p><ol><li><p>安装依赖</p><p> 为了使用连接池，可以通过 DBUtils 库的 PooledDB 模块实现连接池管理。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install DBUtils<br></code></pre></td></tr></table></figure></li><li><p>使用 DBUtils.PooledDB 实现连接池</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> DBUtils.PooledDB <span class="hljs-keyword">import</span> PooledDB<br><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 创建连接池</span><br>pool = PooledDB(<br>    creator=pymysql,          <span class="hljs-comment"># 使用 pymysql 作为连接器</span><br>    maxconnections=<span class="hljs-number">5</span>,         <span class="hljs-comment"># 最大连接数</span><br>    mincached=<span class="hljs-number">2</span>,              <span class="hljs-comment"># 初始化时创建的连接数</span><br>    maxcached=<span class="hljs-number">3</span>,              <span class="hljs-comment"># 连接池中最多可缓存的连接数</span><br>    blocking=<span class="hljs-literal">True</span>,            <span class="hljs-comment"># 达到最大连接数后是否阻塞，True 为阻塞</span><br>    ping=<span class="hljs-number">0</span>,                   <span class="hljs-comment"># 检测连接是否可用，0 表示从不检测</span><br>    host=<span class="hljs-string">&quot;localhost&quot;</span>,         <span class="hljs-comment"># MySQL 主机地址</span><br>    user=<span class="hljs-string">&quot;root&quot;</span>,              <span class="hljs-comment"># 用户名</span><br>    password=<span class="hljs-string">&quot;your_password&quot;</span>, <span class="hljs-comment"># 密码</span><br>    database=<span class="hljs-string">&quot;test_db&quot;</span>,       <span class="hljs-comment"># 数据库名</span><br>    charset=<span class="hljs-string">&quot;utf8mb4&quot;</span>         <span class="hljs-comment"># 字符集</span><br>)<br><br><span class="hljs-comment"># 从连接池获取连接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_connection</span>():<br>    <span class="hljs-keyword">return</span> pool.connection()<br><br><span class="hljs-comment"># 使用连接池连接数据库</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_query</span>(<span class="hljs-params">query, params=<span class="hljs-literal">None</span></span>):<br>    conn = get_connection()   <span class="hljs-comment"># 从连接池获取连接</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> conn.cursor() <span class="hljs-keyword">as</span> cursor:<br>            cursor.execute(query, params)<br>            <span class="hljs-keyword">if</span> query.strip().upper().startswith(<span class="hljs-string">&quot;SELECT&quot;</span>):<br>                result = cursor.fetchall()  <span class="hljs-comment"># 查询语句，返回结果</span><br>                <span class="hljs-keyword">return</span> result<br>            <span class="hljs-keyword">else</span>:<br>                conn.commit()  <span class="hljs-comment"># 非查询语句，提交事务</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error:&quot;</span>, e)<br>        conn.rollback()  <span class="hljs-comment"># 回滚事务</span><br>    <span class="hljs-keyword">finally</span>:<br>        conn.close()  <span class="hljs-comment"># 将连接返回到连接池</span><br><br><span class="hljs-comment"># 示例：插入数据</span><br>execute_query(<br>    <span class="hljs-string">&quot;INSERT INTO users (name, age, email) VALUES (%s, %s, %s)&quot;</span>,<br>    (<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;alice@example.com&quot;</span>)<br>)<br><br><span class="hljs-comment"># 示例：查询数据</span><br>results = execute_query(<span class="hljs-string">&quot;SELECT * FROM users&quot;</span>)<br><span class="hljs-built_in">print</span>(results)<br></code></pre></td></tr></table></figure></li><li><p>参数说明</p><p> 连接池参数</p><ul><li>creator：指定使用的数据库连接模块，这里为 pymysql。</li><li>maxconnections：连接池允许的最大连接数，0 表示不限制连接数。</li><li>mincached：初始化时创建的连接数。</li><li>maxcached：池中允许的最大空闲连接数。</li><li>blocking：如果连接数已达到最大值，是否阻塞等待可用连接。True 表示阻塞。</li><li>ping：控制是否在获取连接时检查连接的可用性<ul><li>0：从不检查；</li><li>1：执行 ping 检测；</li><li>2：检查 socket；</li><li>4：检查断开情况；</li><li>可以组合值如 3 表示 ping + socket 检查</li></ul></li></ul><p> MySQL 连接参数</p><ul><li>host：MySQL 数据库地址（例如 localhost 或 IP 地址）。</li><li>user：MySQL 用户名。</li><li>password：MySQL 密码。</li><li>database：指定连接的数据库名。</li><li>charset：设置字符集，推荐使用 utf8mb4。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openpyxl</title>
    <link href="/2024/12/09/openpyxl/"/>
    <url>/2024/12/09/openpyxl/</url>
    
    <content type="html"><![CDATA[<h1 id="openpyxl"><a href="#openpyxl" class="headerlink" title="openpyxl"></a>openpyxl</h1><h2 id="1-安装-OpenPyXL"><a href="#1-安装-OpenPyXL" class="headerlink" title="1. 安装 OpenPyXL"></a>1. 安装 OpenPyXL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install openpyxl<br></code></pre></td></tr></table></figure><h2 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. 基本操作</h2><h3 id="2-1-创建-Excel-文件"><a href="#2-1-创建-Excel-文件" class="headerlink" title="2.1 创建 Excel 文件"></a>2.1 创建 Excel 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><br><span class="hljs-comment"># 创建一个新的工作簿</span><br>wb = Workbook()<br><br><span class="hljs-comment"># 激活默认工作表</span><br>ws = wb.active<br>ws.title = <span class="hljs-string">&quot;Sheet1&quot;</span>  <span class="hljs-comment"># 重命名工作表</span><br><br><span class="hljs-comment"># 写入数据</span><br>ws[<span class="hljs-string">&quot;A1&quot;</span>] = <span class="hljs-string">&quot;Hello&quot;</span><br>ws[<span class="hljs-string">&quot;B1&quot;</span>] = <span class="hljs-number">123</span><br><br><span class="hljs-comment"># 保存文件</span><br>wb.save(<span class="hljs-string">&quot;example.xlsx&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-2-读取-Excel-文件"><a href="#2-2-读取-Excel-文件" class="headerlink" title="2.2 读取 Excel 文件"></a>2.2 读取 Excel 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<br><br><span class="hljs-comment"># 加载已有的工作簿</span><br>wb = load_workbook(<span class="hljs-string">&quot;example.xlsx&quot;</span>)<br><br><span class="hljs-comment"># 获取默认的工作表</span><br>ws = wb.active<br><br><span class="hljs-comment"># 读取单元格数据</span><br><span class="hljs-built_in">print</span>(ws[<span class="hljs-string">&quot;A1&quot;</span>].value)  <span class="hljs-comment"># 输出: Hello</span><br><span class="hljs-built_in">print</span>(ws[<span class="hljs-string">&quot;B1&quot;</span>].value)  <span class="hljs-comment"># 输出: 123</span><br><br><span class="hljs-comment"># 使用行列索引读取数据</span><br><span class="hljs-built_in">print</span>(ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">2</span>).value)  <span class="hljs-comment"># 输出: 123</span><br></code></pre></td></tr></table></figure><h3 id="2-3-修改-Excel-文件"><a href="#2-3-修改-Excel-文件" class="headerlink" title="2.3 修改 Excel 文件"></a>2.3 修改 Excel 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<br><br><span class="hljs-comment"># 加载已有工作簿</span><br>wb = load_workbook(<span class="hljs-string">&quot;example.xlsx&quot;</span>)<br>ws = wb.active<br><br><span class="hljs-comment"># 修改单元格数据</span><br>ws[<span class="hljs-string">&quot;A2&quot;</span>] = <span class="hljs-string">&quot;World&quot;</span><br>ws[<span class="hljs-string">&quot;B2&quot;</span>] = <span class="hljs-number">456</span><br><br><span class="hljs-comment"># 保存修改</span><br>wb.save(<span class="hljs-string">&quot;example_modified.xlsx&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-进阶操作"><a href="#3-进阶操作" class="headerlink" title="3. 进阶操作"></a>3. 进阶操作</h2><h3 id="3-1-操作多个工作表"><a href="#3-1-操作多个工作表" class="headerlink" title="3.1 操作多个工作表"></a>3.1 操作多个工作表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建多个工作表</span><br>ws1 = wb.create_sheet(<span class="hljs-string">&quot;Sheet2&quot;</span>)  <span class="hljs-comment"># 创建新工作表</span><br>ws2 = wb.create_sheet(<span class="hljs-string">&quot;Sheet3&quot;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 将工作表插入到第1个位置</span><br><br><span class="hljs-comment"># 获取工作表</span><br><span class="hljs-built_in">print</span>(wb.sheetnames)  <span class="hljs-comment"># 输出所有工作表名</span><br><br><span class="hljs-comment"># 删除工作表</span><br>wb.remove(ws1)<br></code></pre></td></tr></table></figure><h3 id="3-2-迭代读取数据"><a href="#3-2-迭代读取数据" class="headerlink" title="3.2 迭代读取数据"></a>3.2 迭代读取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按行迭代</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ws.iter_rows(min_row=<span class="hljs-number">1</span>, max_row=<span class="hljs-number">2</span>, min_col=<span class="hljs-number">1</span>, max_col=<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> cell <span class="hljs-keyword">in</span> row:<br>        <span class="hljs-built_in">print</span>(cell.value)<br><br><span class="hljs-comment"># 按列迭代</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> ws.iter_cols(min_row=<span class="hljs-number">1</span>, max_row=<span class="hljs-number">2</span>, min_col=<span class="hljs-number">1</span>, max_col=<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> cell <span class="hljs-keyword">in</span> col:<br>        <span class="hljs-built_in">print</span>(cell.value)<br></code></pre></td></tr></table></figure><h3 id="3-3-合并和拆分单元格"><a href="#3-3-合并和拆分单元格" class="headerlink" title="3.3 合并和拆分单元格"></a>3.3 合并和拆分单元格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 合并单元格</span><br>ws.merge_cells(<span class="hljs-string">&quot;A1:C1&quot;</span>)  <span class="hljs-comment"># 合并A1到C1</span><br>ws[<span class="hljs-string">&quot;A1&quot;</span>] = <span class="hljs-string">&quot;Merged Cells&quot;</span><br><br><span class="hljs-comment"># 拆分单元格</span><br>ws.unmerge_cells(<span class="hljs-string">&quot;A1:C1&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-4-设置单元格样式"><a href="#3-4-设置单元格样式" class="headerlink" title="3.4 设置单元格样式"></a>3.4 设置单元格样式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> openpyxl.styles <span class="hljs-keyword">import</span> Font, Alignment, PatternFill<br><br><span class="hljs-comment"># 设置字体样式</span><br>ws[<span class="hljs-string">&quot;A1&quot;</span>].font = Font(name=<span class="hljs-string">&quot;Arial&quot;</span>, size=<span class="hljs-number">14</span>, bold=<span class="hljs-literal">True</span>, italic=<span class="hljs-literal">True</span>, color=<span class="hljs-string">&quot;FF0000&quot;</span>)<br><br><span class="hljs-comment"># 设置对齐方式</span><br>ws[<span class="hljs-string">&quot;A1&quot;</span>].alignment = Alignment(horizontal=<span class="hljs-string">&quot;center&quot;</span>, vertical=<span class="hljs-string">&quot;center&quot;</span>)<br><br><span class="hljs-comment"># 设置背景颜色</span><br>ws[<span class="hljs-string">&quot;A1&quot;</span>].fill = PatternFill(fill_type=<span class="hljs-string">&quot;solid&quot;</span>, start_color=<span class="hljs-string">&quot;FFFF00&quot;</span>, end_color=<span class="hljs-string">&quot;FFFF00&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-5-插入图表"><a href="#3-5-插入图表" class="headerlink" title="3.5 插入图表"></a>3.5 插入图表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl.chart <span class="hljs-keyword">import</span> BarChart, Reference<br><br><span class="hljs-comment"># 准备数据</span><br>ws.append([<span class="hljs-string">&quot;Year&quot;</span>, <span class="hljs-string">&quot;Sales&quot;</span>])<br>ws.append([<span class="hljs-number">2021</span>, <span class="hljs-number">100</span>])<br>ws.append([<span class="hljs-number">2022</span>, <span class="hljs-number">200</span>])<br>ws.append([<span class="hljs-number">2023</span>, <span class="hljs-number">300</span>])<br><br><span class="hljs-comment"># 创建图表</span><br>chart = BarChart()<br>data = Reference(ws, min_col=<span class="hljs-number">2</span>, min_row=<span class="hljs-number">1</span>, max_col=<span class="hljs-number">2</span>, max_row=<span class="hljs-number">4</span>)<br>chart.add_data(data, titles_from_data=<span class="hljs-literal">True</span>)<br>ws.add_chart(chart, <span class="hljs-string">&quot;E5&quot;</span>)  <span class="hljs-comment"># 将图表插入到E5单元格</span><br></code></pre></td></tr></table></figure><h2 id="4-高级功能"><a href="#4-高级功能" class="headerlink" title="4. 高级功能"></a>4. 高级功能</h2><h3 id="4-1-使用公式"><a href="#4-1-使用公式" class="headerlink" title="4.1 使用公式"></a>4.1 使用公式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ws[<span class="hljs-string">&quot;A3&quot;</span>] = <span class="hljs-string">&quot;=SUM(B1:B2)&quot;</span>  <span class="hljs-comment"># 插入SUM公式</span><br></code></pre></td></tr></table></figure><h3 id="4-2-数据验证"><a href="#4-2-数据验证" class="headerlink" title="4.2 数据验证"></a>4.2 数据验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl.worksheet.datavalidation <span class="hljs-keyword">import</span> DataValidation<br><br><span class="hljs-comment"># 创建数据验证规则</span><br>dv = DataValidation(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;list&quot;</span>, formula1=<span class="hljs-string">&#x27;&quot;Option1,Option2,Option3&quot;&#x27;</span>, allow_blank=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 应用数据验证到单元格</span><br>ws.add_data_validation(dv)<br>dv.add(ws[<span class="hljs-string">&quot;A1&quot;</span>])<br></code></pre></td></tr></table></figure><h3 id="4-3-操作超大文件"><a href="#4-3-操作超大文件" class="headerlink" title="4.3 操作超大文件"></a>4.3 操作超大文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">openpyxl 支持只加载部分数据，适用于处理大文件。<br><br>wb = load_workbook(<span class="hljs-string">&quot;large_file.xlsx&quot;</span>, read_only=<span class="hljs-literal">True</span>)<br>ws = wb.active<br><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ws.iter_rows(values_only=<span class="hljs-literal">True</span>):<br>    <span class="hljs-built_in">print</span>(row)<br></code></pre></td></tr></table></figure><h2 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h2><h3 id="5-1-只加载数据，不加载公式的计算结果"><a href="#5-1-只加载数据，不加载公式的计算结果" class="headerlink" title="5.1 只加载数据，不加载公式的计算结果"></a>5.1 只加载数据，不加载公式的计算结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">wb = load_workbook(<span class="hljs-string">&quot;example.xlsx&quot;</span>, data_only=<span class="hljs-literal">True</span>)<br>ws = wb.active<br><span class="hljs-built_in">print</span>(ws[<span class="hljs-string">&quot;A3&quot;</span>].value)  <span class="hljs-comment"># 输出公式计算后的结果，而不是公式</span><br></code></pre></td></tr></table></figure><h3 id="5-2-保护工作表"><a href="#5-2-保护工作表" class="headerlink" title="5.2 保护工作表"></a>5.2 保护工作表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ws.protection.sheet = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 启用保护</span><br>ws.protection.password = <span class="hljs-string">&quot;mypassword&quot;</span>  <span class="hljs-comment"># 设置密码</span><br></code></pre></td></tr></table></figure><h3 id="5-3-设置列宽和行高"><a href="#5-3-设置列宽和行高" class="headerlink" title="5.3 设置列宽和行高"></a>5.3 设置列宽和行高</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ws.column_dimensions[<span class="hljs-string">&quot;A&quot;</span>].width = <span class="hljs-number">20</span>  <span class="hljs-comment"># 设置列宽</span><br>ws.row_dimensions[<span class="hljs-number">1.</span>height = <span class="hljs-number">30</span>  <span class="hljs-comment"># 设置行高</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jq 常用操作介绍</title>
    <link href="/2024/12/06/jq/"/>
    <url>/2024/12/06/jq/</url>
    
    <content type="html"><![CDATA[<h1 id="jq-命令基本用法"><a href="#jq-命令基本用法" class="headerlink" title="jq 命令基本用法"></a>jq 命令基本用法</h1><p>jq 是一个轻量级且功能强大的命令行 JSON 处理工具，允许用户灵活地解析、过滤、格式化和转换 JSON 数据。</p><p>随着微服务架构的兴起以及 JSON 数据格式的广泛使用，jq 命令的使用频率也在变高。</p><blockquote><p><a href="https://github.com/Kas-tle/java2bedrock.sh/blob/main/converter.sh">https://github.com/Kas-tle/java2bedrock.sh/blob/main/converter.sh</a></p><p>用到了大量 jq 命令，可以学习借鉴。</p><p>Top 10 open source and public projects attracting the most first-time contributors in 2024 on GitHub</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>jq [选项] &lt;过滤表达式&gt; [文件名]</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ol><li><p>格式化输出</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 格式化 JSON 数据为可读格式 </span><br>jq <span class="hljs-string">&#x27;.&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>提取字段值</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提取 name字段值</span><br>jq <span class="hljs-string">&#x27;.name&#x27;</span> data.json<br><span class="hljs-comment"># 提取多个字段值</span><br>jq <span class="hljs-string">&#x27;.name, .age&#x27;</span> data.json<br>jq <span class="hljs-string">&#x27;.[] | &#123;name: .name, city: .city&#125;&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>提取嵌套字段</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提取 skills 数组的第一个值</span><br>jq <span class="hljs-string">&#x27;.skills[0]&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>过滤数组</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出数组中的所有值。</span><br>jq <span class="hljs-string">&#x27;.skills[]&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li></ol><h2 id="复杂操作"><a href="#复杂操作" class="headerlink" title="复杂操作"></a>复杂操作</h2><ol><li><p>条件筛选</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出 age 大于 25 的数据</span><br>jq <span class="hljs-string">&#x27;select(.age &gt; 25)&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>计算字段</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 计算 age 字段的两倍</span><br>jq <span class="hljs-string">&#x27;.age * 2&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>修改 JSON 数据</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 age 字段的值修改为 35</span><br>jq <span class="hljs-string">&#x27;.age = 35&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>添加新字段</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 给 JSON 数据添加 city 字段</span><br>jq <span class="hljs-string">&#x27;. + &#123;city: &quot;New York&quot;&#125;&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>结合管道命令</p><ul><li>从命令行获取数据并处理：</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 作用：从 API 获取数据并筛选价格大于 100 的项目</span><br>curl -s https://api.example.com/data | jq <span class="hljs-string">&#x27;.items[] | select(.price &gt; 100)&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><ul><li><p>-r：去掉输出中的引号</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jq -r <span class="hljs-string">&#x27;.name&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li><li><p>-c：压缩格式输出</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jq -c <span class="hljs-string">&#x27;.&#x27;</span> data.json<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitLab 常用操作与问题记录</title>
    <link href="/2024/11/29/GitLab-Base/"/>
    <url>/2024/11/29/GitLab-Base/</url>
    
    <content type="html"><![CDATA[<h1 id="GitLab-常用操作与问题记录"><a href="#GitLab-常用操作与问题记录" class="headerlink" title="GitLab 常用操作与问题记录"></a>GitLab 常用操作与问题记录</h1><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>gitlab-rails console<br><br>user = User.find_by_username(<span class="hljs-string">&#x27;root&#x27;</span>)<br><br>user.password = <span class="hljs-string">&#x27;NewSecurePassword&#x27;</span><br><br>user.password_confirmation = <span class="hljs-string">&#x27;NewSecurePassword&#x27;</span><br><br>user.save!<br></code></pre></td></tr></table></figure><h2 id="External-url"><a href="#External-url" class="headerlink" title="External url"></a>External url</h2><p>影响到点击克隆按钮显示的地址</p><p>打开 GitLab 的主配置文件：&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</p><p>修改</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">external_url &#x27;http://your.gitlab.domain&#x27;<br></code></pre></td></tr></table></figure><p>重新配置 gitlab 并重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-ctl reconfigure<br><br><span class="hljs-built_in">sudo</span> gitlab-ctl restart<br></code></pre></td></tr></table></figure><ol start="3"><li><p>检查 SSH 和 HTTP&#x2F;HTTPS 配置</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">gitlab_rails<span class="hljs-section">[&#x27;gitlab_shell_ssh_host&#x27;]</span> = &#x27;your.gitlab.domain&#x27;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>如果依然显示错误可尝试清理缓存</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-rake cache:clear<br></code></pre></td></tr></table></figure></li><li><p>检查服务状态</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-ctl status<br></code></pre></td></tr></table></figure><p>  Nginx 配置冲突</p><p>  • 确保没有其他服务占用 GitLab 的端口。</p><p>  • 检查 Nginx 配置是否生成正确：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-ctl show-config | grep nginx<br></code></pre></td></tr></table></figure></li></ul><h2 id="GitLab-升级迁移"><a href="#GitLab-升级迁移" class="headerlink" title="GitLab 升级迁移"></a>GitLab 升级迁移</h2><p>跨多个版本升级时，根据官方文档说明需要逐步升级到最新版本</p><ul><li>GitLab 8: <code>8.11.Z</code> &gt; <code>8.12.0</code> &gt; <code>8.17.7</code></li><li>GitLab 9: <code>9.0.13</code> &gt; <code>9.5.10</code></li><li>GitLab 10: <code>10.0.7</code> &gt; <code>10.8.7</code></li><li>GitLab 11: <code>11.0.6</code> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1200"><code>11.11.8</code></a></li><li>GitLab 12: <code>12.0.12</code> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1210"><code>12.1.17</code></a> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#12100"><code>12.10.14</code></a></li><li>GitLab 13: <code>13.0.14</code> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1310"><code>13.1.11</code></a> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1388"><code>13.8.8</code></a> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#13120"><code>13.12.15</code></a></li><li>GitLab 14: <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1400"><code>14.0.12</code></a> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1430"><code>14.3.6</code></a> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1490"><code>14.9.5</code></a> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#14100"><code>14.10.5</code></a></li><li>GitLab 15: <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1500"><code>15.0.5</code></a> &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1510"><code>15.1.6</code></a> (for GitLab instances with multiple web nodes) &gt; <a href="https://archives.docs.gitlab.com/15.11/ee/update/index.html#1540"><code>15.4.6</code></a> &gt; <a href="https://gitlab.com/gitlab-org/gitlab/-/releases">latest <code>15.Y.Z</code></a></li></ul><p>GitLab 15 includes the following required upgrade stops:</p><ul><li><p>15.0.5.</p></li><li><p>15.1.6. GitLab instances with multiple web nodes.</p></li><li><p>15.4.6.</p></li><li><p>15.11.13. The latest GitLab 15.11 release.</p></li></ul><p>GitLab 16 includes the following required upgrade stops:</p><ul><li><p>16.0.9. Instances with lots of users or large pipeline variables history.</p></li><li><p>16.1.7. Instances with NPM packages in their package registry.</p></li><li><p>16.2.10. Instances with large pipeline variables history.</p></li><li><p>16.3.8.</p></li><li><p>16.7.z. The latest GitLab 16.7 release.</p></li><li><p>16.11.z. The latest GitLab 16.11 release.</p></li></ul><p>GitLab 17 includes the following required upgrade stops:</p><ul><li><p>17.3.z. The latest GitLab 17.3 release.</p></li><li><p>17.5.z. The latest GitLab 17.5 release.</p></li><li><p>17.8.z. Not yet released.</p></li><li><p>17.11.z. Not yet released.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 升级前请务必先备份</span><br><span class="hljs-comment">## 关闭selinux</span><br>setenforce 0<br><span class="hljs-comment">## 永久关闭selinux，并重启</span><br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config<br>rpm -Uvh gitlab-ce-11.11.8-ce.0.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://gitlab.cn/support/toolbox/upgrade-path/">https://gitlab.cn/support/toolbox/upgrade-path/</a></p></blockquote><h2 id="GitLab-基础操作"><a href="#GitLab-基础操作" class="headerlink" title="GitLab 基础操作"></a>GitLab 基础操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 获取 gitlab 版本信息</span><br>gitlab-rake gitlab:<span class="hljs-built_in">env</span>:info<br><span class="hljs-comment">## 查看 gitlab 运行状态</span><br>gitlab-ctl status<br><span class="hljs-comment">## 查看 gitlab 运行日志</span><br>gitlab-ctl <span class="hljs-built_in">tail</span><br><span class="hljs-comment">## 重启 gitlab</span><br>gitlab-ctl restart<br><span class="hljs-comment">## 备份 gitlab</span><br>gitlab-backup create<br><span class="hljs-comment">## 旧版本备份</span><br>gitlab-rake gitlab:backup:create<br><span class="hljs-comment">## 恢复备份</span><br><span class="hljs-comment">## timestamp 填时间戳而不是文件名</span><br>gitlab-backup restore BACKUP=timestamp<br>gitlab-rake gitlab:backup:restore BACKUP=TIMESTAMP<br><span class="hljs-comment">## 重新配置gitlab</span><br>gitlab-ctl reconfigure<br><span class="hljs-comment">## 检查 gitlab 是否正常运行</span><br>gitlab-rake gitlab:check<br><span class="hljs-comment">## 检查 gitlab 仓库是否正常运行</span><br>gitlab-rake gitlab:repos:check<br>gitlab-rake gitlab:check SANITIZE=<span class="hljs-literal">true</span><br><span class="hljs-comment">## 启用详细模式</span><br>gitlab-rake gitlab:check VERBOSE=<span class="hljs-literal">true</span><br>gitlab-ctl status<br><span class="hljs-comment">## 重新加载配置</span><br>gitlab-ctl reconfigure<br></code></pre></td></tr></table></figure><h2 id="gitlab-升级-14-版本迁移问题"><a href="#gitlab-升级-14-版本迁移问题" class="headerlink" title="gitlab 升级 14 版本迁移问题"></a>gitlab 升级 14 版本迁移问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 迁移项目到新的存储路径</span><br>gitlab-rake gitlab:storage:migrate_to_hashed<br><span class="hljs-comment">## 使用之后会提示 Found 6 projects using Legacy Storage.</span><br><span class="hljs-comment">## 查看使用 Legacy Storage 的项目数量 </span><br>gitlab-rake gitlab:storage:legacy_projects<br><span class="hljs-comment">## 查看这六个具体是什么项目</span><br><span class="hljs-comment">## 查看使用旧版本的项目</span><br>gitlab-rake gitlab:storage:list_legacy_projects<br></code></pre></td></tr></table></figure><h3 id="read-only状态导致的迁移问题"><a href="#read-only状态导致的迁移问题" class="headerlink" title="read-only状态导致的迁移问题"></a>read-only状态导致的迁移问题</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 进入 Rails 控制台</span><br>gitlab-rails console<br><br><span class="hljs-comment"># 查询 项目 read-only 打开的 </span><br>projects = <span class="hljs-title class_">Project</span>.where(<span class="hljs-symbol">repository_read_only:</span> <span class="hljs-literal">true</span>)<br><br><span class="hljs-comment"># 关闭 项目的 read-only</span><br>projects.each <span class="hljs-keyword">do</span> |<span class="hljs-params">p</span>|<br>  p.update!(<span class="hljs-symbol">repository_read_only:</span><span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 存储库迁移</span><br>gitlab-rake gitlab:storage:migrate_to_hashed<br><br><span class="hljs-comment"># 查看所列出项目总数，与页面显示数量进行对比</span><br>gitlab-rake gitlab:storage:hashed_projects<br><br><span class="hljs-comment"># 查看，全部迁移成功以下两条命令应该为 0 </span><br>gitlab-rake gitlab:storage:legacy_projects<br>gitlab-rake gitlab:storage:legacy_attachments<br><br><span class="hljs-comment"># 全部迁移成功，以下两条命令应该没有输出</span><br>gitlab-rake gitlab:storage:list_legacy_projects<br>gitlab-rake gitlab:storage:list_legacy_attachments<br></code></pre></td></tr></table></figure><h3 id="hashed-目录迁移失败"><a href="#hashed-目录迁移失败" class="headerlink" title="@hashed 目录迁移失败"></a>@hashed 目录迁移失败</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看具体哪些项目迁移失败</span><br>gitlab-rake gitlab:storage:list_legacy_projects<br><span class="hljs-comment"># 在日志中搜索该项目，查看具体路径</span><br>grep <span class="hljs-string">&#x27;xxxx&#x27;</span> /var/log/gitlab/sidekiq/current<br><span class="hljs-comment"># 发现报错Repository cannot be moved from &#x27;@hashed/b2/81/b281bcxxxxxxxx.wiki&#x27; to</span><br><span class="hljs-comment"># 查看目录下是否有 xxx.wiki的目录</span><br><span class="hljs-built_in">ls</span> -l /var/opt/gitlab/git-data/repositories/@hashed/98/96/<br><span class="hljs-comment"># 发现有该目录，将其移动到 /tmp 目录下</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> /var/opt/gitlab/git-data/repositories/@hashed/b2/81/b281bcxxxxxxx /tmp/<br><span class="hljs-comment"># 然后再执行迁移</span><br><span class="hljs-built_in">sudo</span> gitlab-rake gitlab:storage:migrate_to_hashed<br></code></pre></td></tr></table></figure><h3 id="后台迁移任务没完成"><a href="#后台迁移任务没完成" class="headerlink" title="后台迁移任务没完成"></a>后台迁移任务没完成</h3><blockquote><p><a href="https://archives.docs.gitlab.com/15.11/ee/update/background_migrations.html">https://archives.docs.gitlab.com/15.11/ee/update/background_migrations.html</a></p><p><a href="https://archives.docs.gitlab.com/15.11/ee/update/#upgrade-paths">https://archives.docs.gitlab.com/15.11/ee/update/#upgrade-paths</a></p></blockquote><p>14版本后可在页面中看见后台迁移任务。<br>在管理中心监控中后台迁移可看见未完成迁移任务。</p><p>升级中可能因为Background Migration任务没有执行完，导致升级失败。<br>需要等待任务执行完成后，再进行升级。</p><h2 id="升级-16-大版本配置项已废弃的问题"><a href="#升级-16-大版本配置项已废弃的问题" class="headerlink" title="升级 16 大版本配置项已废弃的问题"></a>升级 16 大版本配置项已废弃的问题</h2><p>如 gitlab_rails[‘gitlab_default_can_create_group’] has been deprecated since 15.5 and was removed in 16.0.</p><p>解决方法：在 <code>gitlab.rb</code> 中将提示配置项删除或注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改完配置项后，重新配置，重启</span><br>gitlab-ctl reconfigure<br>gitlab-ctl restart<br></code></pre></td></tr></table></figure><h2 id="后台任务进度未知问题"><a href="#后台任务进度未知问题" class="headerlink" title="后台任务进度未知问题"></a>后台任务进度未知问题</h2><p>运行<code>gitlab-psql</code> 进入控制台</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"># 获取正在迁移的任务 ID<br><span class="hljs-keyword">SELECT</span><br> id,<br> job_class_name,<br> <span class="hljs-built_in">table_name</span>,<br> <span class="hljs-built_in">column_name</span>,<br> job_arguments<br><span class="hljs-keyword">FROM</span> batched_background_migrations<br><span class="hljs-keyword">WHERE</span> status <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span>(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>);<br><br># 查看任务进度<br># 将 xx 替换为查询到的 ID<br># 多次运行查询如果没有新行添加说明完成或暂停<br># 有变化则仍在运行<br><span class="hljs-keyword">SELECT</span><br> started_at,<br> finished_at,<br> finished_at - started_at <span class="hljs-keyword">AS</span> duration,<br> min_value,<br> max_value,<br> batch_size,<br> sub_batch_size<br><span class="hljs-keyword">FROM</span> batched_background_migration_jobs<br><span class="hljs-keyword">WHERE</span> batched_background_migration_id = XX<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h2 id="配置-ldap"><a href="#配置-ldap" class="headerlink" title="配置 ldap"></a>配置 ldap</h2><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rb">gitlab_rails[<span class="hljs-string">&#x27;ldap_enabled&#x27;</span>] = <span class="hljs-literal">true</span><br>gitlab_rails[<span class="hljs-string">&#x27;ldap_servers&#x27;</span>] = <span class="hljs-variable constant_">YAML</span>.load <span class="hljs-string">&lt;&lt;-EOS</span><br><span class="hljs-string">  main: # 可以配置多个 LDAP 服务器，这里是主服务器</span><br><span class="hljs-string">    label: &#x27;LDAP&#x27; # 显示在登录页面的名称</span><br><span class="hljs-string">    host: &#x27;ldap.example.com&#x27;</span><br><span class="hljs-string">    port: 389</span><br><span class="hljs-string">    uid: &#x27;sAMAccountName&#x27; # 用于用户登录的属性，例如 AD 中的 sAMAccountName</span><br><span class="hljs-string">    bind_dn: &#x27;cn=admin,dc=example,dc=com&#x27; # 用于绑定的服务账户</span><br><span class="hljs-string">    password: &#x27;password&#x27; # 服务账户密码</span><br><span class="hljs-string">    encryption: &#x27;plain&#x27; # 加密方式：plain、start_tls 或 simple_tls</span><br><span class="hljs-string">    verify_certificates: true</span><br><span class="hljs-string">    smartcard_auth: false</span><br><span class="hljs-string">    active_directory: true # 如果使用的是 Active Directory，设置为 true</span><br><span class="hljs-string">    allow_username_or_email_login: false</span><br><span class="hljs-string">    lowercase_usernames: false</span><br><span class="hljs-string">    block_auto_created_users: false</span><br><span class="hljs-string">    base: &#x27;dc=example,dc=com&#x27; # 用户搜索的 Base DN</span><br><span class="hljs-string">    user_filter: &#x27;&#x27; # 额外的筛选条件，例如只允许特定组的用户访问</span><br><span class="hljs-string">    group_base: &#x27;&#x27;</span><br><span class="hljs-string">    admin_group: &#x27;&#x27; # 如果有管理员组，可以设置此项</span><br><span class="hljs-string">    sync_ssh_keys: false # 是否同步用户的 SSH 密钥</span><br><span class="hljs-string">EOS</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重新配置</span><br>gitlab-ctl reconfigure<br><span class="hljs-comment"># 重启</span><br>gitlab-ctl restart<br><span class="hljs-comment"># 测试，如果配置成功，输出会显示用户和组信息。</span><br>gitlab-rake gitlab:ldap:check<br></code></pre></td></tr></table></figure><h2 id="redis-开启RDB-导致-oom-gitlab-崩溃"><a href="#redis-开启RDB-导致-oom-gitlab-崩溃" class="headerlink" title="redis 开启RDB 导致 oom gitlab 崩溃"></a>redis 开启RDB 导致 oom gitlab 崩溃</h2><p>公司使用了云存储 nas，磁盘性能不好，导致 gitlab 出现问题。</p><p>gitlab 自带的 redis 配置默认开启 RDB 持久化，如果磁盘性能较差，可能导致 oom 崩溃问题。</p><ul><li>Redis 在进行 RDB 持久化时，会创建一个子进程（通过 fork），父进程继续提供服务，子进程负责写入 RDB 文件。</li><li>如果内存使用过高，fork 操作会耗费大量内存资源，因为操作系统需要复制父进程的页表。</li><li>在生成 RDB 文件期间，如果 Redis 正在进行大量写操作，内存页面会频繁被修改，导致操作系统必须复制这些页面，增加了内存和 CPU 的开销。</li><li>如果磁盘性能较差，RDB 文件的写入速度较慢，会让子进程占用更多时间，从而使父进程的 COW 操作被放大。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 默认配置</span><br>save 900 1<br>save 300 10<br>save 60 10000<br>appendonly no<br><br><span class="hljs-comment">## 修改配置</span><br>save <span class="hljs-string">&quot;&quot;</span><br>appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><blockquote><p>最好的方法当然是换性能好的磁盘</p><p>而且磁盘性能不行会出现各种奇怪的问题</p></blockquote><h2 id="迁移后-webhooks-访问-500"><a href="#迁移后-webhooks-访问-500" class="headerlink" title="迁移后 webhooks 访问 500"></a>迁移后 webhooks 访问 500</h2><p>旧版本 webhook 与新版本不兼容导致</p><ol><li><p>找到项目 id</p></li><li><p>在数据库中查询webhook的 id： <code>select id from web_hooks where project_id=2016;</code></p></li><li><p>通过接口请求删除 webhooks</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --header <span class="hljs-string">&quot;Private-Token: 4Yn1dffiTDpy5c2xvN8X&quot;</span> -X DELETE http://gitlab.com/api/v4/projects/&lt;project_id&gt;/hooks/&lt;webhook_id&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Notes</title>
    <link href="/2024/11/29/docker-notes/"/>
    <url>/2024/11/29/docker-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-Notes"><a href="#Docker-Notes" class="headerlink" title="Docker Notes"></a>Docker Notes</h1><h2 id="docker-save-和-export-区别"><a href="#docker-save-和-export-区别" class="headerlink" title="docker save 和 export 区别"></a>docker save 和 export 区别</h2><ol><li>功能和用途</li></ol><ul><li><p>docker export</p><ul><li>导出一个容器的文件系统。</li><li>提取容器当前的文件系统快照，不包括镜像的历史层、元数据或启动命令等信息。</li><li>通常用于备份或迁移容器的文件系统内容。</li></ul></li><li><p>docker save</p><ul><li>保存一个镜像及其历史层和元数据。</li><li>包括镜像的所有历史层、CMD、ENTRYPOINT、环境变量等配置。</li><li>通常用于备份或迁移镜像（可以在目标环境中直接加载并运行）。</li></ul></li></ul><ol start="2"><li>导出的内容</li></ol><ul><li>docker export<ul><li>导出的内容是容器的文件系统，形式是一个纯文件层，没有镜像的结构信息。</li><li>不包括启动命令、环境变量等元数据。</li></ul></li><li>docker save<ul><li>导出的内容是镜像的完整结构，包括所有层和元数据。</li><li>可直接用于加载到其他 Docker 实例中。</li></ul></li></ul><ol start="3"><li>使用场景</li></ol><ul><li>docker export<ul><li>当您只需要容器文件系统中的文件，而不需要镜像信息时使用。</li><li>用于容器数据备份或在不需要 Docker 环境的情况下提取文件。</li></ul></li><li>docker save<ul><li>用于迁移完整镜像，包括历史记录、配置和多层结构。</li><li>常用于跨环境传输镜像，例如将镜像从开发环境迁移到生产环境。</li></ul></li></ul><ol start="4"><li>加载&#x2F;恢复方式</li></ol><ul><li><p>docker export</p><ul><li>使用 tar 工具解压提取内容，或者通过 docker import 恢复为一个新镜像，但只包含文件系统，没有元数据。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker import container.tar &lt;new_image_name&gt;<br></code></pre></td></tr></table></figure></li><li><p>docker save</p><ul><li>使用 docker load 加载为完整镜像，可以直接运行。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker load -i image.tar <br></code></pre></td></tr></table></figure></li></ul><h2 id="容器共享内存"><a href="#容器共享内存" class="headerlink" title="容器共享内存"></a>容器共享内存</h2><p>在 Docker 容器中，&#x2F;dev&#x2F;shm 是一个内存共享区域，通常用于高效的进程间通信（IPC）。Docker 默认会为每个容器分配一个大小固定的 &#x2F;dev&#x2F;shm 区域，默认大小为 64MB，这在某些应用场景（如高性能计算、数据库操作等）中可能不足。</p><ol><li><p>&#x2F;dev&#x2F;shm 的默认大小：</p><p> 默认大小为 64MB，但可以通过配置容器启动参数增加。</p></li><li><p>使用场景：</p><ul><li><p>数据库（如 PostgreSQL、Redis）：需要使用共享内存进行缓存。</p></li><li><p>图像处理（如 OpenCV）：某些库需要依赖共享内存。</p></li><li><p>浏览器自动化（如 Selenium）：浏览器运行依赖共享内存。</p></li></ul></li><li><p>查看容器内 &#x2F;dev&#x2F;shm 大小：df -h &#x2F;dev&#x2F;shm</p></li></ol><h3 id="调整共享内存"><a href="#调整共享内存" class="headerlink" title="调整共享内存"></a>调整共享内存</h3><ol><li><p>在 docker run 中指定</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --shm-size=1g your_image<br></code></pre></td></tr></table></figure></li><li><p>在 docker-compose 中配置</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">your_service:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">your_image</span><br>    <span class="hljs-attr">shm_size:</span> <span class="hljs-string">1g</span><br></code></pre></td></tr></table></figure></li><li><p>在 Kubernetes 中配置</p><p> 在 Pod 的 spec 中，使用 emptyDir 配置共享内存。例如：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">example-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">example-app</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">example-app</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">example-container</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">your-image:latest</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/dev/shm</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dshm</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dshm</span><br>        <span class="hljs-attr">emptyDir:</span><br>          <span class="hljs-attr">medium:</span> <span class="hljs-string">Memory</span><br>          <span class="hljs-attr">sizeLimit:</span> <span class="hljs-string">1Gi</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="检查共享内存使用情况"><a href="#检查共享内存使用情况" class="headerlink" title="检查共享内存使用情况"></a>检查共享内存使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipcs -m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s rbac &amp; Jenkins container</title>
    <link href="/2024/11/22/k8s-rbac-jenkins-container/"/>
    <url>/2024/11/22/k8s-rbac-jenkins-container/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubenetes-rbac-Jenkins-container"><a href="#Kubenetes-rbac-Jenkins-container" class="headerlink" title="Kubenetes rbac &amp; Jenkins container"></a>Kubenetes rbac &amp; Jenkins container</h1><h2 id="k8s-rbac-configure"><a href="#k8s-rbac-configure" class="headerlink" title="k8s rbac configure"></a>k8s rbac configure</h2><ul><li>apiversion: rbac.authorization.k8s.io&#x2F;v1</li><li>kind<ul><li>ClusterRoleBinding</li><li>ServiceAccount</li><li>ClusterRole</li></ul></li><li>token<ul><li>容器内：&#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token</li></ul></li><li>部署pod spec中添加serviceAccountName: name</li></ul><h2 id="Jenkins-configure-docker-runtime"><a href="#Jenkins-configure-docker-runtime" class="headerlink" title="Jenkins configure docker runtime"></a>Jenkins configure docker runtime</h2><ul><li>将宿主机的docker.sock挂载到容器内<ul><li>路径：&#x2F;var&#x2F;run&#x2F;docker.sock</li></ul></li><li>确保容器内有docker命令</li></ul><h2 id="Jenkins-自动化部署完整流程"><a href="#Jenkins-自动化部署完整流程" class="headerlink" title="Jenkins 自动化部署完整流程"></a>Jenkins 自动化部署完整流程</h2><p>如需操作k8s集群，需要kubectl命令</p><p>自动化流程：</p><ul><li>配置jenkins流水线 - webhook 触发 push event</li><li>git 拉取代码</li><li>docker build 构建镜像</li><li>docker push 推送镜像</li><li>k8s 部署应用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># token 是由rbac配置获取</span><br><span class="hljs-comment"># Jenkins 中可通过构建环境中的 use secret text or file功能将token进行隐藏</span><br>kubectl --server https://xxx --insecure-skip-tls-verify=<span class="hljs-literal">true</span> --token xxx -n <span class="hljs-variable">$namespace</span> <span class="hljs-built_in">set</span> image deploy/<span class="hljs-variable">$deploy_name</span> <span class="hljs-variable">$container_name</span>=<span class="hljs-variable">$image_name</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins GitLab Webhook</title>
    <link href="/2024/11/21/Jekins-GitLab-Webhook/"/>
    <url>/2024/11/21/Jekins-GitLab-Webhook/</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins-GitLab-configure-webhook"><a href="#Jenkins-GitLab-configure-webhook" class="headerlink" title="Jenkins &amp; GitLab configure webhook"></a>Jenkins &amp; GitLab configure webhook</h1><p>GitLab version: community edition 10.4.2</p><p>Jenkins version: 2.426.3</p><h2 id="Install-GitLab-plugins"><a href="#Install-GitLab-plugins" class="headerlink" title="Install GitLab plugins"></a>Install GitLab plugins</h2><p>旧版本需要插件gitlab和gitlab-hook，但是gitlab-hook插件由于安全问题已经废弃。</p><p>具体见 <a href="https://www.jenkins.io/blog/2021/12/22/deprecated-ruby-runtime/">https://www.jenkins.io/blog/2021/12/22/deprecated-ruby-runtime/</a></p><p>所以只需要下载Gitlab插件及其相关依赖插件即可。</p><p>Gitlab Plugin 这个插件允许GitLab在提交代码或打开&#x2F;更新合并请求时触发Jenkins中的构建。它还可以将构建状态发送回GitLab。</p><p><img src="/../images/jenkins-webhook/install_plugins.png" alt="安装插件"></p><h2 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h2><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><blockquote><p>各版本界面可能不同</p></blockquote><ul><li>创建GitLab凭证</li><li>配置Git拉取代码用到的密钥凭证</li><li>生成Jenkins Token</li></ul><p><img src="/../images/jenkins-webhook/gitlab_credentials.png" alt="创建GitLab凭证"></p><p>此处APIToken在GitLab生成，仅生成时可看到，务必保管好。</p><p>构建触发器选择 “Build when a change is pushed to GitLab” （记住后面的GitLab webhook URL 后面要填在gitlab的webhooks中），按照下面勾选</p><p><img src="/../images/jenkins-webhook/jenkins_webhook.png" alt="配置Jenkins Webhook"></p><p>点 “Generate” 生成 token，这个 token 用于填写到 gitlab 的 webhook 里，gitlab 检测到代码提交，会通知 webhook 里填写的 Jenkins 生成的回调URL。</p><p>注: 复制出 URL 和 token，后面配置 gitlab 的 webhook 会用到</p><p><img src="/../images/jenkins-webhook/gen_token.png" alt="生成token"></p><h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p>根据版本不同，webhook功能在不同位置。 </p><p>当前使用这个版本在项目侧边栏：<code>Settings -&gt; Integrations</code>中。</p><p>填写 URL和 Secret Token即可，保存后测试是否可以触发。</p><p><img src="/../images/jenkins-webhook/gitlab_webhook.png" alt="配置gitlab webhook"></p><p><img src="/../images/jenkins-webhook/get_gitlab_token.png" alt="获取gitlab token"></p><blockquote><p>Secret Token 来自Jenkins中。</p><p>测试默认触发master分支，实际根据自己推送的分支进行触发。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastAPI Notes</title>
    <link href="/2024/11/20/fastapi-notes/"/>
    <url>/2024/11/20/fastapi-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="FastAPI-Notes"><a href="#FastAPI-Notes" class="headerlink" title="FastAPI Notes"></a>FastAPI Notes</h1><blockquote><p>FastAPI 具有python的一些新特性，比如类型提示，异步支持，以及自动生成文档。</p></blockquote><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>fastapi<ul><li>FastAPI</li><li>Path</li><li>Query</li><li>Body</li><li>Cookie</li></ul></li><li>pydantic<ul><li>BaseModel</li></ul></li><li>typing<ul><li>Annotated</li><li>Union</li><li>Optional</li><li>List</li><li>Set</li></ul></li><li>starlette<ul><li>RedirectResponse</li></ul></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">project_name/<br>├── app/<br>│   ├── __init__.py<br>│   ├── main.py          <span class="hljs-comment"># 应用入口文件，包含 FastAPI 实例和路由加载</span><br>│   ├── config.py        <span class="hljs-comment"># 配置文件（如数据库连接、环境变量等）</span><br>│   ├── routers/         <span class="hljs-comment"># 路由模块</span><br>│   │   ├── __init__.py<br>│   │   ├── users.py     <span class="hljs-comment"># 用户相关路由</span><br>│   │   ├── items.py     <span class="hljs-comment"># 物品相关路由</span><br>│   ├── models/          <span class="hljs-comment"># 数据模型</span><br>│   │   ├── __init__.py<br>│   │   ├── user.py      <span class="hljs-comment"># 用户表模型</span><br>│   │   ├── item.py      <span class="hljs-comment"># 物品表模型</span><br>│   ├── schemas/         <span class="hljs-comment"># Pydantic 模式，用于数据验证</span><br>│   │   ├── __init__.py<br>│   │   ├── user.py      <span class="hljs-comment"># 用户数据模式</span><br>│   │   ├── item.py      <span class="hljs-comment"># 物品数据模式</span><br>│   ├── crud/            <span class="hljs-comment"># 数据库操作封装</span><br>│   │   ├── __init__.py<br>│   │   ├── user.py      <span class="hljs-comment"># 用户相关数据库操作</span><br>│   │   ├── item.py      <span class="hljs-comment"># 物品相关数据库操作</span><br>│   ├── db.py            <span class="hljs-comment"># 数据库连接和会话管理</span><br>│   ├── dependencies.py  <span class="hljs-comment"># 依赖项（如权限验证）</span><br>│   ├── utils.py         <span class="hljs-comment"># 通用工具函数</span><br>│<br>├── tests/               <span class="hljs-comment"># 测试文件夹</span><br>│   ├── __init__.py<br>│   ├── test_users.py    <span class="hljs-comment"># 用户相关测试</span><br>│   ├── test_items.py    <span class="hljs-comment"># 物品相关测试</span><br>│<br>├── .<span class="hljs-built_in">env</span>                 <span class="hljs-comment"># 环境变量配置</span><br>├── requirements.txt     <span class="hljs-comment"># Python 依赖包列表</span><br>├── Dockerfile           <span class="hljs-comment"># Docker 镜像配置（可选）</span><br>├── README.md            <span class="hljs-comment"># 项目说明文件</span><br></code></pre></td></tr></table></figure><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h2><p>uvicorn main:app 命令含义如下:</p><p>main：main.py 文件（一个 Python「模块」）。<br>app：在 main.py 文件中通过 app &#x3D; FastAPI() 创建的对象。<br>–reload：让服务器在更新代码后重新启动。仅在开发时使用该选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uvicorn main:app --reload<br></code></pre></td></tr></table></figure><h2 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h2><ul><li><a href="http://127.0.0.1:8000/docs">http://127.0.0.1:8000/docs</a></li><li><a href="http://127.0.0.1:8000/redoc">http://127.0.0.1:8000/redoc</a></li></ul><h3 id="查看文档显示空白问题"><a href="#查看文档显示空白问题" class="headerlink" title="查看文档显示空白问题"></a>查看文档显示空白问题</h3><p>因为fastapi的openapi包里的docs.py文件接口文档默认使用</p><p><a href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css">https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css</a></p><p><a href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js">https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js</a></p><p>国外地址访问较慢，如果是纯内网环境也是如此。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 替换fastapi下openapi包内的docs.py文件的js和css参数的值</span><br><span class="hljs-comment"># 将url替换为本地js和css文件</span><br><span class="hljs-comment"># Lib/site-packages/fastapi/openapi/docs.py</span><br><span class="hljs-comment"># 修改其中get_swagger_ui_html 函数</span><br><span class="hljs-comment"># redoc则修改get_redoc_html函数</span><br>swagger_js_url: <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;/static/swagger-ui/swagger-ui-bundle.js&quot;</span>,<br>swagger_css_url: <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;/static/swagger-ui/swagger-ui.css&quot;</span>,<br>swagger_favicon_url: <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;/static/swagger-ui/favicon.png&quot;</span>,<br><br>redoc_js_url: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;/static/redoc/bundles/redoc.standalone.js&quot;</span>,<br>redoc_favicon_url: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;/static/redoc/favicon.png&quot;</span><br><br><span class="hljs-comment"># 修改完，然后挂载， directory 填本地路径</span><br>app.mount(<span class="hljs-string">&#x27;/static&#x27;</span>, StaticFiles(directory=<span class="hljs-string">&#x27;static&#x27;</span>),<br>          name=<span class="hljs-string">&#x27;static&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="FastAPI-参数"><a href="#FastAPI-参数" class="headerlink" title="FastAPI 参数"></a>FastAPI 参数</h2><blockquote><p>FastAPI 是直接从 Starlette 继承的类。</p><p>你可以通过 FastAPI 使用所有的 Starlette 的功能。</p></blockquote><ul><li><p><strong>路径</strong></p><p>这里的「路径」指的是 URL 中从第一个 &#x2F; 起的后半部分。</p><p>所以，在一个这样的 URL 中：</p><p><code>https://example.com/items/foo</code></p><p>…路径会是：</p><p>&#x2F;items&#x2F;foo</p></li><li><p><strong>操作</strong></p><p>在开发 API 时，通常使用特定的 HTTP 方法去执行特定的行为。</p><p>通常使用：</p><p>POST：创建数据。</p><p>GET：读取数据。</p><p>PUT：更新数据。</p><p>DELETE：删除数据。</p></li></ul><p><strong>路径操作</strong>是按顺序依次运行的</p><p>下面例子先运行<code>/users/me</code>，如果位置互换，会先运行<code>/users/&#123;user_id&#125;</code>，导致<code>/users/me</code>失效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/users/me&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_user_me</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;user_id&quot;</span>: <span class="hljs-string">&quot;the current user&quot;</span>&#125;<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_user</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;user_id&quot;</span>: user_id&#125;<br></code></pre></td></tr></table></figure><p><strong>包含路径的路径参数</strong></p><p>假设<strong>路径操作</strong>的路径为 <code>/files/&#123;file_path&#125;</code>。</p><p>但需要 file_path 中也包含<strong>路径</strong>，比如，<code>home/johndoe/myfile.txt</code>。</p><p>此时，该文件的 URL 是这样的：<code>/files/home/johndoe/myfile.txt</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/files/&#123;file_path:path&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>(<span class="hljs-params">file_path: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;file_path&quot;</span>: file_path&#125;<br></code></pre></td></tr></table></figure><p><strong>查询参数</strong></p><p>声明的参数不是路径参数时，路径操作函数会把该参数自动解释为<strong>查询</strong>参数。</p><p>查询字符串是键值对的集合，这些键值对位于 URL 的 ? 之后，以 &amp; 分隔。</p><p>例如，以下 URL 中：<br><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br>fake_items_db = [&#123;<span class="hljs-string">&quot;item_name&quot;</span>: <span class="hljs-string">&quot;Foo&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;item_name&quot;</span>: <span class="hljs-string">&quot;Bar&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;item_name&quot;</span>: <span class="hljs-string">&quot;Baz&quot;</span>&#125;]<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_item</span>(<span class="hljs-params">skip: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>, limit: <span class="hljs-built_in">int</span> = <span class="hljs-number">10</span></span>):<br>    <span class="hljs-keyword">return</span> fake_items_db[skip : skip + limit]<br></code></pre></td></tr></table></figure><p><strong>可选参数</strong></p><p>把默认值设为 None 即可声明<strong>可选的</strong>查询参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-comment">## str | None 表示 q 可以是一个字符串类型的值，也可以是 None</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">str</span>, q: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> q:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id, <span class="hljs-string">&quot;q&quot;</span>: q&#125;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id&#125;<br></code></pre></td></tr></table></figure><blockquote><p>FastAPI 可以识别出 item_id 是路径参数，q 不是路径参数，而是查询参数。</p><p>如果要把查询参数设置为<strong>必选</strong>，就不要声明默认值.</p><p>如果只想把参数设为<strong>可选</strong>，但又不想指定参数的值，则要把默认值设为 None</p></blockquote><p><strong>请求体</strong></p><p><strong>路径</strong>中声明了相同参数的参数，是路径参数<br>类型是（int、float、str、bool 等）<strong>单类型</strong>的参数，是<strong>查询</strong>参数<br>类型是 Pydantic 模型的参数，是请求体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br><span class="hljs-comment">## 导入 Pydantic 的 BaseModel</span><br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br><span class="hljs-comment"># 创建数据模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name: <span class="hljs-built_in">str</span><br>    description: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    price: <span class="hljs-built_in">float</span><br>    tax: <span class="hljs-built_in">float</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.put(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-comment"># 声明请求体参数 item: Item</span><br><span class="hljs-comment"># 路径参数 + 请求体 + 查询参数</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">int</span>, item: Item, q: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span></span>):<br>    result = &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id, **item.<span class="hljs-built_in">dict</span>()&#125;<br>    <span class="hljs-keyword">if</span> q:<br>        result.update(&#123;<span class="hljs-string">&quot;q&quot;</span>: q&#125;)<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><strong>查询参数和字符串校验</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Union</span><br><span class="hljs-comment"># 导入Query</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Query<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-comment"># 使用Query作为默认值</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-comment"># 添加最小长度、最大长度、正则表达式等校验</span></span><br><span class="hljs-params">    <span class="hljs-comment"># Optional[str] 等价于 Union[str, None]，但更具可读性</span></span><br><span class="hljs-params">    q: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-literal">None</span>] = Query(<span class="hljs-params">default=<span class="hljs-literal">None</span>, min_length=<span class="hljs-number">3</span>, max_length=<span class="hljs-number">50</span>, pattern=<span class="hljs-string">&quot;^fixedquery$&quot;</span></span>)</span><br><span class="hljs-params"></span>):<br>    results = &#123;<span class="hljs-string">&quot;items&quot;</span>: [&#123;<span class="hljs-string">&quot;item_id&quot;</span>: <span class="hljs-string">&quot;Foo&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;item_id&quot;</span>: <span class="hljs-string">&quot;Bar&quot;</span>&#125;]&#125;<br>    <span class="hljs-keyword">if</span> q:<br>        results.update(&#123;<span class="hljs-string">&quot;q&quot;</span>: q&#125;)<br>    <span class="hljs-keyword">return</span> results<br></code></pre></td></tr></table></figure><blockquote><p>当你在使用 Query 且需要声明一个值是必需的时，只需不声明默认参数即可。</p><p>也可使用省略号<code>...</code>声明必须参数，如 <code>read_items(q: str = Query(default=..., min_length=3)):</code></p></blockquote><p><strong>使用None类型时声明必须参数</strong></p><p>声明一个参数可以接收<code>None</code>，但仍然是必需的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 声明 None是有效类型，使用 ...</span><br><span class="hljs-comment"># 或使用Pydantic中的Required代替省略号(...)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>(<span class="hljs-params">q: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-literal">None</span>] = Query(<span class="hljs-params">default=..., min_length=<span class="hljs-number">3</span></span>)</span>):<br></code></pre></td></tr></table></figure><blockquote><p>大多数情况下，当你需要某些东西时，可以简单地省略 default 参数，因此你通常不必使用 … 或 Required</p></blockquote><p><strong>查询参数列表 &#x2F; 多个值</strong></p><blockquote><p>要声明类型为 list 的查询参数，如上例所示，你需要显式地使用 Query，否则该参数将被解释为请求体。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Union</span><br><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Query<br><br>app = FastAPI()<br><br><span class="hljs-comment">## http://localhost:8000/items/?q=foo&amp;q=bar</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-comment"># List[str] 会检查列表内容必须为字符串</span><br><span class="hljs-comment"># 使用list则不会检查</span><br><span class="hljs-comment"># async def read_items(q: list = Query(default=[])):</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>(<span class="hljs-params">q: <span class="hljs-type">Union</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], <span class="hljs-literal">None</span>] = Query(<span class="hljs-params">default=<span class="hljs-literal">None</span></span>)</span>):<br><span class="hljs-comment"># 有多个值的默认值 </span><br><span class="hljs-comment"># async def read_items(q: List[str] = Query(default=[&quot;foo&quot;, &quot;bar&quot;])):</span><br>    query_items = &#123;<span class="hljs-string">&quot;q&quot;</span>: q&#125;<br>    <span class="hljs-keyword">return</span> query_items<br></code></pre></td></tr></table></figure><p><strong>声明更多元数据</strong></p><p>你可以添加更多有关该参数的信息。</p><p>这些信息将包含在生成的 OpenAPI 模式中，并由文档用户界面和外部工具所使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Union</span><br><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Query<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>(<span class="hljs-params"></span><br><span class="hljs-params">    q: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-literal">None</span>] = Query(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-params">        default=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-params">        title=<span class="hljs-string">&quot;Query string&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-params">        description=<span class="hljs-string">&quot;Query string for the items to search in the database that have a good match&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-params">        min_length=<span class="hljs-number">3</span>,</span></span><br><span class="hljs-params"><span class="hljs-params">    </span>),</span><br><span class="hljs-params"></span>):<br>    results = &#123;<span class="hljs-string">&quot;items&quot;</span>: [&#123;<span class="hljs-string">&quot;item_id&quot;</span>: <span class="hljs-string">&quot;Foo&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;item_id&quot;</span>: <span class="hljs-string">&quot;Bar&quot;</span>&#125;]&#125;<br>    <span class="hljs-keyword">if</span> q:<br>        results.update(&#123;<span class="hljs-string">&quot;q&quot;</span>: q&#125;)<br>    <span class="hljs-keyword">return</span> results<br></code></pre></td></tr></table></figure><p><strong>路径参数和数值校验</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Path, Query<br><br>app = FastAPI()<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>(<span class="hljs-params"></span><br><span class="hljs-params">    *,</span><br><span class="hljs-params">    item_id: Annotated[<span class="hljs-built_in">int</span>, Path(<span class="hljs-params">title=<span class="hljs-string">&quot;The ID of the item to get&quot;</span>, ge=<span class="hljs-number">0</span>, le=<span class="hljs-number">1000</span></span>)],</span><br><span class="hljs-params">    q: Annotated[<span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span>, Query(<span class="hljs-params">alias=<span class="hljs-string">&quot;item-query&quot;</span></span>)] = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    size: <span class="hljs-built_in">float</span> = Query(<span class="hljs-params">gt=<span class="hljs-number">0</span>, lt=<span class="hljs-number">10.5</span></span>),</span><br><span class="hljs-params">    </span><br><span class="hljs-params"></span>):<br>    results = &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id&#125;<br>    <span class="hljs-keyword">if</span> q:<br>        results.update(&#123;<span class="hljs-string">&quot;q&quot;</span>: q&#125;)<br>    <span class="hljs-keyword">if</span> size:<br>        results.update(&#123;<span class="hljs-string">&quot;size&quot;</span>: size&#125;)<br>    <span class="hljs-keyword">return</span> results<br></code></pre></td></tr></table></figure><p><strong>请求体内声明校验和元数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Annotated, <span class="hljs-type">List</span><br><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> Body, FastAPI<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel, Field, HttpUrl<br><br>app = FastAPI()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Image</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>  <span class="hljs-comment"># 将被检查是否为有效的 URL</span><br>    url: HttpUrl<br>    name: <span class="hljs-built_in">str</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name: <span class="hljs-built_in">str</span><br>    description: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = Field(<br>        default=<span class="hljs-literal">None</span>, title=<span class="hljs-string">&quot;The description of the item&quot;</span>, max_length=<span class="hljs-number">300</span><br>    )<br>    price: <span class="hljs-built_in">float</span> = Field(gt=<span class="hljs-number">0</span>, description=<span class="hljs-string">&quot;The price must be greater than zero&quot;</span>)<br>    tax: <span class="hljs-built_in">float</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br>    tags: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] = []<br>    Image: Image | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span>  <br>    <span class="hljs-comment"># images: list[Image] | None = None</span><br>    <span class="hljs-comment"># tags: set[str] = set()</span><br><br><span class="hljs-meta">@app.put(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">int</span>, item: Annotated[Item, Body(<span class="hljs-params">embed=<span class="hljs-literal">True</span></span>)]</span>):<br>    results = &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id, <span class="hljs-string">&quot;item&quot;</span>: item&#125;<br>    <span class="hljs-keyword">return</span> results<br><br></code></pre></td></tr></table></figure><h2 id="Cookie-Header"><a href="#Cookie-Header" class="headerlink" title="Cookie, Header"></a>Cookie, Header</h2><p>Header 比 Path、Query 和 Cookie 提供了更多功能</p><p>大部分标准请求头用<strong>连字符</strong>分隔，即<strong>减号</strong>（-）。</p><p>但是 user-agent 这样的变量在 Python 中是无效的。</p><p>因此，默认情况下，Header 把参数名中的字符由下划线（_）改为连字符（-）来提取并存档请求头 。</p><p>同时，HTTP 的请求头不区分大小写，可以使用 Python 标准样式（即 snake_case）进行声明</p><p>如需禁用下划线自动转换为连字符，可以把 Header 的 convert_underscores 参数设置为 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Annotated<br><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> Cookie, FastAPI, Header<br><br>app = FastAPI()<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>(<span class="hljs-params">ads_id: Annotated[<span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span>, Cookie(<span class="hljs-params"></span>)] = <span class="hljs-literal">None</span>, user_agent: Annotated[<span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span>, Header(<span class="hljs-params"></span>)] = <span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;ads_id&quot;</span>: ads_id, <span class="hljs-string">&quot;user_agent&quot;</span>: user_agent&#125;<br></code></pre></td></tr></table></figure><h2 id="响应模型"><a href="#响应模型" class="headerlink" title="响应模型"></a>响应模型</h2><ul><li>response_model<ul><li>定义响应模型，特别是确保私有数据被过滤掉</li></ul></li><li>response_model_exclude_unset<ul><li>响应中不会包含默认值，而是仅有实际设置的值，即仅返回显式设定的值</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle Notes</title>
    <link href="/2024/11/20/oracle-notes/"/>
    <url>/2024/11/20/oracle-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h1><h2 id="登录oracle"><a href="#登录oracle" class="headerlink" title="登录oracle"></a>登录oracle</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">su - oracle<br>sqlplus / as sysdba<br><br>sqlplus username/password@ip/instance_name<br></code></pre></td></tr></table></figure><h2 id="修改oracle密码策略"><a href="#修改oracle密码策略" class="headerlink" title="修改oracle密码策略"></a>修改oracle密码策略</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看所有的PDB<br><span class="hljs-keyword">show</span> pdbs;<br># 切换到指定PDB<br><span class="hljs-keyword">alter</span> session <span class="hljs-keyword">set</span> contaniner<span class="hljs-operator">=</span>PDB_NAME;<br># 再次查看pdb，可以看到已经切换到指定PDB<br><br># 修改密码策略<br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit FAILED_LOGIN_ATTEMPTS UNLIMITED;<br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit PASSWORD_LIFE_TIME UNLIMITED;<br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit PASSWORD_LOCK_TIME UNLIMITED;<br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit PASSWORD_REUSE_TIME UNLIMITED;<br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit PASSWORD_REUSE_MAX UNLIMITED;<br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit PASSWORD_VERIFY_FUNCTION <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">alter</span> profile <span class="hljs-keyword">default</span> limit PASSWORD_GRACE_TIME UNLIMITED;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python Notes</title>
    <link href="/2024/11/20/python-notes/"/>
    <url>/2024/11/20/python-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-Notes"><a href="#Python-Notes" class="headerlink" title="Python Notes"></a>Python Notes</h1><h2 id="isinstance函数"><a href="#isinstance函数" class="headerlink" title="isinstance函数"></a>isinstance函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断类型</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(url, <span class="hljs-built_in">str</span>):<br>  <span class="hljs-comment"># 字符串转列表会把字符串打散成字母列表存放</span><br>  <span class="hljs-comment"># 可以如下方法转成列表存放</span><br>  url = [url]<br>  <span class="hljs-comment"># 如果不传递任何分隔符给split()方法，且字符串中没有空格（默认分隔符）或其他空白字符</span><br>  <span class="hljs-comment"># 字符串将不会被拆分，而是作为一个整体放入列表中。</span><br>  url = url.split()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(urls, <span class="hljs-built_in">list</span>):<br>  <span class="hljs-comment"># append是在列表末尾添加元素，会变成列表嵌套</span><br>  <span class="hljs-comment"># extend 在列表末尾添加元素，会将列表合并成一个列表</span><br>  res.extend(urls)<br><br><span class="hljs-comment"># 判断对象是否是某个类或子类的实例</span><br><span class="hljs-comment"># 假设 error是一个异常对象 requests.exceptions.MissingSchema</span><br><span class="hljs-built_in">isinstance</span>(error, requests.exceptions.MissingSchema)<br><span class="hljs-comment"># 这里Exception也可以判断，Exception是所有异常类的基类</span><br><span class="hljs-built_in">isinstance</span>(error, Exception)<br></code></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>python中字典跟json很相似，但是字典类型是字典，json是字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;nobody&quot;</span>&#125; <span class="hljs-comment"># 此时是字典类型</span><br>data = json.dumps(data) <span class="hljs-comment"># 转换后，data就是字符串类型</span><br></code></pre></td></tr></table></figure><h2 id="None-和-‘’"><a href="#None-和-‘’" class="headerlink" title="None 和 ‘’"></a>None 和 ‘’</h2><p>None并不完全等于’’<br>None 表示空值或缺失值，而 ‘’ 表示空字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空字符串是False</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-string">&#x27;&#x27;</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空字符串&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Flask记录日志"><a href="#Flask记录日志" class="headerlink" title="Flask记录日志"></a>Flask记录日志</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br>app.logger.setLevel(logging.DEBUG)<br><span class="hljs-comment"># StreamHandler，它会将日志输出到控制台。可以通过addHandler方法将这个处理程序添加到 Flask 应用的日志记录器中。</span><br>console_handler = logging.StreamHandler()<br>app.logger.addHandler(console_handler)<br><br><span class="hljs-comment"># 将日志记录到文件中，可以使用FileHandler</span><br>file_handler = logging.FileHandler(<span class="hljs-string">&#x27;app.log&#x27;</span>)<br><span class="hljs-comment"># INFO级别及以上的日志会被记录到文件中</span><br>file_handler.setLevel(logging.INFO)<br>app.logger.addHandler(file_handler)<br><br><span class="hljs-comment"># RotatingFileHandler会将日志记录到app.log文件中，当文件大小达到1MB（maxBytes=1024*1024）时，会自动轮转日志文件，最多保留3个备份文件（backupCount=3），并且会记录DEBUG级别及以上的日志。</span><br><span class="hljs-keyword">from</span> logging.handlers <span class="hljs-keyword">import</span> RotatingFileHandler<br>rotating_handler = RotatingFileHandler(<span class="hljs-string">&#x27;app.log&#x27;</span>, maxBytes=<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>, backupCount=<span class="hljs-number">3</span>)<br><span class="hljs-comment"># 可以给每个handler单独设置日志等级</span><br>rotating_handler.setLevel(logging.DEBUG)<br>app.logger.addHandler(rotating_handler)<br><br>formatter = Formatter(<span class="hljs-string">&quot; %(asctime)s threadId-%(thread)d %(levelname)s %(module)s %(funcName)s %(message)s&quot;</span>)<br>rotating_handler.setFormatter(formatter)<br><br><span class="hljs-comment"># 配置TimedRotatingFileHandler保留策略</span><br>time_handler = TimedRotatingFileHandler(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;LogPath&#125;</span>/main.log&#x27;</span>,<br>                                            when=<span class="hljs-string">&quot;midnight&quot;</span>,<br>                                            interval=<span class="hljs-number">1</span>,<br>                                            backupCount=<span class="hljs-number">20</span>,<br>                                            encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>time_handler.setFormatter(formatter)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    app.logger.debug(<span class="hljs-string">&quot;这是一条调试信息&quot;</span>)<br>    app.logger.info(<span class="hljs-string">&quot;这是一条普通信息&quot;</span>)<br>    app.logger.warning(<span class="hljs-string">&quot;这是一条警告信息&quot;</span>)<br>    app.logger.error(<span class="hljs-string">&quot;这是一条错误信息&quot;</span>)<br>    app.logger.critical(<span class="hljs-string">&quot;这是一条严重错误信息&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;日志记录示例&quot;</span><br></code></pre></td></tr></table></figure><h2 id="读取sql文件内容，并用pymysql执行"><a href="#读取sql文件内容，并用pymysql执行" class="headerlink" title="读取sql文件内容，并用pymysql执行"></a>读取sql文件内容，并用pymysql执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 假设读取了一段 sql</span><br>sql_text: <span class="hljs-built_in">str</span> = sql_text<br><span class="hljs-comment"># 对 sql内容进行处理，变为 pymysql可以执行的形式</span><br>sqls: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>] = sql.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).split(<span class="hljs-string">&#x27;;&#x27;</span>)<br><span class="hljs-comment"># 连接数据库</span><br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;password&#x27;</span>, database=<span class="hljs-string">&#x27;mydatabase&#x27;</span>)<br>cursor = conn.cursor()<br><span class="hljs-keyword">for</span> sql <span class="hljs-keyword">in</span> sqls:<br>  cursor.execute(sql)<br>conn.commit()<br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure><h2 id="eval构造代码执行"><a href="#eval构造代码执行" class="headerlink" title="eval构造代码执行"></a>eval构造代码执行</h2><blockquote><p>需要防止注入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DB_Info 对象</span><br>sql_str= <span class="hljs-string">f&quot;DB_Info.query.filter_by(**keys)&quot;</span><br><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> keys_list:<br>  sql_str += <span class="hljs-string">f&quot;.filter(DB_Info.<span class="hljs-subst">&#123;v&#125;</span>.in_(data[&#x27;<span class="hljs-subst">&#123;v&#125;</span>&#x27;]))&quot;</span><br><br>payload = <span class="hljs-string">f&quot;eval(<span class="hljs-subst">&#123;sql_str&#125;</span>)&quot;</span><br>db_info = <span class="hljs-built_in">eval</span>(sql_str)<br></code></pre></td></tr></table></figure><h2 id="sqlalchemy-or"><a href="#sqlalchemy-or" class="headerlink" title="sqlalchemy or_"></a>sqlalchemy or_</h2><p>在 SQLAlchemy 中，or_ 函数用于创建 OR 条件。它允许你在查询中使用多个条件，其中任何一个条件满足都会返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> or_<br><br>Obj.query.<span class="hljs-built_in">filter</span>(or_<br>                 (<br>                 or_(Obj.name == <span class="hljs-string">&#x27;name&#x27;</span>, Obj.name == <span class="hljs-literal">None</span>),<br>                 or_(Obj.age == <span class="hljs-number">18</span>, Obj.age == <span class="hljs-number">19</span>)<br>                 )<br>                 ).<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><h2 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask_sqlalchemy"></a>flask_sqlalchemy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># filter_by 可以接受 mapping 类型的参数</span><br>Obj.query.filter_by(name=<span class="hljs-string">&#x27;name&#x27;</span>, age=<span class="hljs-number">18</span>).<span class="hljs-built_in">all</span>()<br><span class="hljs-comment"># data 为字典类型</span><br>Obj.query.filter_by(**data).<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Union</span><br><br><span class="hljs-comment">## 表示 list里的值包含 str和 int两种类型</span><br>test: <span class="hljs-built_in">list</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]] = []<br></code></pre></td></tr></table></figure><h2 id="Flask-content-type"><a href="#Flask-content-type" class="headerlink" title="Flask content-type"></a>Flask content-type</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以用来判断请求的 content-type</span><br>request.headers.get(<span class="hljs-string">&#x27;Content-Type&#x27;</span>) == <span class="hljs-string">&quot;application/json&quot;</span>  <br>request.content_type == <span class="hljs-string">&quot;application/json&quot;</span><br></code></pre></td></tr></table></figure><h2 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="functools.wraps"></a>functools.wraps</h2><p>在 Flask（以及其他类似的 Web 框架）中，视图函数的名称（通常是函数的__name__属性）被用来作为端点（endpoint）的默认标识符。在没有@wraps的情况下，包装函数的名称（如wrapper）可能会覆盖其他视图函数的端点，导致AssertionError: view function mapping is overwriting an existing endpoint function错误。</p><p>当使用@wraps装饰包装函数（wrapper）时，它会保留被装饰函数（原始视图函数）的重要元数据，其中包括函数名（__name__属性）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log_decorator</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Calling <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        result = func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Finished <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><h2 id="使用-loguru"><a href="#使用-loguru" class="headerlink" title="使用 loguru"></a>使用 loguru</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><br>logger.debug(<span class="hljs-string">&quot;这是一条调试信息&quot;</span>)<br>logger.info(<span class="hljs-string">&quot;这是一条普通信息&quot;</span>)<br>logger.warning(<span class="hljs-string">&quot;这是一条警告信息&quot;</span>)<br>logger.error(<span class="hljs-string">&quot;这是一条错误信息&quot;</span>)<br><br>logger.add(<span class="hljs-string">&quot;app.log&quot;</span>)<br>logger.info(<span class="hljs-string">&quot;这条信息会同时输出到控制台和app.log文件中&quot;</span>)<br><br>log_format=<span class="hljs-string">&quot;&#123;time: YYYY-MM-DD HH:mm:ss&#125; | &#123;level&#125; | &#123;name&#125;:&#123;function&#125;:&#123;line&#125;: &#123;message&#125;&quot;</span><br>logger.add(<span class="hljs-string">&quot;app.log&quot;</span>, <span class="hljs-built_in">format</span>=log_format, level=<span class="hljs-string">&quot;INFO&quot;</span>, rotation=<span class="hljs-string">&quot;1 day&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br>logger.debug(<span class="hljs-string">&quot;这条调试信息不会被记录到文件中，因为级别设置为INFO&quot;</span>)<br>logger.info(<span class="hljs-string">&quot;这条信息会按照指定格式记录到文件中&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">循环，rotation，达到指定大小后建新日志。</span><br><span class="hljs-string">保留，retention，定期清理。</span><br><span class="hljs-string">压缩，compression，压缩节省空间。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>logger.add(<span class="hljs-string">&quot;file_1.log&quot;</span>, rotation=<span class="hljs-string">&quot;500 MB&quot;</span>)  <span class="hljs-comment"># 自动循环过大的文件</span><br>logger.add(<span class="hljs-string">&quot;file_2.log&quot;</span>, rotation=<span class="hljs-string">&quot;12:00&quot;</span>)  <span class="hljs-comment"># 每天中午创建新文件</span><br>logger.add(<span class="hljs-string">&quot;file_3.log&quot;</span>, rotation=<span class="hljs-string">&quot;1 week&quot;</span>)  <span class="hljs-comment"># 一旦文件太旧进行循环</span><br><br>logger.add(<span class="hljs-string">&quot;file_X.log&quot;</span>, retention=<span class="hljs-string">&quot;10 days&quot;</span>)  <span class="hljs-comment"># 定期清理</span><br><br>logger.add(<span class="hljs-string">&quot;file_Y.log&quot;</span>, compression=<span class="hljs-string">&quot;zip&quot;</span>)  <span class="hljs-comment"># 压缩节省空间</span><br><br></code></pre></td></tr></table></figure><h2 id="set-操作"><a href="#set-操作" class="headerlink" title="set 操作"></a>set 操作</h2><p>集合是无序的，每次输出结果顺序不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>list2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>set1 = <span class="hljs-built_in">set</span>(list1)<br>set2 = <span class="hljs-built_in">set</span>(list2)<br><br><span class="hljs-comment"># - or difference : 求两集合差值</span><br>set1.difference(set2)<br><br><span class="hljs-comment"># &amp; or intersection 计算集合重复元素 </span><br><span class="hljs-keyword">if</span> set1 &amp; set2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;两个列表有重复元素&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;两个列表没有重复元素&quot;</span>)<br><br><span class="hljs-comment"># issubset 判断是否是子集</span><br>set1.issubset(set2)<br></code></pre></td></tr></table></figure><h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><p>生成器的本质：生成器是一个惰性求值的对象，它只在迭代时生成值。创建生成器时，Python 不会立即检查它是否有值可供生成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">items = (item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br><br><span class="hljs-comment">## 获取生成器值</span><br><span class="hljs-comment">## 1. 通过for 循环获取</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment">## 2. 通过next()函数获取</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(items))<br><span class="hljs-comment">## 但是当生成器值消耗殆尽时会引发StopIteration异常</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(items))<br><span class="hljs-keyword">except</span> StopIteration:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器值已耗尽&quot;</span>)<br><br><span class="hljs-comment">## 3. 通过list()函数获取</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(items))<br><br><span class="hljs-comment">## 生成器本身始终被认为是“有值”的（即使它还没有产生任何实际值），所以直接使用 if not items 来检查生成器是否为空是不会生效的</span><br><br><span class="hljs-comment">## 使用 next() 取值，如果生成器为空，会引发 StopIteration 异常</span><br>items = (item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> [])<br><span class="hljs-keyword">try</span>:<br>    item = <span class="hljs-built_in">next</span>(items)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器不为空:&quot;</span>, item)<br><span class="hljs-keyword">except</span> StopIteration:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器为空&quot;</span>)<br><br><span class="hljs-comment">## 转为列表检查</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>(items):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器不为空&quot;</span>)<br><br><span class="hljs-comment">## 使用 any() 检查</span><br><span class="hljs-comment">## 如果只想判断生成器是否能生成至少一个值，可以使用 any()</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(items):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;生成器不为空&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>一旦生成器的值被消费（通过 for 循环、next() 或 list()），它将变为空，不能再次使用。</p><p>使用 any() 或将生成器转为列表后，生成器的内容会被消费，之后不能再次使用这些值。</p></blockquote><h2 id="requests-上传文件"><a href="#requests-上传文件" class="headerlink" title="requests 上传文件"></a>requests 上传文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 定义上传的目标 URL</span><br>url = <span class="hljs-string">&quot;https://example.com/upload&quot;</span><br><br><span class="hljs-comment"># 打开文件并将其包含在文件字典中</span><br>file_path = <span class="hljs-string">&quot;path/to/your/file.txt&quot;</span><br>files = &#123;<br>    <span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>)  <span class="hljs-comment"># &#x27;file&#x27; 是服务器设定的接收字段名</span><br>&#125;<br><br><span class="hljs-comment"># 其他表单字段（如果有）</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-string">&#x27;value1&#x27;</span>,<br>    <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-string">&#x27;value2&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># 发送 POST 请求</span><br>response = requests.post(url, files=files, data=data)<br><br><span class="hljs-comment"># 打印响应</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上传成功:&quot;</span>, response.text)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上传失败:&quot;</span>, response.status_code, response.text)<br><br><span class="hljs-comment"># 记得关闭文件</span><br>files[<span class="hljs-string">&#x27;file&#x27;</span>].close()<br></code></pre></td></tr></table></figure><h2 id="paramiko-连接服务器"><a href="#paramiko-连接服务器" class="headerlink" title="paramiko 连接服务器"></a>paramiko 连接服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> io<br><br><span class="hljs-comment">## 从文件中获取</span><br>pkey = paramiko.RSAKey.from_private_key_file(<span class="hljs-string">&#x27;/path/to/your/private_key&#x27;</span>)<br><br><span class="hljs-comment"># 假设这是你的私钥字符串</span><br>private_key_str = <span class="hljs-string">&quot;-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA...（此处省略中间部分）.../k=\n-----END RSA PRIVATE KEY-----&quot;</span><br><span class="hljs-comment"># 使用 io.StringIO 将字符串转换为文件对象</span><br>pkey_str_io = io.StringIO(private_key_str)<br>pkey = paramiko.RSAKey.from_private_key(pkey_str_io)<br><br>ssh_client = paramiko.SSHClient()<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br><span class="hljs-keyword">try</span>:<br>    ssh_client.connect(hostname=<span class="hljs-string">&#x27;your_host&#x27;</span>, port=<span class="hljs-number">22</span>, username=<span class="hljs-string">&#x27;your_username&#x27;</span>, pkey=pkey)<br>    stdin, stdout, stderr = ssh_client.exec_command(<span class="hljs-string">&#x27;ls -l&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(stdout.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">except</span> paramiko.AuthenticationException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;认证失败:&quot;</span>, e)<br><span class="hljs-keyword">except</span> paramiko.SSHException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SSH连接错误:&quot;</span>, e)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;其他错误:&quot;</span>, e)<br><span class="hljs-keyword">finally</span>:<br>    ssh_client.close()<br></code></pre></td></tr></table></figure><h2 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h2><h3 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 os.path.dirname</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 示例路径</span><br>file_path = <span class="hljs-string">&quot;/home/user/docs/file.txt&quot;</span><br><span class="hljs-comment"># 获取目录路径</span><br>directory = os.path.dirname(file_path)<br><span class="hljs-built_in">print</span>(directory)  <span class="hljs-comment"># 输出: /home/user/docs</span><br><br><br><span class="hljs-comment"># 使用 pathlib, python 3.4+</span><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-comment"># 示例路径</span><br>file_path = <span class="hljs-string">&quot;/home/user/docs/file.txt&quot;</span><br><span class="hljs-comment"># 获取目录路径</span><br>directory = Path(file_path).parent<br><span class="hljs-built_in">print</span>(directory)  <span class="hljs-comment"># 输出: /home/user/docs</span><br><br><span class="hljs-comment"># 通过 rsplit 分割路径</span><br>directory = file_path.rsplit(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(directory)  <span class="hljs-comment"># 输出: /home/user/docs</span><br></code></pre></td></tr></table></figure><h3 id="分割文件名和后缀"><a href="#分割文件名和后缀" class="headerlink" title="分割文件名和后缀"></a>分割文件名和后缀</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 示例路径</span><br>file_path = <span class="hljs-string">&quot;/home/user/docs/file.txt&quot;</span><br><span class="hljs-comment"># 获取文件名和后缀</span><br>filename, file_extension = os.path.splitext(file_path)<br><span class="hljs-built_in">print</span>(filename, file_extension)  <br><br><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br>file_path = <span class="hljs-string">&quot;/home/user/docs/file.txt&quot;</span><br>path_obj = Path(file_path)<br><span class="hljs-comment"># 获取根路径和扩展名</span><br>root = path_obj.with_suffix(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment"># 去掉扩展名</span><br>ext = path_obj.suffix  <span class="hljs-comment"># 获取扩展名（包括 .）</span><br><span class="hljs-built_in">print</span>(root)  <span class="hljs-comment"># 输出: /home/user/docs/file</span><br><span class="hljs-built_in">print</span>(ext)   <span class="hljs-comment"># 输出: .txt</span><br></code></pre></td></tr></table></figure><h3 id="列出目录下的内容"><a href="#列出目录下的内容" class="headerlink" title="列出目录下的内容"></a>列出目录下的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>path = <span class="hljs-string">&quot;/your/directory/path&quot;</span><br><br><span class="hljs-comment"># 列出路径下的所有文件和子目录</span><br>files_and_dirs = os.listdir(path)<br><span class="hljs-built_in">print</span>(files_and_dirs)  <span class="hljs-comment"># 输出列表形式</span><br><br><span class="hljs-comment"># 使用 os.scandir 只显示文件</span><br><span class="hljs-keyword">with</span> os.scandir(path) <span class="hljs-keyword">as</span> entries:<br>    files = [entry.name <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> entries <span class="hljs-keyword">if</span> entry.is_file()]<br><span class="hljs-built_in">print</span>(files)<br><span class="hljs-comment"># 递归方式</span><br><span class="hljs-comment"># 遍历路径及其子目录</span><br><span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(path):<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        <span class="hljs-built_in">print</span>(os.path.join(root, file))  <span class="hljs-comment"># 打印完整路径</span><br><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>path = Path(<span class="hljs-string">&quot;/your/directory/path&quot;</span>)<br><br><span class="hljs-comment"># 列出路径下的所有文件</span><br>files = [file.name <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> path.iterdir() <span class="hljs-keyword">if</span> file.is_file()]<br><span class="hljs-built_in">print</span>(files)<br><br><span class="hljs-comment"># 递归方式</span><br><span class="hljs-comment"># 遍历路径及其子目录的所有文件</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> path.rglob(<span class="hljs-string">&quot;*&quot;</span>):  <span class="hljs-comment"># rglob(&quot;*&quot;) 匹配所有文件和目录</span><br>    <span class="hljs-keyword">if</span> file.is_file():<br>        <span class="hljs-built_in">print</span>(file)  <span class="hljs-comment"># 打印完整路径</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL 切换存储路径</title>
    <link href="/2024/10/17/wsl-migrate/"/>
    <url>/2024/10/17/wsl-migrate/</url>
    
    <content type="html"><![CDATA[<h1 id="WSL-切换存储路径"><a href="#WSL-切换存储路径" class="headerlink" title="WSL 切换存储路径"></a>WSL 切换存储路径</h1><blockquote><p>WSL默认安装在C盘，使用过程中容易撑满C盘</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看容器信息</span><br>wsl -l -v <br><br><span class="hljs-comment"># 如果安装了docker则执行</span><br><span class="hljs-comment"># 先在任务栏把docker-desktop退出</span><br>wsl --<span class="hljs-built_in">export</span> docker-desktop-data <span class="hljs-string">&quot;D:\wsl\docker-desktop-data.tar&quot;</span><br>wsl --unregister docker-desktop-data<br>wsl --import docker-desktop-data <span class="hljs-string">&quot;D:\wsl\docker-desktop-data&quot;</span> <span class="hljs-string">&quot;D:\wsl\docker-desktop-data.tar&quot;</span> --version 2<br><br>wsl --<span class="hljs-built_in">export</span> docker-desktop <span class="hljs-string">&quot;D:\wsl\docker-desktop.tar&quot;</span><br>wsl --unregister docker-desktop<br>wsl --import docker-desktop <span class="hljs-string">&quot;D:\wsl\docker-desktop&quot;</span> <span class="hljs-string">&quot;D:\wsl\docker-desktop.tar&quot;</span> --version 2<br><br>wsl --shutdown<br>wsl --<span class="hljs-built_in">export</span> Ubuntu <span class="hljs-string">&quot;D:\wsl\ubuntu.tar&quot;</span><br>wsl --unregister Ubuntu<br>wsl --import Ubuntu <span class="hljs-string">&quot;D:\wsl\ubuntu&quot;</span> <span class="hljs-string">&quot;D:\wsl\ubuntu.tar&quot;</span> --version 2<br><span class="hljs-comment">## 配置默认登陆用户</span><br>ubuntu config --default-user guest<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVN GitLab 备份与还原</title>
    <link href="/2024/10/15/svn-gitlab-backup/"/>
    <url>/2024/10/15/svn-gitlab-backup/</url>
    
    <content type="html"><![CDATA[<h1 id="SVN-GitLab-备份与还原"><a href="#SVN-GitLab-备份与还原" class="headerlink" title="SVN &amp; GitLab 备份与还原"></a>SVN &amp; GitLab 备份与还原</h1><h2 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h2><ul><li>热备<ul><li>通过svn的hook达到热备效果</li><li>svnsync</li></ul></li><li>冷备<ul><li>通过 svnadmin dump 导出备份数据</li><li>rsync或scp 传输备份数据到其他机器</li></ul></li></ul><h3 id="svnsync热备"><a href="#svnsync热备" class="headerlink" title="svnsync热备"></a>svnsync热备</h3><h4 id="创建svn-仓库"><a href="#创建svn-仓库" class="headerlink" title="创建svn 仓库"></a>创建svn 仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 接创建路径</span><br>svnadmin create /home/svn<br></code></pre></td></tr></table></figure><h4 id="修改svn配置文件"><a href="#修改svn配置文件" class="headerlink" title="修改svn配置文件"></a>修改svn配置文件</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># svnserver.conf</span><br><span class="hljs-comment"># 取消如下配置注释</span><br><span class="hljs-attr">anon-access</span> = none<br><span class="hljs-attr">auth-access</span> = write<br><span class="hljs-attr">password-db</span> = passwd<br><span class="hljs-attr">authz-db</span> = authz<br></code></pre></td></tr></table></figure><h4 id="添加admin账号权限"><a href="#添加admin账号权限" class="headerlink" title="添加admin账号权限"></a>添加admin账号权限</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># authz</span><br><span class="hljs-section">[groups]</span><br><span class="hljs-attr">admin</span> = &lt;username&gt;<br><br><span class="hljs-section">[/]</span><br>@<span class="hljs-attr">admin</span> = rw<br></code></pre></td></tr></table></figure><h4 id="添加admin账号密码"><a href="#添加admin账号密码" class="headerlink" title="添加admin账号密码"></a>添加admin账号密码</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># passwd</span><br><span class="hljs-section">[users]</span><br><span class="hljs-attr">admin</span> = &lt;password&gt;<br></code></pre></td></tr></table></figure><h4 id="启动svn服务"><a href="#启动svn服务" class="headerlink" title="启动svn服务"></a>启动svn服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svnserve -d -r /home/svn<br></code></pre></td></tr></table></figure><h4 id="svnsync备份"><a href="#svnsync备份" class="headerlink" title="svnsync备份"></a>svnsync备份</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在文件第二行加入 exit 0</span><br><span class="hljs-built_in">cp</span> pre-revprop-change.tmpl pre-revprop-change<br><br><span class="hljs-comment"># 初始化备份仓库</span><br>svnsync init svn://&lt;backup_ip&gt; svn://&lt;svn_ip&gt;<br><br><span class="hljs-comment"># 会提示输入账号密码</span><br>svnsync <span class="hljs-built_in">sync</span> svn://&lt;backup_ip&gt;<br><span class="hljs-comment"># 或</span><br>svnsync <span class="hljs-built_in">sync</span> --non-interactive svn://&lt;backup_ip&gt; --sync-username &lt;username&gt; --sync-password &lt;password&gt; --source-username &lt;username&gt; --source-password &lt;password&gt;<br></code></pre></td></tr></table></figure><h4 id="将svnsync写入post-commit-hook"><a href="#将svnsync写入post-commit-hook" class="headerlink" title="将svnsync写入post-commit hook"></a>将svnsync写入post-commit hook</h4><p>钩子脚本的具体写法和shell脚本写法是一样的。钩子脚本就是被某些版本库事件触发的程序。</p><p>post-commit 在提交完成成功创建版本之后执行该钩子，提交已经完成，不可更改。</p><p>pre-commit 提交完成前触发执行该脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hooks目录</span><br><span class="hljs-built_in">cp</span> post-commit.tmpl post-commit<br><span class="hljs-comment"># 将如下命令写入 post-commit</span><br>svnsync <span class="hljs-built_in">sync</span> --non-interactive svn://&lt;backup_ip&gt; --sync-username &lt;username&gt; --sync-password &lt;password&gt; --source-username &lt;username&gt; --source-password &lt;password&gt;<br></code></pre></td></tr></table></figure><h3 id="冷备"><a href="#冷备" class="headerlink" title="冷备"></a>冷备</h3><h4 id="svnadmin-dump"><a href="#svnadmin-dump" class="headerlink" title="svnadmin dump"></a>svnadmin dump</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看版本</span><br>svnlook youngest /home/svn<br><br><span class="hljs-comment">## youngest_num填入svnlook查到值</span><br>svnadmin dump /home/svn -r 0:<span class="hljs-variable">$youngest_num</span> --incremental &gt; /home/svn_backup/svn.dump<br><span class="hljs-comment"># 可以尝试写成增量导出脚本，之后用增量文件会比全量快</span><br><span class="hljs-comment">## 恢复备份文件</span><br>svnadmin load /home/svn &lt; /home/svn_backup/svn.dump<br><br><span class="hljs-comment">## 然后做成 rsync或者 scp传输 dump文件到备份服务器</span><br></code></pre></td></tr></table></figure><h2 id="gitlab备份"><a href="#gitlab备份" class="headerlink" title="gitlab备份"></a>gitlab备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitlab-rake gitlab:backup:create<br><span class="hljs-comment"># 备份文件在/var/opt/gitlab/backups/目录下</span><br><br><span class="hljs-comment">## 修改备份文件权限</span><br><span class="hljs-built_in">chmod</span> 777 /var/opt/gitlab/backups/*.tar<br><span class="hljs-comment">## 停止服务</span><br>gitlab-ctl stop unicorn<br>gitlab-ctl stop sidekiq<br><br><span class="hljs-comment">## 恢复</span><br>gitlab-rake gitlab:backup:restore BACKUP=1481434654<br><br><span class="hljs-comment">## 启动服务</span><br>gitlab-ctl restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ansible Playbook 规范</title>
    <link href="/2024/09/27/ansible-action/"/>
    <url>/2024/09/27/ansible-action/</url>
    
    <content type="html"><![CDATA[<h1 id="Ansible-Playbook-规范"><a href="#Ansible-Playbook-规范" class="headerlink" title="Ansible Playbook 规范"></a>Ansible Playbook 规范</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>可以使用ansible-galaxy 来生成role的目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 生成 role</span><br>ansible-galaxy init rolename<br><br><span class="hljs-comment">## 查看生成的 role结构</span><br>tree roles<br>roles/<br>└── rolename<br>    ├── README.md<br>    ├── defaults<br>    │   └── main.yml<br>    ├── files<br>    ├── handlers<br>    │   └── main.yml<br>    ├── meta<br>    │   └── main.yml<br>    ├── tasks<br>    │   └── main.yml<br>    ├── templates<br>    ├── tests<br>    │   ├── inventory<br>    │   └── test.yml<br>    └── vars<br>        └── main.yml<br><br><span class="hljs-comment">## Ansible Galaxy 网站下载角色</span><br><span class="hljs-comment">## 可以下载看看别人的 playbook</span><br>ansible-galaxy install username.rolename<br></code></pre></td></tr></table></figure><h2 id="Playbook-规范"><a href="#Playbook-规范" class="headerlink" title="Playbook 规范"></a>Playbook 规范</h2><p>严格缩进，两个空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-attr">http_port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">max_clients:</span> <span class="hljs-number">200</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ensure</span> <span class="hljs-string">apache</span> <span class="hljs-string">is</span> <span class="hljs-string">at</span> <span class="hljs-string">the</span> <span class="hljs-string">latest</span> <span class="hljs-string">version</span><br>    <span class="hljs-attr">yum:</span> <span class="hljs-string">pkg=httpd</span> <span class="hljs-string">state=latest</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">write</span> <span class="hljs-string">the</span> <span class="hljs-string">apache</span> <span class="hljs-string">config</span> <span class="hljs-string">file</span><br>    <span class="hljs-attr">template:</span> <span class="hljs-string">src=/srv/httpd.j2</span> <span class="hljs-string">dest=/etc/httpd.conf</span><br>    <span class="hljs-attr">notify:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">restart</span> <span class="hljs-string">apache</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ensure</span> <span class="hljs-string">apache</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=started</span><br>  <span class="hljs-attr">handlers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">restart</span> <span class="hljs-string">apache</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=restarted</span><br></code></pre></td></tr></table></figure><h2 id="shell-command-模块返回码处理"><a href="#shell-command-模块返回码处理" class="headerlink" title="shell, command 模块返回码处理"></a>shell, command 模块返回码处理</h2><p>使用 command module 和 shell module 时,我们需要关心返回码信息,如果有一条命令成功执行的返回码不是0, 可以这样做:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">this</span> <span class="hljs-string">command</span> <span class="hljs-string">and</span> <span class="hljs-string">ignore</span> <span class="hljs-string">the</span> <span class="hljs-string">result</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string">/usr/bin/somecommand</span> <span class="hljs-string">||</span> <span class="hljs-string">/bin/true</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">this</span> <span class="hljs-string">command</span> <span class="hljs-string">and</span> <span class="hljs-string">ignore</span> <span class="hljs-string">the</span> <span class="hljs-string">result</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string">/usr/bin/somecommand</span><br>    <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>对于 command module 和 shell module,重复执行 playbook,实际上是重复运行同样的命令.如果执行的命令类似于 ‘chmod’ 或者 ‘setsebool’ 这种命令,这没有任何问题.也可以使用一个叫做 ‘creates’ 的 flag 使得这两个 module 变得具有”幂等”特性.</p><h2 id="引用task"><a href="#引用task" class="headerlink" title="引用task"></a>引用task</h2><p>如下foo.yaml例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-comment"># possibly saved as tasks/foo.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">placeholder</span> <span class="hljs-string">foo</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/foo</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">placeholder</span> <span class="hljs-string">bar</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/bar</span><br></code></pre></td></tr></table></figure><p>使用include引用foo.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">tasks/foo.yml</span><br></code></pre></td></tr></table></figure><p>也可以传递变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">wordpress.yml</span> <span class="hljs-string">wp_user=timmy</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">wordpress.yml</span> <span class="hljs-string">wp_user=alice</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">wordpress.yml</span> <span class="hljs-string">wp_user=bob</span><br><br><span class="hljs-comment">## 或者</span><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">wordpress.yml</span><br>    <span class="hljs-attr">vars:</span><br>        <span class="hljs-attr">wp_user:</span> <span class="hljs-string">timmy</span><br>        <span class="hljs-attr">some_list_variable:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">alpha</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">beta</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">gamma</span><br></code></pre></td></tr></table></figure><h2 id="roles-引用"><a href="#roles-引用" class="headerlink" title="roles 引用"></a>roles 引用</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">roles:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">common</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">webservers</span><br></code></pre></td></tr></table></figure><p>这个 playbook 为一个角色 common 指定了如下的行为：</p><ul><li>如果 roles&#x2F;common&#x2F;tasks&#x2F;main.yml 存在, 其中列出的 tasks 将被添加到 play 中</li><li>如果 roles&#x2F;common&#x2F;handlers&#x2F;main.yml 存在, 其中列出的 handlers 将被添加到 play 中</li><li>如果 roles&#x2F;common&#x2F;vars&#x2F;main.yml 存在, 其中列出的 variables 将被添加到 play 中</li><li>如果 roles&#x2F;common&#x2F;meta&#x2F;main.yml 存在, 其中列出的 “角色依赖” 将被添加到 roles 列表中 (1.3 and later)</li><li>所有 copy tasks 可以引用 roles&#x2F;common&#x2F;files&#x2F; 中的文件，不需要指明文件的路径。</li><li>所有 script tasks 可以引用 roles&#x2F;common&#x2F;files&#x2F; 中的脚本，不需要指明文件的路径。</li><li>所有 template tasks 可以引用 roles&#x2F;common&#x2F;templates&#x2F; 中的文件，不需要指明文件的路径。</li><li>所有 include tasks 可以引用 roles&#x2F;common&#x2F;tasks&#x2F; 中的文件，不需要指明文件的路径。</li></ul><p>为 roles 设置触发条件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">some_role</span>, <span class="hljs-attr">when:</span> <span class="hljs-string">&quot;ansible_os_family == &#x27;RedHat&#x27;&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>如果你希望定义一些 tasks，让它们在 roles 之前以及之后执行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">pre_tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">some_role</span> &#125;<br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;still busy&#x27;</span><br>  <span class="hljs-attr">post_tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;goodbye&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="角色默认变量"><a href="#角色默认变量" class="headerlink" title="角色默认变量"></a>角色默认变量</h2><p>角色默认变量允许你为 included roles 或者 dependent roles设置默认变量。要创建默认变量，只需在 roles 目录下添加 defaults&#x2F;main.yml 文件。这些变量在所有可用变量中拥有最低优先级，可能被其他地方定义的变量(包括 inventory 中的变量)所覆盖。</p><h2 id="角色依赖"><a href="#角色依赖" class="headerlink" title="角色依赖"></a>角色依赖</h2><p>“角色依赖” 使你可以自动地将其他 roles 拉取到现在使用的 role 中。”角色依赖” 保存在 roles 目录下的 meta&#x2F;main.yml 文件中。这个文件应包含一列 roles 和 为之指定的参数，下面是在 roles&#x2F;myapp&#x2F;meta&#x2F;main.yml 文件中的示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">common</span>, <span class="hljs-attr">some_parameter:</span> <span class="hljs-number">3</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">apache</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">postgres</span>, <span class="hljs-attr">dbname:</span> <span class="hljs-string">blarg</span>, <span class="hljs-attr">other_parameter:</span> <span class="hljs-number">12</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><h3 id="注册变量"><a href="#注册变量" class="headerlink" title="注册变量"></a>注册变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">web_servers</span><br>  <span class="hljs-attr">tasks:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">/usr/bin/foo</span><br>       <span class="hljs-attr">register:</span> <span class="hljs-string">foo_result</span><br>       <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">True</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">/usr/bin/bar</span><br>       <span class="hljs-attr">when:</span> <span class="hljs-string">foo_result.rc</span> <span class="hljs-string">==</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="使用facts获取的信息"><a href="#使用facts获取的信息" class="headerlink" title="使用facts获取的信息"></a>使用facts获取的信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible hostname -m setup<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;ansible_all_ipv4_addresses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;REDACTED IP ADDRESS&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_all_ipv6_addresses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;REDACTED IPV6 ADDRESS&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_architecture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;x86_64&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_bios_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;09/20/2012&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_bios_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.00&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_cmdline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;BOOT_IMAGE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/boot/vmlinuz-3.5.0-23-generic&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;quiet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ro&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UUID=4195bff4-e157-4e41-8701-e93f0aec9e22&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;splash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_date_time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2013-10-02&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;day&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;02&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;epoch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1380756810&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hour&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;19&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;iso8601&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2013-10-02T23:33:30Z&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;iso8601_micro&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2013-10-02T23:33:30.036070Z&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minute&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;33&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;month&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;second&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;30&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;19:33:30&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tz&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;EDT&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;year&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2013&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_default_ipv4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eth0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gateway&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;interface&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eth0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;macaddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mtu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1500</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;netmask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;255.255.255.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ether&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_default_ipv6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_devices&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fd0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;holders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;removable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rotational&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scheduler_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deadline&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sectors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sectorsize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;512&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.00 Bytes&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;support_discard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;vendor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sda&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;holders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VMware Virtual S&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;sda1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;sectors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;39843840&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;sectorsize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">512</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;19.00 GB&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2048&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sda2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;sectors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;sectorsize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">512</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.00 KB&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;39847934&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sda5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;sectors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2093056&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;sectorsize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">512</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1022.00 MB&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;39847936&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;removable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rotational&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scheduler_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deadline&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sectors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;41943040&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sectorsize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;512&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20.00 GB&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;support_discard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;vendor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VMware,&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sr0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;holders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VMware IDE CDR10&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;removable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rotational&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scheduler_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deadline&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sectors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2097151&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sectorsize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;512&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1024.00 MB&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;support_discard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;vendor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NECVMWar&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_distribution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ubuntu&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_distribution_release&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;precise&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_distribution_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;12.04&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_domain&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;COLORTERM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gnome-terminal&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;DISPLAY&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;:0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;HOME&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/mdehaan&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;LANG&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;LESSCLOSE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/lesspipe %s %s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;LESSOPEN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;| /usr/bin/lesspipe %s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;LOGNAME&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;LS_COLORS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;MAIL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/mail/root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;OLDPWD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/root/ansible/docsite&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;PATH&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;PWD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/root/ansible&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;SHELL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/bin/bash&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;SHLVL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;SUDO_COMMAND&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/bin/bash&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;SUDO_GID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;SUDO_UID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;SUDO_USER&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mdehaan&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;TERM&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xterm&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;USER&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;USERNAME&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;XAUTHORITY&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/mdehaan/.Xauthority&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/local/bin/ansible&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_eth0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;active&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;device&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eth0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ipv4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;netmask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;255.255.255.0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ipv6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;link&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;macaddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;e1000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mtu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1500</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ether&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_form_factor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Other&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_fqdn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ubuntu2.example.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_hostname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ubuntu2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_interfaces&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;lo&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;eth0&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_kernel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.5.0-23-generic&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_lo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;active&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;device&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lo&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ipv4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;netmask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;255.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.0&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ipv6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;128&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;host&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mtu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16436</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;loopback&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_lsb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;codename&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;precise&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ubuntu 12.04.2 LTS&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ubuntu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;major_release&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;12&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;release&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;12.04&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_machine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;x86_64&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_memfree_mb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">74</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_memtotal_mb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">991</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_mounts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;device&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/dev/sda1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;fstype&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ext4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;mount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rw,errors=remount-ro&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size_available&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15032406016</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size_total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20079898624</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_nodename&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ubuntu2.example.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_os_family&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debian&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_pkg_mgr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;apt&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_processor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_processor_cores&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_processor_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_processor_threads_per_core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_processor_vcpus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_product_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VMware Virtual Platform&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_product_serial&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_product_uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_product_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_python_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.7.3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_selinux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_ssh_host_key_dsa_public&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED KEY VALUE&quot;</span><br><span class="hljs-attr">&quot;ansible_ssh_host_key_ecdsa_public&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED KEY VALUE&quot;</span><br><span class="hljs-attr">&quot;ansible_ssh_host_key_rsa_public&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;REDACTED KEY VALUE&quot;</span><br><span class="hljs-attr">&quot;ansible_swapfree_mb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">665</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_swaptotal_mb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1021</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_system&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Linux&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_system_vendor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VMware, Inc.&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_user_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_userspace_architecture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;x86_64&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_userspace_bits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_virtualization_role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;guest&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ansible_virtualization_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VMware&quot;</span><br></code></pre></td></tr></table></figure><h3 id="使用复杂变量"><a href="#使用复杂变量" class="headerlink" title="使用复杂变量"></a>使用复杂变量</h3><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123; ansible_eth0[&quot;ipv4&quot;][&quot;address&quot;] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; ansible_eth0.ipv4.address &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">## 访问数组第一个元素</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; foo[0] &#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="条件选择"><a href="#条件选择" class="headerlink" title="条件选择"></a>条件选择</h2><h3 id="when-使用"><a href="#when-使用" class="headerlink" title="when 使用"></a>when 使用</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;shutdown Debian flavored systems&quot;</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">/sbin/shutdown</span> <span class="hljs-string">-t</span> <span class="hljs-string">now</span><br>    <span class="hljs-attr">when:</span> <span class="hljs-string">ansible_os_family</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;Debian&quot;</span><br><br><span class="hljs-comment">## 通过执行结果来判断</span><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/false</span><br>    <span class="hljs-attr">register:</span> <span class="hljs-string">result</span><br>    <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">True</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/something</span><br>    <span class="hljs-attr">when:</span> <span class="hljs-string">result|failed</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/something_else</span><br>    <span class="hljs-attr">when:</span> <span class="hljs-string">result|success</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/still/something_else</span><br>    <span class="hljs-attr">when:</span> <span class="hljs-string">result|skipped</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">vars:</span><br>  <span class="hljs-attr">epic:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;This certainly is epic!&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">epic</span><br><br><span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;This certainly isn&#x27;t epic!&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">not</span> <span class="hljs-string">epic</span><br><br><span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;I&#x27;ve got &#x27;<span class="hljs-template-variable">&#123;&#123; foo &#125;&#125;</span>&#x27; and am not afraid to use it!&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">foo</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">fail:</span> <span class="hljs-string">msg=&quot;Bailing</span> <span class="hljs-string">out.</span> <span class="hljs-string">this</span> <span class="hljs-string">play</span> <span class="hljs-string">requires</span> <span class="hljs-string">&#x27;bar&#x27;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">      when: bar is not defined</span><br></code></pre></td></tr></table></figure><h3 id="条件导入"><a href="#条件导入" class="headerlink" title="条件导入"></a>条件导入</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">all</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">vars_files:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;vars/common.yml&quot;</span><br>    <span class="hljs-bullet">-</span> [ <span class="hljs-string">&quot;vars/<span class="hljs-template-variable">&#123;&#123; ansible_os_family &#125;&#125;</span>.yml&quot;</span>, <span class="hljs-string">&quot;vars/os_defaults.yml&quot;</span> ]<br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">make</span> <span class="hljs-string">sure</span> <span class="hljs-string">apache</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">apache</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">state=running</span><br></code></pre></td></tr></table></figure><h3 id="基于变量选择文件和模版"><a href="#基于变量选择文件和模版" class="headerlink" title="基于变量选择文件和模版"></a>基于变量选择文件和模版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">template</span> <span class="hljs-string">a</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">template:</span> <span class="hljs-string">src=&#123;&#123;</span> <span class="hljs-string">item</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">dest=/etc/myapp/foo.conf</span><br>  <span class="hljs-attr">with_first_found:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>      <span class="hljs-bullet">-</span> &#123;&#123; <span class="hljs-string">ansible_distribution</span> &#125;&#125;<span class="hljs-string">.conf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">default.conf</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">search_location_one/somedir/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/other_location/somedir/</span><br></code></pre></td></tr></table></figure><h3 id="注册变量-1"><a href="#注册变量-1" class="headerlink" title="注册变量"></a>注册变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span> <span class="hljs-string">play</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">all</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">cat</span> <span class="hljs-string">/etc/motd</span><br>      <span class="hljs-attr">register:</span> <span class="hljs-string">motd_contents</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;motd contains the word hi&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">motd_contents.stdout.find(&#x27;hi&#x27;)</span> <span class="hljs-type">!=</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="标准循环"><a href="#标准循环" class="headerlink" title="标准循环"></a>标准循环</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">add</span> <span class="hljs-string">several</span> <span class="hljs-string">users</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">item</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">state=present</span> <span class="hljs-string">groups=wheel</span><br>  <span class="hljs-attr">with_items:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">testuser1</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">testuser2</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">add</span> <span class="hljs-string">several</span> <span class="hljs-string">users</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">item.name</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">state=present</span> <span class="hljs-string">groups=&#123;&#123;</span> <span class="hljs-string">item.groups</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">with_items:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;testuser1&#x27;</span>, <span class="hljs-attr">groups:</span> <span class="hljs-string">&#x27;wheel&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;testuser2&#x27;</span>, <span class="hljs-attr">groups:</span> <span class="hljs-string">&#x27;root&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">give</span> <span class="hljs-string">users</span> <span class="hljs-string">access</span> <span class="hljs-string">to</span> <span class="hljs-string">multiple</span> <span class="hljs-string">databases</span><br>  <span class="hljs-attr">mysql_user:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">item[0]</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">priv=&#123;&#123;</span> <span class="hljs-string">item[1]</span> <span class="hljs-string">&#125;&#125;.*:ALL</span> <span class="hljs-string">append_privs=yes</span> <span class="hljs-string">password=foo</span><br>  <span class="hljs-attr">with_nested:</span><br>    <span class="hljs-bullet">-</span> [ <span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-string">&#x27;bob&#x27;</span> ]<br>    <span class="hljs-bullet">-</span> [ <span class="hljs-string">&#x27;clientdb&#x27;</span>, <span class="hljs-string">&#x27;employeedb&#x27;</span>, <span class="hljs-string">&#x27;providerdb&#x27;</span> ]<br></code></pre></td></tr></table></figure><h3 id="哈希表循环"><a href="#哈希表循环" class="headerlink" title="哈希表循环"></a>哈希表循环</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">users:</span><br>  <span class="hljs-attr">alice:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Alice</span> <span class="hljs-string">Appleworth</span><br>    <span class="hljs-attr">telephone:</span> <span class="hljs-number">123</span><span class="hljs-number">-456</span><span class="hljs-number">-7890</span><br>  <span class="hljs-attr">bob:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Bob</span> <span class="hljs-string">Bananarama</span><br>    <span class="hljs-attr">telephone:</span> <span class="hljs-number">987</span><span class="hljs-number">-654</span><span class="hljs-number">-3210</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Print</span> <span class="hljs-string">phone</span> <span class="hljs-string">records</span><br>    <span class="hljs-attr">debug:</span> <span class="hljs-string">msg=&quot;User</span> &#123;&#123; <span class="hljs-string">item.key</span> &#125;&#125; <span class="hljs-string">is</span> &#123;&#123; <span class="hljs-string">item.value.name</span> &#125;&#125; <span class="hljs-string">(&#123;&#123;</span> <span class="hljs-string">item.value.telephone</span> <span class="hljs-string">&#125;&#125;)&quot;</span><br>    <span class="hljs-attr">with_dict:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;users&#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="文件列表循环"><a href="#文件列表循环" class="headerlink" title="文件列表循环"></a>文件列表循环</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">all</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-comment"># first ensure our target directory exists</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">dest=/etc/fooapp</span> <span class="hljs-string">state=directory</span><br>    <span class="hljs-comment"># copy each file over that matches the given pattern</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">copy:</span> <span class="hljs-string">src=&#123;&#123;</span> <span class="hljs-string">item</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">dest=/etc/fooapp/</span> <span class="hljs-string">owner=root</span> <span class="hljs-string">mode=600</span><br>      <span class="hljs-attr">with_fileglob:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/playbooks/files/fooapp/*</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ansible 批量设置免密登录</title>
    <link href="/2024/08/29/ansible-set-sshpass/"/>
    <url>/2024/08/29/ansible-set-sshpass/</url>
    
    <content type="html"><![CDATA[<h2 id="1-准备-inventory-sshkey"><a href="#1-准备-inventory-sshkey" class="headerlink" title="1. 准备 inventory &amp;&amp; sshkey"></a>1. 准备 inventory &amp;&amp; sshkey</h2><p>  首次批量设置免密必然涉及使用带账号密码的inventory文件，<br>  在设置完后记得修改或删除inventory文件。</p><p>  生成公钥和私钥</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 随机生成公私钥对，ssh-keygen是Linux下认证密钥生成、管理和转换工具，详细用法可参考其man文档</span><br><span class="hljs-comment"># 最简单的用法，然后敲回车即可</span><br>ssh-keygen -t rsa<br><span class="hljs-comment"># -N 必须设置为空，否则ssh时依然需要输入-N设置的密码</span><br><span class="hljs-comment"># -C 添加注释</span><br>ssh-keygen -N <span class="hljs-string">&quot;&quot;</span> -b 4096 -t rsa -C <span class="hljs-string">&quot;root@localhost.com&quot;</span> -f /root/.ssh/root.rsa<br></code></pre></td></tr></table></figure><h2 id="2-编写playbook-or-使用ad-hoc"><a href="#2-编写playbook-or-使用ad-hoc" class="headerlink" title="2. 编写playbook or 使用ad-hoc"></a>2. 编写playbook or 使用ad-hoc</h2><ul><li><p>authorized_key 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## manage_dir 意思是如果/root没有.ssh文件目录就自动创建.ssh文件目录</span><br>ansible machine -m authorized_key -a  <span class="hljs-string">&quot;user=root  key=&#x27;&#123;&#123;  lookup(&#x27;file&#x27;, &#x27;/root/.ssh/id_rsa.pub&#x27;)  &#125;&#125;&#x27;  path=/root/.ssh/authorized_keys  manage_dir=yes&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>copy &amp;&amp; shell 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># copy公钥至远程主机/tmp目录下</span><br>ansible machine -m copy -a <span class="hljs-string">&quot;src=/root/.ssh/id_rsa.pub dest=/tmp/id_rsa.pub&quot;</span><br><span class="hljs-comment"># 添加公钥</span><br>ansible machine -m shell -a <span class="hljs-string">&quot;cat /tmp/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>少量主机时可用</p><ul><li>需要自己输入密码</li><li>主机较多时频繁输入密码较麻烦，主机量少时可以使用</li><li>个别新增可用此方法</li><li>也可配合expect实现自动输入密码</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.1.1<br></code></pre></td></tr></table></figure><p>关于expect用法可查询其他资料，bash脚本可以结合expect使用，从而达到自动批量登录设置免密的效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ! /usr/bin/expect</span><br><span class="hljs-comment"># 设置要连接的远程主机IP信息</span><br><span class="hljs-built_in">set</span> IP      [ lindex <span class="hljs-variable">$argv</span> 0 ]<br><span class="hljs-comment"># 设置要连接的远程主机登录用户</span><br><span class="hljs-built_in">set</span> USER    [ lindex <span class="hljs-variable">$argv</span> 1 ]<br><span class="hljs-comment"># 设置要连接的远程主机登录用户的密码信息</span><br><span class="hljs-built_in">set</span> PASSWD [ lindex <span class="hljs-variable">$argv</span> 2 ]<br><span class="hljs-comment"># 设置要执行的命令</span><br><span class="hljs-built_in">set</span> CMD     [ lindex <span class="hljs-variable">$argv</span> 3 ]<br><span class="hljs-comment"># spawn是expect内部命令，开启ssh连接</span><br>spawn ssh <span class="hljs-variable">$USER</span>@<span class="hljs-variable">$IP</span> <span class="hljs-variable">$CMD</span><br><span class="hljs-comment"># 判断上次执行结果</span><br>expect &#123;<br>    <span class="hljs-comment"># 如果有yes或no关键字</span><br>    <span class="hljs-string">&quot;(yes/no)? &quot;</span> &#123;<br>        <span class="hljs-comment"># 则输入yes</span><br>        send <span class="hljs-string">&quot;yes\r&quot;</span><br>        <span class="hljs-comment"># 输入完yes后如果输出结果有：password: 关键字</span><br>        expect <span class="hljs-string">&quot;password:&quot;</span><br>        <span class="hljs-comment"># 则输入密码文件</span><br>        send <span class="hljs-string">&quot;<span class="hljs-variable">$PASSWD</span>\r&quot;</span><br>        &#125;<br>    <span class="hljs-comment"># 如果上次输出结果有：password: ，则输入密码</span><br>    <span class="hljs-string">&quot;password:&quot;</span> &#123;send <span class="hljs-string">&quot;<span class="hljs-variable">$PASSWD</span>\r&quot;</span>&#125;<br>    <span class="hljs-comment"># 如果上次输出结果有：* to host ，则退出</span><br>    <span class="hljs-string">&quot;* to host&quot;</span> &#123;<span class="hljs-built_in">exit</span> 1&#125;<br>    &#125;<br>expect eof<br></code></pre></td></tr></table></figure><h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 ip host 写入/etc/hosts文件，如</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.1.1 master&quot;</span> &gt;&gt; /etc/hosts<br><span class="hljs-comment">## 实现直接输入master登录远程服务器</span><br>ssh master <br></code></pre></td></tr></table></figure><h2 id="Windows-设置免密"><a href="#Windows-设置免密" class="headerlink" title="Windows 设置免密"></a>Windows 设置免密</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ansible win -m win_shell -a &quot;mkdir C:\Users\Administrator\.ssh -Force&quot;<br><br>ansible hz_win -m win_copy  -a &quot;src=&#x27;/root/.ssh/id_rsa.pub&#x27; dest=&#x27;C:/Users/Administrator/.ssh/authorized_keys&#x27;&quot;<br><br>ansible hz_win -m win_copy  -a &#x27;icacls C:\Users\Administrator\.ssh\authorized_keys /inheritance:r /grant &quot;Administrator:F&quot;&#x27;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s 基础操作与配置</title>
    <link href="/2024/08/27/k8s-base-operation-config/"/>
    <url>/2024/08/27/k8s-base-operation-config/</url>
    
    <content type="html"><![CDATA[<h1 id="K8s-基础"><a href="#K8s-基础" class="headerlink" title="K8s 基础"></a>K8s 基础</h1><h2 id="kubectl-cmd"><a href="#kubectl-cmd" class="headerlink" title="kubectl cmd"></a>kubectl cmd</h2><ul><li><p>command 子命令，常用如 create、 delete、 describe、 get、 apply、 exec等。</p></li><li><p>TYPE 资源对象类型，区分大小写。 可简写，简写形式可用<code>kubectl api-resources</code>查看。</p></li><li><p>NAME 资源对象名称，区分大小写。</p></li><li><p>flags 子命令行参数。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl [<span class="hljs-built_in">command</span>] [TYPE] [NAME] [flags]<br><br><span class="hljs-comment">## 获取多个pod信息</span><br>kubectl get pods name1 name2<br><br><span class="hljs-comment">## 获取多种对象信息</span><br>kubectl get pod/pod_name rc/rc_name<br>kubectl get pod,rc,service<br><br><span class="hljs-comment">## 同时应用多个YAML文件，以多个-f file参数表示 </span><br>kubectl get pod -f pod1.yaml -f pod2.yaml<br>kubectl create -f pod1.yaml -f rc1.yaml -f service1.yaml<br><br><span class="hljs-comment">## 按名字进行排序</span><br>kubectl get pods --sort-by=.metadata.name<br><br><span class="hljs-comment">## 查看指定 namespace下的指定标签下的 pod</span><br>kubectl get pod -n ns -l &lt;labelname&gt;=nginx_proxy<br><br><span class="hljs-comment">## 创建资源对象</span><br><span class="hljs-comment">## 根据 yaml配置文件一次性创建 service和 rc</span><br>kubectl create -f my-service.yaml -f my-rc.yaml<br><br><span class="hljs-comment">## 根据&lt;directory&gt;目录下所有.yaml、.yml、.json文件的定义进行创建</span><br>kubectl create -f &lt;directory&gt;<br><br><span class="hljs-comment">## 删除所有包含某个label的pod和service</span><br>kubectl delete pods,services -l name=&lt;label-name&gt;<br><br><span class="hljs-comment">## 删除所有pod</span><br>kubectl delete pods --all<br><br><span class="hljs-comment">## 指定 Pod中的指定容器执行 date命令</span><br>kubectl <span class="hljs-built_in">exec</span> &lt;pod-name&gt; -c &lt;container-name&gt; <span class="hljs-built_in">date</span><br><br><span class="hljs-comment">## 登录容器</span><br>kubectl <span class="hljs-built_in">exec</span> -it &lt;pod-name&gt; -c &lt;container-name&gt; -- /bin/bash<br><br><span class="hljs-comment">## 跟踪查看容器日志</span><br>kubectl logs -f &lt;pod-name&gt; -c &lt;container-name&gt;<br><br><span class="hljs-comment">## 创建或更新资源对象</span><br>kubectl apply -f app.yaml<br><br><span class="hljs-comment">## 在线编辑运行中的资源对象</span><br>kubectl edit deploy nginx<br></code></pre></td></tr></table></figure><p>通常情况下不会去使用pod类型单独控制pod，而是使用Deployment、ReplicaSet、StatefulSet等资源对象来配置pod。</p><h2 id="k8s-pod-config"><a href="#k8s-pod-config" class="headerlink" title="k8s pod config"></a>k8s pod config</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">imagePullPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">IfNotPresent</span>]<br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]<br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">string</span>]<br>    <span class="hljs-attr">workingDir:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-string">boolean</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-string">int</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-string">int</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">env:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">limits:</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">requests:</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">items:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>    <span class="hljs-attr">configMap:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">items:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">exec:</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]<br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">httpHeaders:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">tcpSocket:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">securityContext:</span><br>      <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">restartPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">OnFailure</span>]<br>  <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">object</span><br>  <span class="hljs-attr">imagePullSecrets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">false</span>   <br></code></pre></td></tr></table></figure><h2 id="Pod共享volume"><a href="#Pod共享volume" class="headerlink" title="Pod共享volume"></a>Pod共享volume</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">volume-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/tomcat/logs</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;tail -f /logs/catalina*.log&quot;</span>]<br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/logs</span><br>  <span class="hljs-comment"># 设置的Volume名为app-logs,类型为emptyDir</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">app-logs</span><br>    <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cm-appvars</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">apploglevel:</span> <span class="hljs-string">info</span><br>  <span class="hljs-attr">appdatadir:</span> <span class="hljs-string">/var/data</span><br><br></code></pre></td></tr></table></figure><h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><p>用于管理在集群中每个Node上仅运行一份Pod的副本实例<br>使用场景：</p><ul><li>在每个node上都运行一个GlusterFS存储或者Ceph存储的Daemon进程</li><li>在每个Node上都运行一个日志采集程序</li><li>在每个Node上都运行一个性能监控程序，采集该Node的运行性能数据</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-cloud-logging</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-cloud-logging</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>      <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-cloud-logging</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-cloud-logging</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">gcr.io/google_containers/fluentd-elasticsearch:1.17</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>      <span class="hljs-attr">env:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">FLUENTD_ARGS</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">-q</span><br>      <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log</span><br>        <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">containers</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>        <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">containers</span><br>      <span class="hljs-attr">hostPath:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>      <span class="hljs-attr">hostPath:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/var/log</span><br>  <span class="hljs-attr">updateStrategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br></code></pre></td></tr></table></figure><blockquote><p>updateStrategy的另外一个值是OnDelete，即只有手工删除了DaemonSet创建的Pod副本，新的Pod副本才会被创建出来</p></blockquote><h2 id="Job-批处理调度"><a href="#Job-批处理调度" class="headerlink" title="Job 批处理调度"></a>Job 批处理调度</h2><p>通过Kubernetes Job资源对象来定义并启动一个批处理任务</p><p>批处理可分为：</p><ul><li>Job Template Expansion模式<ul><li>一个Job对象对应一个待处理的Work item，有几个Work item就产生几个独立的Job</li></ul></li><li>Queue with Pod Per Work Item模式<ul><li>采用一个任务队列存放Work item，一个Job对象作为消费者去完成这些Work item</li><li>Job会启动N个Pod，每个Pod都对应一个Work item</li></ul></li><li>Queue with Variable Pod Count模式<ul><li>采用一个任务队列存放Work item，一个Job对象作为消费者去完成这些Work item，但与上面的模式不同，Job启动的Pod数量是可变的。</li></ul></li><li>Single Job with Static Work Assignment模式<ul><li>一个Job产生多个Pod，但它采用程序静态方式分配任务项，而不是采用队列模式进行动态分配</li></ul></li></ul><p>Kubernetes将Job分以下三种类型:</p><ul><li>Non-parallel Jobs</li><li>Parallel Jobs with a fixed completion count</li><li>Parallel Jobs with a work queue</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">process-item-$ITEM</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">jobgroup:</span> <span class="hljs-string">jobexample</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">jobexample</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">jobgroup:</span> <span class="hljs-string">jobexample</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">c</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo Processing item $ITEM&amp;&amp; sleep 5&quot;</span>]<br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h2 id="Cronjob-定时任务"><a href="#Cronjob-定时任务" class="headerlink" title="Cronjob 定时任务"></a>Cronjob 定时任务</h2><p>基本上可参照Linux Cron的表达式</p><p><code>Minutes Hours DayofMonth Month DayofWeek Year</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>  <span class="hljs-attr">jobTemplate:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>            <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">date;</span> <span class="hljs-string">echo</span> <span class="hljs-string">Hello</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">cluster</span><br>          <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br></code></pre></td></tr></table></figure><h2 id="Pod-升级回滚"><a href="#Pod-升级回滚" class="headerlink" title="Pod 升级回滚"></a>Pod 升级回滚</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新镜像</span><br>kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.9.1<br><span class="hljs-comment"># 或者edit编辑</span><br>kubectl edit deployment/nginx-deployment<br><br><span class="hljs-comment"># 查看deployment更新过程</span><br>kubetl rollout status deployment/hello<br><br><span class="hljs-comment">## 查看历史记录</span><br>kubectl rollout <span class="hljs-built_in">history</span> deployment/hello<br><span class="hljs-comment"># 查看指定版本</span><br>kubectl rollout <span class="hljs-built_in">history</span> deployment/hello --revision=2<br><span class="hljs-comment"># 回滚到上一个版本</span><br>kubectl rollout undo deployment/hello<br><span class="hljs-comment"># 回滚到指定版本</span><br>kubectl rollout undo deployment/hello --to-revision=2<br><br><span class="hljs-comment">## 暂停deployment更新</span><br>kubectl rollout pause deployment/hello<br><span class="hljs-comment"># 恢复Deployment部署</span><br>kubectl rollout resume deployment/hello<br><span class="hljs-comment"># 在恢复暂停的Deployment之前，无法回滚该Deployment</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 实用技巧（三）</title>
    <link href="/2024/08/15/shell-action-3/"/>
    <url>/2024/08/15/shell-action-3/</url>
    
    <content type="html"><![CDATA[<ol><li><p><strong>getopts</strong></p><ul><li><code>getopts</code> 是一个内建命令，用于处理命令行选项。</li><li>它可以让脚本在运行时接受命令行参数。</li><li>它的语法是：<code>getopts optstring variable</code>。</li><li><code>optstring</code> 填入选项字符，如 <code>abc</code> 表示选项 a、b 和 c 是合法的选项。</li><li>如果是必填项要在选项后面加冒号，如<code>a:bc</code></li><li>对于接受参数的选项，参数会保存在 shell 变量 <code>$OPTARG</code>中</li><li>当选项是不需要输入参数的时候，<code>$OPTARG</code>为空</li><li><code>$OPTIND</code> 初始值为1，每解析一个选项，<code>$OPTIND</code> 会加1</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：getopts_example</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># getopts用法</span><br><span class="hljs-comment">#</span><br>aflag=<br>bflag=<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&#x27;ab:&#x27;</span> OPTION<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$OPTION</span> <span class="hljs-keyword">in</span><br>        a) aflag=1<br>        ;;<br>        b) bflag=1<br>        bval=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span><br>        ;;<br>        ?) <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Usage: %s: [-a] [-b value] args\n&quot;</span> <span class="hljs-variable">$&#123;0##*/&#125;</span> &gt;&amp;2<br>        <span class="hljs-built_in">exit</span> 2<br>        ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">shift</span> $((<span class="hljs-variable">$OPTIND</span> - <span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$aflag</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Option -a specified\n&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$bflag</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;Option -b &quot;%s&quot; specified\n&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$bval</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Remaining arguments are: %s\n&quot;</span> <span class="hljs-string">&quot;$*&quot;</span><br><br>myscript -a -b alt plow harvest reap<br><span class="hljs-comment">## 这里解析完选项后 $OPTIND 为 4, 因此$OPTIND - 1，丢弃解析过的选项，剩余的参数为 plow harvest reap</span><br></code></pre></td></tr></table></figure><ul><li>如果想让脚本输出自己自定义的错误信息，需要在 <code>getopts</code> 选项列表前加上<code>:</code>, 如<code>:ab:c</code> 使<code>getopts</code>不输出错误消息 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：getopts_custom</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 解析参数时使用自定义错误消息</span><br><span class="hljs-comment">#</span><br>aflag=<br>bflag=<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> :ab: FOUND<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$FOUND</span> <span class="hljs-keyword">in</span><br>        a) aflag=1<br>        ;;<br>        b) bflag=1<br>        bval=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        <span class="hljs-comment"># 缺少参数返回 :</span><br>        \:) <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;argument missing from -%s option\n&quot;</span> <span class="hljs-variable">$OPTARG</span><br>            <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Usage: %s: [-a] [-b value] args\n&quot;</span> <span class="hljs-variable">$&#123;0##*/&#125;</span><br>            <span class="hljs-built_in">exit</span> 2<br>            ;;<br>        <span class="hljs-comment"># 不支持的选项返回 ?</span><br>        \?) <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;unknown option: -%s\n&quot;</span> <span class="hljs-variable">$OPTARG</span><br>            <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Usage: %s: [-a] [-b value] args\n&quot;</span> <span class="hljs-variable">$&#123;0##*/&#125;</span><br>            <span class="hljs-built_in">exit</span> 2<br>            ;;<br>        <span class="hljs-keyword">esac</span> &gt;&amp;2<br>    <span class="hljs-keyword">done</span><br><span class="hljs-built_in">shift</span> $((<span class="hljs-variable">$OPTIND</span> - <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>用read解析文本</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：parseViaRead</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 用read语句解析ls -l的输出</span><br><span class="hljs-comment"># ls -l的输出类似于以下这样：</span><br><span class="hljs-comment"># -rw-r--r--  1 albing users 126 2006-10-10 22:50 fnsize</span><br><br><span class="hljs-built_in">ls</span> -l <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> | &#123; <span class="hljs-built_in">read</span> PERMS LCOUNT OWNER GROUP SIZE CRDATE CRTIME FILE ;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$FILE</span> has <span class="hljs-variable">$LCOUNT</span> <span class="hljs-string">&#x27;link(s)&#x27;</span> and is <span class="hljs-variable">$SIZE</span> bytes long. ;<br>&#125;<br><br><span class="hljs-comment"># read 将各单词读入数组变量</span><br><span class="hljs-built_in">read</span> -a MYRAY<br></code></pre></td></tr></table></figure></li><li><p><strong>读取整个文件</strong></p><blockquote><p>mapfile 和 readarray</p><p>能够将整个文件读入数组，每个数组元素对应文件中的一行</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mapfile</span> -t -s 1 -n 1500 -C showprg -c 100 BIGDATA &lt; /tmp/myfile.data<br><span class="hljs-comment"># -s 1 跳过第一行输入</span><br><span class="hljs-comment"># -n 1500 读取 1500行</span><br><span class="hljs-comment"># -t 删除每行行尾的换行符</span><br><span class="hljs-comment"># -c 100 每读取 100行调用一次用户自定义函数 showprg, 默认每 5000行调用一次</span><br><span class="hljs-comment"># 结果放进数组 BIGDATA</span><br></code></pre></td></tr></table></figure></li><li><p><strong>每次提取一个字符</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：onebyone</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 从输入中一次解析一个字符</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> ALINE<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">$&#123;#ALINE&#125;</span>; i++))<br>    <span class="hljs-keyword">do</span><br>        ACHAR=<span class="hljs-variable">$&#123;ALINE:i:1&#125;</span><br>        <span class="hljs-comment"># 在这里执行某些操作，如echo $ACHAR</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$ACHAR</span><br>    <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li><p><strong>提取数据中的特定字段</strong></p><ul><li><code>cut</code></li><li><code>awk</code></li><li><code>grep -o</code> 正则提取</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -d: -f1,6,7 /etc/passwd<br><span class="hljs-built_in">cut</span> -d: -f1-3<br><br><span class="hljs-comment"># 默认输出分隔符是空格，通过 OFS变量修改</span><br>awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;:&quot;; OFS=&quot;\t&quot;&#125; &#123;print $1 $7 $6&#125;&#x27;</span> /etc/passwd<br><br><span class="hljs-comment">## ip地址提取</span><br>ip a | grep -oP <span class="hljs-string">&#x27;([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>更新文件中的特定字段</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep csh /etc/passwd<br>root:*:0:0:Charlie &amp;:/root:/bin/csh<br><br>$ sed <span class="hljs-string">&#x27;s;/csh$;/sh;&#x27;</span> /etc/passwd | grep <span class="hljs-string">&#x27;^root&#x27;</span><br>root:*:0:0:Charlie &amp;:/root:/bin/sh<br><br><span class="hljs-comment"># 对字段进行运算或修改特定字段中的内容</span><br>$ <span class="hljs-built_in">cat</span> data_file<br>Line 1 ends<br>Line 2 ends<br>Line 3 ends<br>Line 4 ends<br>Line 5 ends<br><br>$ awk <span class="hljs-string">&#x27;&#123;print $1, $2+5, $3&#125;&#x27;</span> data_file<br>Line 6 ends<br>Line 7 ends<br>Line 8 ends<br>Line 9 ends<br>Line 10 ends<br><span class="hljs-comment"># 如果第2个字段中包含&#x27;3&#x27;，将其修改为&#x27;8&#x27;并做标记</span><br>$ awk <span class="hljs-string">&#x27;&#123; if ($2 == &quot;3&quot;) print $1, $2+5, $3, &quot;Tweaked&quot; ; else print $0; &#125;&#x27;</span> \<br>data_file<br>Line 1 ends<br>Line 2 ends<br>Line 8 ends Tweaked<br>Line 4 ends<br>Line 5 ends<br></code></pre></td></tr></table></figure></li><li><p><strong>修剪空白字符</strong></p><ul><li><code>shopt -s extglob</code> 开启扩展通配符匹配</li><li>利用 <code>read</code>的设计方法</li><li><code>$&#123;##&#125; 或 $&#123;%%&#125;</code> 变量字符串切割</li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">shopt</span> -s extglob<br><span class="hljs-comment">## 开启后可以用 +(), 匹配多个空格符</span><br><span class="hljs-variable">$&#123;line##+([[:space:]])&#125;</span><br><span class="hljs-variable">$&#123;line%%+([[:space:]])&#125;</span><br><br><span class="hljs-built_in">shopt</span> -s extglob<br><br><span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;None: <span class="hljs-variable">$line</span>&quot;</span> <span class="hljs-comment"># 保留所有的空白字符</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Ld: <span class="hljs-variable">$&#123;line##+([[:space:]])&#125;</span>&quot;</span> <span class="hljs-comment"># 修剪行首空白字符</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Tr: <span class="hljs-variable">$&#123;line%%+([[:space:]])&#125;</span>&quot;</span> <span class="hljs-comment"># 修剪行尾空白字符</span><br>line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;line##+([[:space:]])&#125;</span>&quot;</span> <span class="hljs-comment"># 修剪行首和……</span><br>line=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;line%%+([[:space:]])&#125;</span>&quot;</span> <span class="hljs-comment"># ……行尾的空白字符</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;All: <span class="hljs-variable">$line</span>&quot;</span> <span class="hljs-comment"># 显示修剪后的内容</span><br><span class="hljs-keyword">done</span> &lt; whitespace<br></code></pre></td></tr></table></figure></li><li><p><strong>编写安全的shell脚本</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：security_template</span><br><br><span class="hljs-comment"># 设置合理的/安全的路径</span><br>PATH=<span class="hljs-string">&#x27;/usr/local/bin:/bin:/usr/bin&#x27;</span><br><span class="hljs-comment"># 确保导出$PATH</span><br>\<span class="hljs-built_in">export</span> PATH<br><br><span class="hljs-comment"># 清除所有别名。切记：开头的\用于禁止别名扩展</span><br>\<span class="hljs-built_in">unalias</span> -a<br><br><span class="hljs-comment"># 清除命令路径散列</span><br><span class="hljs-built_in">hash</span> -r<br><br><span class="hljs-comment"># 将硬性限制设置为0，关闭核心转储（core dumps）</span><br><span class="hljs-built_in">ulimit</span> -H -c 0 --<br><br><span class="hljs-comment"># 设置合理的/安全的IFS（注意，这里使用的语法仅适用于bash和ksh93，不具备可移植性！）</span><br>IFS=$<span class="hljs-string">&#x27; \t\n&#x27;</span><br><br><span class="hljs-comment"># 设置并使用合理的/安全的umask变量</span><br><span class="hljs-comment"># 注意，这不会影响已经在命令行上重定向的文件</span><br><span class="hljs-comment"># 022产生0755权限，077产生0700权限……</span><br>UMASK=022<br><span class="hljs-built_in">umask</span> <span class="hljs-variable">$UMASK</span><br><br><span class="hljs-keyword">until</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$temp_dir</span>&quot;</span> -a ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$temp_dir</span>&quot;</span> ]; <span class="hljs-keyword">do</span><br>    temp_dir=<span class="hljs-string">&quot;/tmp/meaningful_prefix.<span class="hljs-variable">$&#123;RANDOM&#125;</span><span class="hljs-variable">$&#123;RANDOM&#125;</span><span class="hljs-variable">$&#123;RANDOM&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">mkdir</span> -p -m 0700 <span class="hljs-variable">$temp_dir</span> \<br>|| (<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;FATAL: Failed to create temp dir &#x27;<span class="hljs-variable">$temp_dir</span>&#x27;: $?&quot;</span>; <span class="hljs-built_in">exit</span> 100)<br><br><span class="hljs-comment"># 尽全力清除临时文件</span><br><span class="hljs-comment"># 注意，一定要先设置好$temp_dir，千万不要修改！</span><br>cleanup=<span class="hljs-string">&quot;rm -rf <span class="hljs-variable">$temp_dir</span>&quot;</span><br><span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;<span class="hljs-variable">$cleanup</span>&quot;</span> ABRT EXIT HUP INT QUIT<br></code></pre></td></tr></table></figure></li><li><p><strong>脚本重定向输出</strong></p><p> exec 通常会使用其参数所指定的命令来替换正在运行的 shell</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 保存旧的STDERR</span><br><span class="hljs-built_in">exec</span> 3&gt;&amp;2<br><br><span class="hljs-comment"># 将所有发往STDERR的输出重定向到错误日志文件</span><br><span class="hljs-built_in">exec</span> 2&gt; /path/to/error_log<br><br><span class="hljs-comment"># 通过还原STDERR并关闭文件句柄3来停止重定向</span><br><span class="hljs-built_in">exec</span> 2&gt;&amp;3-<br></code></pre></td></tr></table></figure></li><li><p><strong>Argument list too long</strong></p><p>使用 xargs 命令（可能还要配合 find）来拆分参数列表。</p><p>find -print0 配合 xargs -0。可以使 find 使用空字符（文件名中不会出现这种字符）代替空白字符作为输出记录分隔符，xargs 使用空字符作为输入记录分隔符。这样能正确地解析包含怪异字符的文件名。</p><p>ARG_MAX 限制了 exec* 系列系统调用的总空间需求，内核以此知道它必须分配的最大缓冲区。execve 的 3 个参数是：程序名称、参数向量和环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看系统限制值</span><br>getconf ARG_MAX<br>getconf LINE_MAX<br></code></pre></td></tr></table></figure></li><li><p><strong>自定义提示符</strong></p><p>提示字符串分别为 $PS0、$PS1、$PS2、$PS3、$PS4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 实例文件：prompts</span><br><br><span class="hljs-comment"># 用户名@短格式主机名、日期和时间，以及当前工作目录（CWD）：</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;[\u@\h \d \A] \w \$ &#x27;</span><br><br><span class="hljs-comment"># 用户名@长格式主机名、ISO 8601格式的日期和时间、当前工作目录的基本名称（\W）:</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;[\u@\H \D&#123;%Y-%m-%d %H:%M:%S%z&#125;] \W \$ &#x27;</span><br><br><span class="hljs-comment"># 用户名@短格式主机名、bash版本号，以及当前工作目录（\w）：</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;[\u@\h \V \w] \$ &#x27;</span><br><br><span class="hljs-comment"># 换行符、用户名@短格式主机名、基本PTY、shell层级、历史编号、换行符，以及完整的工作</span><br>目录名称（<span class="hljs-variable">$PWD</span>）：<br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;\n[\u@\h \l:$SHLVL:\!]\n$PWD\$ &#x27;</span><br><br><span class="hljs-comment"># 用户名@短格式主机名、上一个命令的退出状态，以及当前工作目录：</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;[\u@\h $? \w \$ &#x27;</span><br><br><span class="hljs-comment"># 换行符、用户名@短格式主机名，以及后台作业数：</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;\n[\u@\h jobs:\j]\n$PWD\$ &#x27;</span><br><br><span class="hljs-comment"># 换行符、用户名@短格式主机名、终端、shell层级、历史编号、作业数量、bash版本号，以</span><br>及完整的工作目录：<br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;\n[\u@\h t:\l l:$SHLVL h:\! j:\j v:\V]\n$PWD\$ &#x27;</span><br><br><span class="hljs-comment"># 换行符、用户名@短格式主机名、代表终端的T、代表shell层级的L、代表命令编号的C，以及</span><br>ISO 8601格式的日期和时间：<br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;\n[\u@\h:T\l:L$SHLVL:C\!:\D&#123;%Y-%m-%d_%H:%M:%S_%Z&#125;]\n$PWD\$ &#x27;</span><br><br><span class="hljs-comment"># 用户名@短格式主机名、浅蓝色的当前工作目录：</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;\[\033[1;34m\][\u@\h:\w]\$\[\033[0m\] &#x27;</span><br><br><span class="hljs-comment"># 在xterm的标题栏和提示符中同时显示用户名@短格式主机名、当前工作目录：</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;\[\033]0;\u@\h:\w\007\][\u@\h:\w]\$ &#x27;</span><br><br><span class="hljs-comment"># 同时更新颜色和xterm：</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;\[\033]0;\u@\h:\w\007\]\[\033[1;34m\][\u@\h:\w]\$\[\033[0m\] &#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>设置$CDPATH</strong></p><p>CDPATH 是一个以冒号为分隔符的目录列表，用作内建命令 cd 的搜索路径​。可以将它看作 cd 的 $PATH。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CDPATH=<span class="hljs-string">&#x27;.:/etc:/usr&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>在会话间同步shell历史记录</strong></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将当前历史记录追加到历史文件</span><br><span class="hljs-built_in">history</span> -a <br><br><span class="hljs-comment"># 将历史记录读入当前shell</span><br><span class="hljs-built_in">history</span> -n<br><br>HISTTIMEFORMAT=<span class="hljs-string">&#x27;%Y-%m-%d_%H:%M:%S; &#x27;</span><br><br>HISTTIMEFORMAT=<span class="hljs-string">&#x27;: %Y-%m-%d_%H:%M:%S; &#x27;</span><br></code></pre></td></tr></table></figure><ol start="14"><li><strong>批量解压ZIP文件</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip <span class="hljs-string">&#x27;*.zip&#x27;</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> /path/to/date*/name/*.zip; <span class="hljs-keyword">do</span> unzip <span class="hljs-string">&quot;<span class="hljs-variable">$x</span>&quot;</span>; <span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">ls</span> /path/to/date*/name/*.zip 2&gt;/dev/null); <span class="hljs-keyword">do</span> unzip <span class="hljs-variable">$x</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ol start="15"><li><strong>获取文件元数据</strong></li></ol><ul><li>(-path &#x2F;proc -o -path…) -prune 用于去除各种无关的目录</li><li>printf 格式以 d 作为前缀，然后是八进制模式的文件权限、用户名、用户组等。</li><li>-type l 表示查找符号链接并显示每个链接的指向。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：archive_meta-data</span><br><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%b&quot;</span> <span class="hljs-string">&quot;Mode\tUser\tGroup\tBytes\tModified\tFileSpec\n&quot;</span> &gt; archive_file<br>find / \( -path /proc -o -path /mnt -o -path /tmp -o -path /var/tmp \<br>  -o -path /var/cache -o -path /var/spool \) -prune \<br>  -o -<span class="hljs-built_in">type</span> d -<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;d%m\t%u\t%g\t%s\t%t\t%p/\n&#x27;</span> \<br>  -o -<span class="hljs-built_in">type</span> l -<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;l%m\t%u\t%g\t%s\t%t\t%p -&gt; %l\n&#x27;</span> \<br>  -o -<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%m\t%u\t%g\t%s\t%t\t%p\n&#x27;</span> &gt;&gt; archive_file<br></code></pre></td></tr></table></figure><ol start="16"><li><strong>查找只出现在一个文件中的内容</strong></li></ol><p>命令 grep -vf right left 中，-f 选项将参数 right 视为模式文件，从中提取模式（一行一个模式）</p><p>uniq -u 能够显示出文件中独有的行</p><p>uniq -d 能够显示出同时在两个文件中出现的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> left<br>record_01<br>record_02.left only<br>record_03<br>record_05.differ<br>record_06<br>record_07<br>record_08<br>record_09<br>record_10<br><br>$ <span class="hljs-built_in">cat</span> right<br>record_01<br>record_02<br>record_04<br>record_05<br>record_06.differ<br>record_07<br>record_08<br>record_09.right only<br>record_10<br><br><span class="hljs-comment"># 仅显示出现在文件left中的行</span><br>$ <span class="hljs-built_in">comm</span> -23 left right<br>record_02.left only<br>record_03<br>record_05.differ<br>record_06<br>record_09<br><br><span class="hljs-comment"># 仅显示出现在文件right中的行</span><br>$ <span class="hljs-built_in">comm</span> -13 left right<br>record_02<br>record_04<br>record_05<br>record_06.differ<br>record_09.right only<br><br><span class="hljs-comment"># 仅显示同时出现在两个文件中的行</span><br>$ <span class="hljs-built_in">comm</span> -12 left right<br>record_01<br>record_07<br>record_08<br>record_10<br></code></pre></td></tr></table></figure><ol start="17"><li><strong>在目录间快速移动</strong></li></ol><ul><li>pushd</li><li>popd</li><li>dirs</li></ul><p>如果对一个新目录使用 pushd，那么它会将前一个目录压入栈中</p><p>如果使用 pushd 时没有指定目录，那么它会交换栈顶的两个目录的位置</p><p>当使用 popd 时，它会弹出栈顶保存的当前位置，切换到新的栈顶目录</p><p>如果不记得目录栈中都有哪些目录，可以使用内建命令 dirs 按照从左到右的顺序显示。加上 -v 选项后，显示形式更形象。</p><p>pushd +2 会将编号为 2 的目录置为栈顶（并切换到该目录）并将其他目录下压。</p><p>要想看到类似于栈的目录列表，但又不希望出现编号，可以使用 -p 选项</p><ol start="18"><li><strong>历史命令重用</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 重复上一次命令</span><br>!!<br><span class="hljs-comment">## 重复上一次命令的最后一个参数</span><br>!$<br><span class="hljs-comment">## 重复上一次命令的第1个参数</span><br>!:1<br><span class="hljs-comment">## 重复上一次命令的第2个参数，以此类推</span><br>!:2<br><br><span class="hljs-comment">## 使用脱字符（^）替换机制</span><br>$ /usr/bin/somewhere/someprog -g -A -yknot -w /tmp/soforthandsoon<br>...<br>$ ^-g -A^-gB^<br>/usr/bin/somewhere/someprog -gB -yknot -w /tmp/soforthandsoon<br>...<br><br><span class="hljs-comment">## 进行命令行内容替换时要以 ^ 起始，当你想在命令行最后添加更多文本时，结尾的（第 3 个）^才有必要。</span><br>$ /usr/bin/somewhere/someprog -g -A -yknot<br>...<br>$ ^-g -A^-gB^ /tmp^<br>/usr/bin/somewhere/someprog -gB -yknot /tmp<br>...<br><br><span class="hljs-comment">## 要想删除部分内容并将其替换为空值，可以像下面这样做。</span><br>$ /usr/bin/somewhere/someprog -g -A -yknot /tmp<br>...<br>$ ^-g -A^^<br>/usr/bin/somewhere/someprog -yknot /tmp<br>...<br>$ ^knot^<br>/usr/bin/somewhere/someprog -gA -y /tmp<br>...<br>$<br><br><span class="hljs-comment">## 用:替换</span><br><span class="hljs-comment">## 如果想修改命令行中出现的所有实例，则需要在 s 之前加上 g（以表示全局替换）</span><br>$ /usr/bin/somewhere/someprog -g -H -yknot -w /tmp/soforthandsoon<br>Error: -H not recognized. Did you mean -A?<br>$ !!:s/H/A/<br>/usr/bin/somewhere/someprog -g -A -yknot -w /tmp/soforthandsoon<br>...<br>$ !!:gs/s/S/<br>/usr/bin/Somewhere/Someprog -g -S -yknotS -w /tmp/SoforthandSoon<br>...<br>$<br><br><span class="hljs-comment">## 使用历史命令时，可以加入 :p 修饰符，这会使得 bash 只输出命令</span><br>$ <span class="hljs-built_in">rm</span> !$:p<br><span class="hljs-built_in">rm</span> ?b1.txt<br>$<br></code></pre></td></tr></table></figure><p>fc 命令可以将最近执行的命令（或者一批命令）保存在临时文件中，调用编辑器，并允许你按照适合的方式修改其中的命令，然后在退出编辑器时自动重新执行编辑过的命令。</p><p>如果调用 fc 时不带参数，则只使用最后一行。你也可以用参数指定某一行：fc 1004 会使用命令历史记录中编号为1004 的命令行，而 fc -5 会使用第 5 个最近的命令。也可以指定范围参数，例如，fc 1001 1005 允许编辑编号为 1001 到 1005 的命令行，fc -5 -1 允许编辑最近执行过的 5 个命令。</p><p>当你退出 fc 命令所调用的编辑器时，会重新执行临时文件中剩余的所有命令，即使未做任何改动，这时可以删除文件中的所有命令行，保存并退出。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux curl 基础用法</title>
    <link href="/2024/08/14/curl-action/"/>
    <url>/2024/08/14/curl-action/</url>
    
    <content type="html"><![CDATA[<h1 id="Curl-基础用法"><a href="#Curl-基础用法" class="headerlink" title="Curl 基础用法"></a>Curl 基础用法</h1><p>curl 是一个很全面的命令行浏览器，功能丰富</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul><li><p>-f&#x2F;–fail  在 HTTP 错误时返回非零状态码， echo $?, 不用-f即使HTTP错误状态码也为0</p></li><li><p>-s   静默输出</p></li><li><p>-S   输出错误消息，配合s使用，-sS，静默输出状态下也输出错误消息</p><p>  -sSf 返回错误状态码 如：curl: (22) The requested URL returned error: 400</p><p>  不加S不会显示错误输出</p></li><li><p>-k  忽略SSL证书验证</p></li><li><p>–connect-timeout: 设置连接超时的秒数。这是指从开始请求到完成 TCP 连接的时间限制。如果在指定时间内无法建立连接，curl 将会中止。</p></li><li><p>–max-time: 设置整个请求的最大时间（包括连接时间、传输时间等）。如果超过了这个时间，curl 将中止请求。</p></li><li><p>-H 添加header</p></li><li><p>-X GET&#x2F;POST  指定请求方法</p></li><li><p>-u username:passwd  指定账号密码</p></li><li><p>-d 发送POST请求时附带的数据</p></li><li><p>-v 详细模式发送请求</p></li><li><p>-o 将下载的文件保存为指定文件名</p></li><li><p>-O 保存为原始文件名</p></li><li><p>-F 上传文件  header使用 Content-Type multipart&#x2F;form-data</p></li><li><p>-C 断点续传</p></li><li><p>-I 显示响应码及源码</p></li><li><p>-i 只显示响应码</p></li><li><p>-c 记录cookie或session</p></li><li><p>-b 请求时使用携带的cookie</p></li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># post请求携带参数</span><br>curl -X POST -d <span class="hljs-string">&quot;key=value&quot;</span> http://127.0.0.1<br><br><span class="hljs-comment"># json 格式请求</span><br>curl -X POST -d <span class="hljs-string">&#x27;&#123;&quot;key&quot;: &quot;value&quot;&#125;&#x27;</span> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> http://127.0.0.1<br><br><span class="hljs-comment"># 访问 https时忽略证书 </span><br>curl -sSfL -k https://127.0.0.1<br><br><span class="hljs-comment"># 记录返回的cookie</span><br>curl -c cookies.txt -X POST -d <span class="hljs-string">&#x27;&#123;&quot;key&quot;: &quot;value&quot;&#125;&#x27;</span> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> http://127.0.0.1<br><br><span class="hljs-comment"># 请求时携带文件中的cookie值</span><br>curl -b cookies.txt -X POST -d <span class="hljs-string">&#x27;&#123;&quot;key&quot;: &quot;value&quot;&#125;&#x27;</span> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> http://127.0.0.1<br><br><span class="hljs-comment"># 表单上传文件</span><br>curl -X POST -F <span class="hljs-string">&quot;files=@/path/to/local/file&quot;</span> http://127.0.0.1/upload-files<br><br><span class="hljs-comment"># 如果请求返回是一个脚本，直接执行</span><br>curl -s http://127.0.0.1 -O- | bash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Docker本地仓库</title>
    <link href="/2024/08/11/docker-local-registry/"/>
    <url>/2024/08/11/docker-local-registry/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建Docker本地仓库"><a href="#搭建Docker本地仓库" class="headerlink" title="搭建Docker本地仓库"></a>搭建Docker本地仓库</h1><p>前提</p><ul><li>安装 docker</li><li>熟悉 docker环境及基本操作</li></ul><h2 id="容器化部署"><a href="#容器化部署" class="headerlink" title="容器化部署"></a>容器化部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 联网环境下</span><br><span class="hljs-comment"># 直接运行 registry镜像，本地没有会自动拉取</span><br>docker run -d -p 5000:5000 --name registry registry:2<br><br><span class="hljs-comment"># 内网环境</span><br><span class="hljs-comment"># 下载对应镜像 tar包传入内网环境</span><br><span class="hljs-comment"># 只有用save的镜像才能load导入，否则会报错</span><br>docker save registry:2 -o registry.tar<br>docker load -i registry.tar<br><br><span class="hljs-comment"># 也可将运行容器导出</span><br>docker <span class="hljs-built_in">export</span> 容器ID &gt; registry.tar<br><span class="hljs-comment"># 将打包容器导入</span><br><span class="hljs-comment"># 用export导出的容器，需要用import导入</span><br>docker import registry.tar localhost/registry:2<br><br><span class="hljs-comment">## 验证是否安装成功</span><br><span class="hljs-comment">## 返回 &#123;&#125;表示成功</span><br>curl -s http://localhost:5000/v2/<br></code></pre></td></tr></table></figure><h2 id="推送镜像到本地仓库"><a href="#推送镜像到本地仓库" class="headerlink" title="推送镜像到本地仓库"></a>推送镜像到本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 修改镜像tag为本地仓库地址</span><br>docker tag <span class="hljs-variable">$image</span> localhost:5000/<span class="hljs-variable">$image</span><br><br><span class="hljs-comment">## 推送到本地仓库</span><br>docker push localhost:5000/<span class="hljs-variable">$image</span><br><br><span class="hljs-comment">## 拉取本地仓库镜像</span><br>docker pull localhost:5000/<span class="hljs-variable">$image</span><br></code></pre></td></tr></table></figure><h2 id="持久化存储镜像"><a href="#持久化存储镜像" class="headerlink" title="持久化存储镜像"></a>持久化存储镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 5000:5000 --name registry -v /home/registry:/var/lib/registry registry:2<br></code></pre></td></tr></table></figure><h2 id="配置本地仓库HTTPS"><a href="#配置本地仓库HTTPS" class="headerlink" title="配置本地仓库HTTPS"></a>配置本地仓库HTTPS</h2><p>可以选择生成自签名证书或使用受信任的证书颁发机构 (CA) 签发的证书。</p><h3 id="生成自签名证书"><a href="#生成自签名证书" class="headerlink" title="生成自签名证书"></a>生成自签名证书</h3><ul><li><code>-newkey rsa:4096</code>：生成一个新的 RSA 私钥和证书请求，并使用 4096 位的密钥长度</li><li><code>-nodes</code>：指定不对生成的私钥进行加密。如果不使用这个选项，需要为私钥设置一个密码。对于自动化使用，通常不设置密码。</li><li><code>-sha256</code>：使用 SHA-256 哈希算法来生成证书。</li><li><code>-keyout certs/domain.key</code>：指定生成的私钥文件的输出路径。</li><li><code>-x509</code>：表示生成自签名的 X.509 证书。X.509 是一种标准格式，用于公钥证书。</li><li><code>-days 365</code>：设置证书的有效期为 365 天，过期后需要更新。</li><li><code>-out certs/domain.crt</code>：指定生成的自签名证书文件的输出路径。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /etc/certs<br><br>openssl req -newkey rsa:4096 -nodes -sha256 -keyout /etc/certs/domain.key -x509 -days 365 -out /etc/certs/domain.crt<br><span class="hljs-comment">## 运行完会提示需要输入一些信息</span><br><span class="hljs-comment">## Common Name是最重要的一个</span><br><span class="hljs-comment"># 需要填写服务器的完全限定域名 (FQDN) 或 IP 地址。</span><br><span class="hljs-comment"># 如果为 Registry 配置 HTTPS，必须匹配客户端将用来访问服务器的域名或 IP 地址</span><br><span class="hljs-comment"># 比如本地localhost或者127.0.0.1</span><br></code></pre></td></tr></table></figure><h3 id="registry-配置HTTPS"><a href="#registry-配置HTTPS" class="headerlink" title="registry 配置HTTPS"></a>registry 配置HTTPS</h3><ul><li><code>REGISTRY_HTTP_ADDR=0.0.0.0:443</code>：配置 Registry 监听 HTTPS 请求</li><li><code>REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt</code>：指定 SSL 证书路径</li><li><code>REGISTRY_HTTP_TLS_KEY=/certs/domain.key</code>：指定 SSL 私钥路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  -p 443:443 \<br>  --name registry \<br>  -v /etc/certs:/certs \<br>  -v /home/registry:/var/lib/registry \<br>  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \<br>  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \<br>  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \<br>  registry:2<br></code></pre></td></tr></table></figure><h3 id="配置-Docker-客户端信任自签名证书"><a href="#配置-Docker-客户端信任自签名证书" class="headerlink" title="配置 Docker 客户端信任自签名证书"></a>配置 Docker 客户端信任自签名证书</h3><p>如果使用的是自签名证书，Docker 客户端默认不会信任你生成的证书。</p><p>需要将证书添加到 Docker 的信任列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 之前生成证书 common name填的 localhost，因此在此处创建localhost</span><br><span class="hljs-built_in">mkdir</span> -p /etc/docker/certs.d/localhost<br><span class="hljs-built_in">cp</span> /etc/certs/domain.crt /etc/docker/certs.d/localhost/ca.crt<br></code></pre></td></tr></table></figure><h3 id="配置客户端的-insecure-registries"><a href="#配置客户端的-insecure-registries" class="headerlink" title="配置客户端的 insecure-registries"></a>配置客户端的 insecure-registries</h3><p>如果不想配置证书，可以将 Registry 配置为 insecure-registry，但不推荐在生产环境中使用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;insecure-registries&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>重启docker即可生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL -k https://localhost:443/v2/<br></code></pre></td></tr></table></figure><h3 id="使用反向代理"><a href="#使用反向代理" class="headerlink" title="使用反向代理"></a>使用反向代理</h3><p>可以使用反向代理来处理 HTTPS，而 Registry继续使用 HTTP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>    listen 443 ssl;<br>    server_name yourdomain.com;<br><br>    ssl_certificate /etc/nginx/certs/domain.crt;<br>    ssl_certificate_key /etc/nginx/certs/domain.key;<br><br>    location / &#123;<br>        proxy_pass http://localhost:5000;<br>        # 容器化部署时改为容器名 <br>        proxy_pass http://registry:5000;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>容器化 nginx反向代理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建一个 bridge网络</span><br>docker create network proxy_network<br><span class="hljs-comment">## 启动时 nginx和 registry两个容器都指定 proxy_network 网络</span><br>docker run -d --name nginx --network proxy_network -p 443:443 -v ~/nginx.conf:/etc/nginx/nginx.conf -v /etc/certs/:/etc/nginx/certs nginx:latest<br></code></pre></td></tr></table></figure><h2 id="设置仓库登陆认证"><a href="#设置仓库登陆认证" class="headerlink" title="设置仓库登陆认证"></a>设置仓库登陆认证</h2><h3 id="安装-htpasswd"><a href="#安装-htpasswd" class="headerlink" title="安装 htpasswd"></a>安装 htpasswd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install apache2-utils<br><span class="hljs-built_in">sudo</span> yum install httpd-tools<br></code></pre></td></tr></table></figure><h3 id="创建认证文件"><a href="#创建认证文件" class="headerlink" title="创建认证文件"></a>创建认证文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /etc/auth<br>htpasswd -Bc /etc/auth/htpasswd myuser<br><span class="hljs-comment">## -B：使用 bcrypt 加密算法</span><br><span class="hljs-comment">## -c：创建一个新的文件</span><br><span class="hljs-comment">## /etc/auth/htpasswd：保存用户名和密码的文件路径。</span><br><br><span class="hljs-comment">## 如果需要添加更多用户，不加 -c</span><br>htpasswd -B /etc/auth/htpasswd anotheruser<br></code></pre></td></tr></table></figure><h3 id="配置-Registry登陆认证"><a href="#配置-Registry登陆认证" class="headerlink" title="配置 Registry登陆认证"></a>配置 Registry登陆认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  -p 5000:5000 \<br>  --name registry \<br>  -v /etc/auth:/auth \<br>  -e <span class="hljs-string">&quot;REGISTRY_AUTH=htpasswd&quot;</span> \<br>  -e <span class="hljs-string">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> \<br>  -e <span class="hljs-string">&quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot;</span> \<br>  -v /home/registry:/var/lib/registry \<br>  registry:2<br><span class="hljs-comment"># REGISTRY_AUTH=htpasswd：启用 htpasswd 认证</span><br><span class="hljs-comment"># REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm：设置认证领域（可以随意设定）</span><br><span class="hljs-comment"># REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd：指定 htpasswd 文件的路径。</span><br><br><span class="hljs-comment">## 验证</span><br>docker login localhost:5000<br></code></pre></td></tr></table></figure><h2 id="通过api查看本地镜像"><a href="#通过api查看本地镜像" class="headerlink" title="通过api查看本地镜像"></a>通过api查看本地镜像</h2><blockquote><p>api 返回的信息为 json格式，可以配合linux的 <code>jq</code>命令进行筛选查看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 获取所有镜像的名称</span><br>curl -sSL -k http://localhost:5000/v2/_catalog | jq<br><br><span class="hljs-comment">## 返回输出</span><br>&#123;<br>  <span class="hljs-string">&quot;repositories&quot;</span>: [<br>    <span class="hljs-string">&quot;my-image1&quot;</span>,<br>    <span class="hljs-string">&quot;my-image2&quot;</span><br>  ]<br>&#125;<br><br><span class="hljs-comment">## 设置认证后需要修改为如下命令，配合 jq使用提取信息 </span><br>curl -sSL -k -u <span class="hljs-variable">$username</span>:<span class="hljs-variable">$passwd</span> http://127.0.0.1:5000/v2/_catalog |jq -r <span class="hljs-string">&quot;.repositories[]&quot;</span><br><br><span class="hljs-comment">## 获取每个镜像的标签</span><br>curl http://localhost:5000/v2/<span class="hljs-variable">$image</span>/tags/list<br>curl -sSL -k -u <span class="hljs-variable">$username</span>:<span class="hljs-variable">$passwd</span> http://127.0.0.1:5000/v2/<span class="hljs-variable">$image</span>/tags/list<br><br><span class="hljs-comment">## 镜像的新版本会靠前显示</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;my-image1&quot;</span>,<br>  <span class="hljs-string">&quot;tags&quot;</span>: [<br>    <span class="hljs-string">&quot;latest&quot;</span>,<br>    <span class="hljs-string">&quot;v2.0&quot;</span>,<br>    <span class="hljs-string">&quot;v1.0&quot;</span><br>  ]<br>&#125;<br><br><span class="hljs-comment">## 获取 digest信息</span><br>curl -u <span class="hljs-variable">$username</span>:<span class="hljs-variable">$passwd</span> -sSL -H <span class="hljs-string">&quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot;</span> http://127.0.0.1:5000/v2/<span class="hljs-variable">$image</span>/manifests/<span class="hljs-variable">$tag</span> | jq -r <span class="hljs-string">&quot;.config.digest&quot;</span><br><br><span class="hljs-comment">## 通过delete方法删除对应镜像的 tag</span><br>curl -sSLf -k -X DELETE -u <span class="hljs-variable">$username</span>:<span class="hljs-variable">$passwd</span> http://127.0.0.1:5000/v2/<span class="hljs-variable">$image</span>/manifests/<span class="hljs-variable">$digest</span><br><br><span class="hljs-comment">## 清理未被引用的blobs</span><br>registry garbage-collect -m /etc/docker/registry/config.yml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 实用技巧（二）</title>
    <link href="/2024/08/07/shell-action-2/"/>
    <url>/2024/08/07/shell-action-2/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell-实用技巧"><a href="#Shell-实用技巧" class="headerlink" title="Shell 实用技巧"></a>Shell 实用技巧</h2><ol><li><strong>创建简单的菜单</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：dbinit.1</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">## 修改提示符</span><br><span class="hljs-comment">## PS1 命令行提示符</span><br><span class="hljs-comment">## PS2 续行提示符</span><br><span class="hljs-comment">## PS3 select提示符</span><br>DBLIST=$(sh ./listdb | <span class="hljs-built_in">tail</span> -n +2)<br><br>PS3=<span class="hljs-string">&quot;0 inits &gt;&quot;</span><br><br><span class="hljs-keyword">select</span> DB <span class="hljs-keyword">in</span> <span class="hljs-variable">$DBLIST</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$DB</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> Initializing database: <span class="hljs-variable">$DB</span><br><br>        PS3=<span class="hljs-string">&quot;<span class="hljs-subst">$((++i)</span>) inits&gt; &quot;</span><br><br>        mysql -u user -p <span class="hljs-variable">$DB</span> &lt;myinit.sql<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>简单的RPN计算器</strong><blockquote><p>6RPN（Reverse Polish notation，逆波兰表示法或逆波兰记法）是一种由波兰数学家扬 • 武卡谢维奇于1920 年引入的数学表达式方式。在逆波兰记法中，所有运算符都置于操作数的后面，因此也被称为后缀表示法。逆波兰记法不需要括号来标识运算符的优先级。</p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：rpncalc</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 简单的RPN命令行（整数）计算器</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 获取用户提供的参数并计算</span><br><span class="hljs-comment"># 参数形式为：a b运算符</span><br><span class="hljs-comment"># 允许使用*x*代替*</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 检查参数数量：</span><br><span class="hljs-keyword">if</span> [ \( <span class="hljs-variable">$#</span> -lt 3 \) -o \( $((<span class="hljs-variable">$#</span> % <span class="hljs-number">2</span>)) -eq 0 \) ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;usage: calc number number op [ number op ] ...&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;use x or &#x27;*&#x27; for multiplication&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>ANS=$((<span class="hljs-variable">$1</span> <span class="hljs-variable">$&#123;3//x/*&#125;</span> <span class="hljs-variable">$2</span>))<br><span class="hljs-built_in">shift</span> 3<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$#</span> -gt 0 ]<br><span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 在 $(( )) 中，除了位置参数（如 $1、$2）​，变量名前面并不需要加 $</span><br>    ANS=$((ANS <span class="hljs-variable">$&#123;2//x/*&#125;</span> <span class="hljs-variable">$1</span>))<br>    <span class="hljs-built_in">shift</span> 2<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$ANS</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>浮点数计算</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 实例文件：func_calc</span><br><br><span class="hljs-comment"># 简单的命令行计算器</span><br><span class="hljs-keyword">function</span> calc &#123;<br>    <span class="hljs-comment"># 仅适用于整数！--&gt; echo The answer is: $(( $* ))</span><br>    <span class="hljs-comment"># 浮点数</span><br>    awk <span class="hljs-string">&quot;BEGIN &#123;print \&quot;The answer is: \&quot; $* &#125;&quot;</span>;<br>&#125; <span class="hljs-comment"># 函数calc定义完毕</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p><strong>正则模式</strong></p><ul><li><code>.</code>匹配任意单个字符</li><li>星号<code>*</code>匹配上一个字符的 0 次或多次出现<ul><li><code>.*</code> 匹配 0 个或多个任意字符,甚至是空行</li><li><code>..*</code> 匹配任意单个字符以及紧随其后的 0 个或多个任意字符,也就是一个或多个字符，但不能是空行</li></ul></li><li>脱字符 <code>^</code> 匹配文本行的行首位置</li><li>美元符号 <code>$</code> 匹配文本行的行尾位置，因此 <code>^$</code> 匹配空行</li><li>方括号<code>[]</code>中的一组字符匹配其中任意某个字符</li><li>如果方括号内的第一个字符是脱字符<code>[^abcd]</code>，则匹配的是<strong>不在该字符组中的</strong>任意字符</li><li><code>&#123;&#125;</code> 区间表达式<ul><li><code>\&#123;n,m\&#125;</code>n 是重复的最小次数，m 是重复的最大次数</li><li><code>\&#123;n\&#125;</code>，则表示“只重复 n 次”​</li><li><code>\&#123;n,\&#125;</code>，则表示“至少重复 n 次”​</li></ul></li></ul></li><li><p><strong>搜索压缩文件</strong></p><ul><li>zcat</li><li>zgrep</li></ul></li><li><p><strong>awk</strong></p><ul><li><p>反转每行单词</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    for (i=NF; i&gt;=0; i--) &#123;</span><br><span class="hljs-string">        printf &quot;%s &quot;, $i;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    printf &quot;\n&quot;</span><br><span class="hljs-string">&#125;&#x27;</span> &lt;filename&gt;<br></code></pre></td></tr></table></figure></li><li><p>汇总数字列表</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## next 命令，它会停止处理该输入行，并从下一行输入重新开始</span><br><span class="hljs-built_in">ls</span> -l | awk <span class="hljs-string">&#x27;/^total/&#123;next&#125; &#123;sum += $5&#125;; END &#123;print sum&#125;&#x27;</span><br><br><span class="hljs-comment">## tail +2 可实现同样的效果</span><br><span class="hljs-built_in">ls</span> -l | <span class="hljs-built_in">tail</span> +2 | awk <span class="hljs-string">&#x27;/^total/&#123;next&#125; &#123;sum += $5&#125;; END &#123;print sum&#125;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>统计字符串出现次数</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/usr/bin/awk -f</span><br><span class="hljs-comment"># 实例文件：asar.awk</span><br><span class="hljs-comment"># Awk关联数组</span><br><span class="hljs-comment"># 用法：ls -lR /usr/local | asar.awk</span><br><br>NF &gt; <span class="hljs-number">7</span> &#123;<br>    <span class="hljs-comment">## 变量初始为空</span><br>    <span class="hljs-comment">## ++ 变为 1</span><br>    user[<span class="hljs-variable">$3</span>]++<br>&#125;<br><br><span class="hljs-keyword">END</span> &#123;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> user) &#123;<br>        printf <span class="hljs-string">&quot;%s owns %d files\n&quot;</span>, i, user[i]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -lR /usr/local | awk -f asar.awk<br>bin owns 68 files<br>albing owns 1801 files<br>root owns 13755 files<br>man owns 11491 files<br>$<br></code></pre></td></tr></table></figure></li><li><p>输出直方图</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/usr/bin/awk -f</span><br><span class="hljs-comment"># 实例文件：hist.awk</span><br><span class="hljs-comment"># 用Awk生成直方图</span><br><span class="hljs-comment"># 用法：ls -lR /usr/local | hist.awk</span><br><br><span class="hljs-keyword">function</span> max(arr, big)<br>&#123;<br>    big = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> user)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (user[i] &gt; big) &#123; big=user[i];&#125;<br>    &#125;<br>    return big<br>&#125;<br><br>NF &gt; <span class="hljs-number">7</span> &#123;<br>    user[<span class="hljs-variable">$3</span>]++<br>&#125;<br><span class="hljs-keyword">END</span> &#123;<br>    <span class="hljs-comment"># 进行缩放</span><br>    maxm = max(user);<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> user) &#123;<br>        <span class="hljs-comment">#printf &quot;%s owns %d files\n&quot;, i, user[i]</span><br>        scaled = <span class="hljs-number">60</span> * user[i] / maxm ;<br>        printf <span class="hljs-string">&quot;%-10.10s [%8d]:&quot;</span>, i, user[i]<br>        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;scaled; i++) &#123;<br>            printf <span class="hljs-string">&quot;#&quot;</span>;<br>        &#125;<br>        printf <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出匹配词之后的文本</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> para.awk<br>/keyphrase/ &#123; flag=1 &#125;<br>flag == 1 &#123; <span class="hljs-built_in">print</span> &#125;<br>/^$/ &#123; flag=0 &#125;<br><br>$ awk -f para.awk &lt; searchthis.txt<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>bash 关联数组</strong></p></li></ol><blockquote><p>其他语言中也称为散列或字典</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 实例文件：cnt_owner</span><br><span class="hljs-comment"># 使用bash统计文件所有者</span><br><span class="hljs-comment"># 将“ls -l”的输出通过管道传入该脚本</span><br><br><span class="hljs-comment">## 定义关联数组</span><br><span class="hljs-built_in">declare</span> -A AACOUNT<br><span class="hljs-comment">## -a 后的变量会被认为是数组，默认以空格为分割符</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span>  -a LSL<br><span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 只考虑包含7个及以上字段的行</span><br>    <span class="hljs-keyword">if</span> (( <span class="hljs-variable">$&#123;#LSL[*]&#125;</span> &gt; <span class="hljs-number">7</span> ))         <span class="hljs-comment"># 数组大小</span><br>    <span class="hljs-keyword">then</span><br>        NDX=<span class="hljs-variable">$&#123;LSL[3]&#125;</span>               <span class="hljs-comment"># 字符串赋值</span><br>        (( AACOUNT[<span class="hljs-variable">$&#123;NDX&#125;</span>] += <span class="hljs-number">1</span> ))  <span class="hljs-comment"># 算术递增</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">## $&#123;AACOUNT[@]&#125; 会生成数组所有元素值的列表，如果加上惊叹号变成$&#123;!AACOUNT[@]&#125;，则得到的是该数组所有索引的列表。</span><br><span class="hljs-keyword">for</span> VALS <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;!AACOUNT[@]&#125;</span>&quot;</span>        <span class="hljs-comment"># 各个元素的索引</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$VALS</span> <span class="hljs-string">&quot;owns&quot;</span> <span class="hljs-variable">$&#123;AACOUNT[$VALS]&#125;</span> <span class="hljs-string">&quot;files&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ol start="8"><li><strong>sort 排序</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> -r <span class="hljs-comment"># reverse</span><br><span class="hljs-built_in">sort</span> -f <span class="hljs-comment"># 不区分大小写</span><br><span class="hljs-built_in">sort</span> -n <span class="hljs-comment"># 数值排序</span><br><span class="hljs-built_in">sort</span> -u <span class="hljs-comment"># 去掉重复输出</span><br></code></pre></td></tr></table></figure></li></ol><p>如果配合 <code>uniq -c</code> 使用，<code>sort -rn</code> 可以非常方便地给出一个按照降序排列的列表。</p><blockquote><p>uniq -d  只查看重复行</p></blockquote><ul><li><p>IP地址排序</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## -t 选项用于指定字段之间的分隔符</span><br>$ <span class="hljs-built_in">sort</span> -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n ipaddr.list<br>10.0.0.2<br>10.0.0.5<br>10.0.0.20<br>192.168.0.2<br>192.168.0.4<br>192.168.0.12<br></code></pre></td></tr></table></figure></li></ul><ol start="9"><li><p><strong>tr</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;;:.!?&#x27;</span> <span class="hljs-string">&#x27;,&#x27;</span> &lt;other.punct &gt;commas.all<br><span class="hljs-comment"># 将大写字母转换为小写字母</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;A-Z&#x27;</span> <span class="hljs-string">&#x27;a-z&#x27;</span> &lt;be.fore &gt;af.ter<br><span class="hljs-comment"># 删除所有回车符</span><br><span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\r&#x27;</span> &lt;file.dos &gt;file.txt<br></code></pre></td></tr></table></figure></li><li><p><strong>wc</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">wc</span> data_file<br>5     15     60 data_file<br><span class="hljs-comment"># 只显示行数</span><br>$ <span class="hljs-built_in">wc</span> -l data_file<br>5 data_file<br><br><span class="hljs-comment"># 只显示单词数</span><br>$ <span class="hljs-built_in">wc</span> -w data_file<br>15 data_file<br><br><span class="hljs-comment"># 只显示字符数（通常等同于字节数）</span><br>$ <span class="hljs-built_in">wc</span> -c data_file<br>60 data_file<br><br><span class="hljs-comment">## 输出数字及文件名</span><br><span class="hljs-built_in">wc</span> -l data_file<br><span class="hljs-comment">## 只输出数字</span><br><span class="hljs-built_in">wc</span> -l &lt; data_file<br><span class="hljs-comment"># 虽然也能只输出数字，但是cat增加了脚本运行开销</span><br><span class="hljs-built_in">cat</span> data_file | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li><li><p><strong>find</strong></p><ul><li><code>-delete</code></li><li><code>-newermt</code></li><li><code>-mtime</code></li><li><code>-size</code></li><li><code>-print0</code> 往往配合 <code>xargs -0</code></li><li><code>-type</code></li><li><code>-exec</code> <blockquote><p>文件大小还包含了单位 k（千字节）​。如果单位是 c，则表示字节（或字符）​。如果使用 b 作为单位或者不写任何单位，则表示块。 <br>对于碰到的每个文件，先测试其是否为目录，如果是，才测试名称是否符合模式。 <br>所以 type放到name前面使用能略微提高搜索效率。</p></blockquote></li></ul></li><li><p><strong>locate</strong></p></li><li><p><strong>查找命令</strong></p><ul><li><code>which</code><ul><li>在各版本linux表现不同，且不是内建命令</li></ul></li><li><code>type -P</code><ul><li>shell内建命令，命令不存在时不会输出错误消息，脚本中建议用</li></ul></li><li><code>command -v/-V</code><ul><li>shell内建命令，<code>v</code>找不到时不输出错误消息，<code>V</code>找不到时输出错误消息</li></ul></li></ul></li><li><p><strong>函数参数及返回值</strong></p><ul><li>向函数内部的变量赋值</li><li>用<code>echo</code>或<code>printf</code>将输出发送到标准输出，并用<code>$()</code>或者<code>``</code>调用函数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 实例文件：func_max.1</span><br><br><span class="hljs-comment"># 定义函数：</span><br><span class="hljs-comment">## 函数内部没有用local声明的变量都是全局变量</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">max</span></span> ()<br>&#123;<br>    <span class="hljs-built_in">local</span> HIDN<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> -gt <span class="hljs-variable">$2</span> ]<br>    <span class="hljs-keyword">then</span><br>        BIGR=<span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">else</span><br>        BIGR=<span class="hljs-variable">$2</span><br>    <span class="hljs-keyword">fi</span><br>    HIDN=5<br>&#125;<br><br><span class="hljs-comment"># 实例文件：func_max.2</span><br><br><span class="hljs-comment"># 定义函数：</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">max</span></span> ()<br>&#123;<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> -gt <span class="hljs-variable">$2</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$2</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-comment"># 调用函数</span><br>max 10 20<br><span class="hljs-comment"># 调用函数并将结果赋值给变量</span><br>BIGR=$(max 10 20)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$BIGR</span><br><span class="hljs-comment"># 调用函数并将结果赋值给变量</span><br>BIGR=`max 10 20`<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$BIGR</span><br></code></pre></td></tr></table></figure><blockquote><p>在函数中引用参数也是使用 $1、$2 等。但是，$0 保持不变，其中包含的还是所调用脚本的名称。</p><p>$FUNCNAME 本身引用的是该数组的第 0 个元素，其中包含的是当前执行函数的名称。</p><p>$FUNCNAME 仅存在于函数执行期间。</p></blockquote></li></ul></li><li><p><strong>信号捕获</strong><br>其实<code>-SIGKILL（-9）</code>无法捕获。该信号可以立刻“杀死”进程，压根没机会捕获。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 列出所有可捕获的信号</span><br><span class="hljs-built_in">trap</span> -l<br><br><span class="hljs-comment">## 第一个参数填捕获到对应信号后的行为</span><br><span class="hljs-comment">## 比如捕获退出信号时清理临时文件</span><br><span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;Clean tmp files&quot;</span> EXIT<br><br><span class="hljs-comment">## 如果命令是被信号 signal number 终止的，则脚本的退出状态码为 128+signal number。</span><br></code></pre></td></tr></table></figure></li><li><p><strong>alias</strong></p><ul><li><code>&#39;&#39;</code> 单引号包括的变量会在执行别名命令时生效变量值</li><li><code>&quot;&quot;</code> 双引号包括的变量，在设置别名时就会使值生效，写死<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 删除别名 h</span><br><span class="hljs-comment">## \ 可以使别名失效，防止有人将unalias命令设置成别名，如果有人将其设置为 : 就会使其失效</span><br>\<span class="hljs-built_in">unalias</span> h<br><span class="hljs-comment">## 删除所有别名</span><br><span class="hljs-built_in">unalias</span> -a <br><span class="hljs-comment"># 定义别名时不允许使用参数，如 $1, $2</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>避开别名和函数</strong></p><ul><li>使用 bash shell 的 builtin 命令来忽略 shell 函数和别名，执行实际的内建命令。</li><li>使用 <code>command</code> 命令来忽略 shell 函数和别名，并执行实际的外部命令。</li><li>如果只是想避开别名扩展，但仍允许执行函数，在命令前加上 <code>\</code> 前缀即可。<blockquote><p>type -a cmd 会显示所有包含cmd命令的地方，如果是函数，还会显示出函数代码</p></blockquote></li></ul></li><li><p><strong>计算已过去的时间</strong></p><ul><li>使用内建命令 <code>time</code> 或 bash 变量 <code>$SECONDS</code></li><li><code>$SECONDS</code> 会记录 shell 启动以来的时长（秒数）​。如果为其赋值，那么随后在扩展该变量时，得到的值就是先前的赋值与赋值操作以后的时长（秒数）之和。</li></ul></li><li><p><strong>自定义文件描述符及重定向</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将标准输出定向到 out.log文件</span><br><span class="hljs-built_in">exec</span> 1&gt; out.log<br><span class="hljs-comment"># 将错误输出重定向标准输出</span><br><span class="hljs-built_in">exec</span> 2&gt;&amp;1<br><span class="hljs-comment"># 定义文件描述符 3 输出到other.log文件</span><br><span class="hljs-built_in">exec</span> 3&gt; other.log<br><span class="hljs-comment"># 关闭文件描述符 3</span><br><span class="hljs-built_in">exec</span> 3&gt;&amp;- <br><br><span class="hljs-comment">## 函数也可重定向输出</span><br><span class="hljs-comment"># 根据传进参数会分别进行输出，无需写迭代循环</span><br><span class="hljs-function"><span class="hljs-title">ERROUT</span></span>()&#123;<br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Error: %b\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br>&#125; &gt;&amp;2<br><span class="hljs-comment">## printf 小技巧</span><br><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;a b c&quot;</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Print %b\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;test[@]&#125;</span>&quot;</span><br><span class="hljs-comment">## 会打印三条输出</span><br><br></code></pre></td></tr></table></figure><p>重定向的顺序通常很重要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 标准输出被重定向到文件 my.file，然后标准错误被重定向到和标准输出相同的地方。所有的输出都会出现在 my.file 中</span><br>somecmd &gt;my.file 2&gt;&amp;1<br><span class="hljs-comment"># 标准错误被重定向到标准输出（此时标准输出指向的是屏幕）​，然后标准输出被重定向到 my.file。因此，只有标准输出消息会出现在文件中，而错误消息仍旧会出现在屏幕上。</span><br>somecmd 2&gt;&amp;1 &gt;my.file<br><br>somecmd 2&gt;&amp;1 | othercmd<br><span class="hljs-comment"># bash 4.x 版本中的一种便捷语法可以同时将标准输出和标准错误连入管道。</span><br>somecmd |&amp; othercmd<br></code></pre></td></tr></table></figure></li><li><p><strong>处理日期和时间</strong></p><ul><li><code>date</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将日期转为纪元秒格式</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;20230113&quot;</span> <span class="hljs-string">&quot;+%s&quot;</span> <br><span class="hljs-comment"># 纪元秒格式转换需要加 @符号</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;@1673000000&quot;</span><br><br><span class="hljs-comment"># 更多形式查阅其他文档</span><br><span class="hljs-built_in">date</span> <span class="hljs-string">&#x27;+%Y-%m-%d %H:%M:%S %z&#x27;</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;today&#x27;</span> <span class="hljs-string">&#x27;+%Y-%m-%d %H:%M:%S %z&#x27;</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;tomorrow&#x27;</span> <span class="hljs-string">&#x27;+%Y-%m-%d %H:%M:%S %z&#x27;</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;yesterday&#x27;</span> <span class="hljs-string">&#x27;+%Y-%m-%d %H:%M:%S %z&#x27;</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;1 day ago&#x27;</span> <span class="hljs-string">&#x27;+%Y-%m-%d %H:%M:%S %z&#x27;</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&#x27;-1 days&#x27;</span> <span class="hljs-string">&#x27;+%Y-%m-%d %H:</span><br><span class="hljs-string">%M:%S %z&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>printf</code><ul><li><code>printf</code> 有一个二进制版本</li><li>这里的<code>printf</code>指的是bash内建版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出日期</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%(%F %T)T\n&#x27;</span> <span class="hljs-string">&#x27;-1&#x27;</span><br><span class="hljs-comment"># 可以为变量赋值</span><br><span class="hljs-built_in">printf</span> -v today <span class="hljs-string">&#x27;%(%F)T&#x27;</span> <span class="hljs-string">&#x27;-1&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$today</span><br><span class="hljs-comment"># 有两个特殊的参数值可以使用：-1代表当前时间，-2 代表 shell 被调用的时间。</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>比较文件</strong></p><ul><li>比较纯文本文件</li><li>比较二进制文件</li></ul><p>通用方法：<br>以上两种文件都可以通过计算sha值来确认是否相同。</p><p>比较纯文本文件比较简单，直接使用 <code>diff</code> 命令即可。<br>diff 常用选项：</p><ul><li><code>-b</code> 忽略空白行</li><li><code>-c</code> 显示差异的上下文</li><li><code>-u</code> 显示差异的上下文，并且显示差异的行号</li><li><code>-y</code> 显示差异的上下行</li><li><code>-B</code> 忽略大小写</li><li><code>-i</code> 忽略大小写</li><li><code>-q</code> 不显示差异的上下文</li><li><code>-r</code> 递归比较目录</li></ul><p>diff 比较二进制文件不会显示太多信息，只会告诉两个文件不一样，需要使用 <code>cmp</code> 命令。</p><p>或者通过解压word文档，用解压出来的xml文件进行对比。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 此行 sed可以将每个&lt;&gt;替换为自身加上换行符，从而将包含内容的行独立出来</span><br>sed -e <span class="hljs-string">&#x27;s/&gt;/&gt;\</span><br><span class="hljs-string">/g; s/&lt;/\</span><br><span class="hljs-string">&lt;/g&#x27;</span> document.xml &gt; word.xml<br></code></pre></td></tr></table></figure><blockquote><p>word文档实际上是由里面的图片和xml文件压缩所得，可以尝试用zip解压出来看看</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 实用技巧（一）</title>
    <link href="/2024/08/06/shell-action/"/>
    <url>/2024/08/06/shell-action/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-实用技巧"><a href="#Shell-实用技巧" class="headerlink" title="Shell 实用技巧"></a>Shell 实用技巧</h1><ol><li><p><strong>保存多个命令的输出</strong></p><ul><li>使用<code>&#123;&#125;</code>将命令组合在一起，然后重定向<ul><li>花括号实际上是保留字，两侧必须有空白字符，闭合括号前面的命令的分号不能少</li></ul></li><li>使用<code>()</code>将命令放入子shell重定向输出</li></ul><p> 用子shell的方式不会改变当前shell的环境，比如下面的命令组包含<code>cd ..</code>，在用花括号的方式中会切换当前路径，而子shell方式中不会切换当前shell的路径，所有的命令都在子shell当中执行，不影响当前shell环境。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 可以用&#123;&#125; or ()</span><br>&#123; <span class="hljs-built_in">ls</span>; <span class="hljs-built_in">cd</span> ..; <span class="hljs-built_in">pwd</span>; <span class="hljs-built_in">ls</span>; &#125; &gt; /tmp/all.out<br>(<span class="hljs-built_in">ls</span>; <span class="hljs-built_in">cd</span> ..; <span class="hljs-built_in">pwd</span>; <span class="hljs-built_in">ls</span>) &gt; /tmp/all.out<br><br><span class="hljs-built_in">test</span> <span class="hljs-variable">$result</span> -eq 1 &amp;&amp; &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Result&quot;</span> is 1; <span class="hljs-built_in">exit</span> 0; &#125; \<br>    || &#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Run Away!&quot;</span>; <span class="hljs-built_in">exit</span> 120; &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>跳过文件标题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 显示后十行</span><br><span class="hljs-built_in">tail</span> -n 10<br><span class="hljs-built_in">tail</span> -10 <br><span class="hljs-comment">## 跳过第一行, 可用于一些跳过标题的情况</span><br><span class="hljs-built_in">tail</span> -n +2<br></code></pre></td></tr></table></figure></li><li><p><strong>使用或替换内建命令与外部命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## type 可查看命令属于哪种,builtin属于内建命令</span><br>root@localhost:~# <span class="hljs-built_in">type</span> <span class="hljs-built_in">cd</span><br><span class="hljs-built_in">cd</span> is a shell <span class="hljs-built_in">builtin</span><br><br><span class="hljs-comment">## 可查看有哪些内建命令</span><br><span class="hljs-built_in">enable</span> -a<br><span class="hljs-comment">## 关闭shell内建命令</span><br><span class="hljs-built_in">enable</span> -n <span class="hljs-variable">$cmd</span><br><span class="hljs-comment">## 忽略shell函数的ls,执行内建ls命令</span><br><span class="hljs-built_in">command</span> <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure></li><li><p><strong>交换STDERR和STDOUT</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./myscript 3&gt;&amp;1 1&gt;&amp;2 2&gt;&amp;3<br><br><span class="hljs-comment">## 操作完成后关闭文件描述符3</span><br>./myscript 3&gt;&amp;1 1&gt;stdout.logfile 2&gt;&amp;3- | <span class="hljs-built_in">tee</span> -a stderr.logfile<br></code></pre></td></tr></table></figure></li><li><p><strong>避免意外覆盖文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 告诉bash重定向输出时不要覆盖任何现有文件</span><br><span class="hljs-built_in">set</span> -o noclobber<br><span class="hljs-comment">## 关闭该选项</span><br><span class="hljs-built_in">set</span> +o noclobber<br><span class="hljs-comment">## 使用 &gt;| 重定向输出。即便是设置了 noclobber，bash 也会忽略该选项，并覆盖文件</span><br><span class="hljs-built_in">echo</span> rewrite &gt;| tmp.txt<br></code></pre></td></tr></table></figure><blockquote><p>noclobber 选项仅针对 shell 重定向输出时的文件覆盖行为。它并不能阻止其他程序覆盖文件</p></blockquote></li><li><p><strong>将数据与脚本存放在一起</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> ext<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 下面是here-document</span><br><span class="hljs-comment">#</span><br>grep <span class="hljs-variable">$1</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">mike x.123</span><br><span class="hljs-string">joe  x.234</span><br><span class="hljs-string">sue  x.555</span><br><span class="hljs-string">pete x.818</span><br><span class="hljs-string">sara x.822</span><br><span class="hljs-string">bill x.919</span><br><span class="hljs-string">EOF</span><br><br>$ <span class="hljs-built_in">cat</span> donors<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 里面的$100中的$1会被误解释为参数$1, 因此需要加&#x27;&#x27;或\EOF</span><br><span class="hljs-comment"># </span><br>grep <span class="hljs-variable">$1</span> &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment"># 捐赠人及其捐赠额</span><br>pete <span class="hljs-variable">$100</span><br>joe  <span class="hljs-variable">$200</span><br>sam  $ 25<br>bill $ 9<br>EOF<br><br>$ <span class="hljs-built_in">cat</span> myscript.sh<br><span class="hljs-comment">## 使用 &lt;&lt;-，然后就可以在每行的开头用制表符（仅限制表符！）缩进shell 脚本中的 here-document 部分</span><br>...<br>    grep <span class="hljs-variable">$1</span> &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>        lots of data<br>        can go here<br>        it<span class="hljs-string">&#x27;s indented with tabs</span><br><span class="hljs-string">        to match the script&#x27;</span>s indenting<br>        but the leading tabs are<br>        discarded when <span class="hljs-built_in">read</span><br>        EOF<br>    <span class="hljs-built_in">ls</span><br>...<br></code></pre></td></tr></table></figure></li><li><p><strong>until, select</strong></p><p> until 循环用于在条件为假时重复执行一组命令。与 while 循环相反，它在每次迭代开始时检查条件。</p><p> select 循环用于创建一个简单的菜单选择。它会显示一个菜单并等待用户输入选择，然后根据选择执行相应的命令。<br> select 语句能够轻松地在 STDERR 上为用户生成编号列表。<br> 用户所输入的选项编号保存在 $REPLY 中，选项值保存在 select 语句指定的变量中。</p></li><li><p><strong>同时执行多个命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 3 个命令的输出会在屏幕上交错出现</span><br><span class="hljs-comment">## 最后一条命令不在后台运行</span><br><span class="hljs-built_in">ls</span> &amp; <span class="hljs-built_in">date</span> &amp; <span class="hljs-built_in">cd</span> <br><span class="hljs-comment">## 三条命令都在后台运行</span><br><span class="hljs-built_in">ls</span> &amp; <span class="hljs-built_in">date</span> &amp; <span class="hljs-built_in">cd</span> &amp;<br></code></pre></td></tr></table></figure></li><li><p><strong>在shell脚本中嵌入文档</strong></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">:&lt;&lt;<span class="hljs-string">&#x27;DOC&#x27;</span><br>    Write some notes.<br>DOC<br></code></pre></td></tr></table></figure><ol start="10"><li><strong>导出变量</strong></li></ol><blockquote><p>bash 中一切都是字符串</p></blockquote><p>将希望传给其他脚本的变量导出<br>要想查看所有已导出的变量，敲入命令 env（或者内建命令export -p）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MYVAR<br><span class="hljs-built_in">export</span> NAME=value<br></code></pre></td></tr></table></figure><p>env 生成的列表是 set 生成的列表的子集，因为并非所有变量都被导出了。</p><ol start="11"><li><strong>处理包含空格的参数</strong></li></ol><p>将所有可能包含文件名的命令参数全部加上引号。引用变量时，将其放入双引号中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> quoted.sh<br><span class="hljs-comment"># note the quotes</span><br><span class="hljs-built_in">ls</span> -l <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span><br>$<br>$ ./quoted.sh <span class="hljs-string">&quot;Oh the Waste&quot;</span><br>-rw-r--r--  1 smith <span class="hljs-built_in">users</span> 28470 2007-01-11 19:22 Oh the Waste<br>$<br></code></pre></td></tr></table></figure><ol start="12"><li><strong>获取默认值</strong></li></ol><p>如果指定参数（这里是 $1）不存在或为空，则将运算符之后的内容（本例为 &#x2F;tmp）作为值。否则，使用已经设置好的参数值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 如果值为路径直接写，或者加 &quot;&quot;双引号，用单引号会导致路径失效</span><br><span class="hljs-variable">$&#123;1:-/tmp&#125;</span><br></code></pre></td></tr></table></figure><ol start="13"><li><strong>设置默认值</strong></li></ol><p>首次引用 shell 变量时，如果该变量没有值，则使用赋值运算符为其赋值</p><p>赋值运算符有一个重要的例外：不能对位置参数（如 $1或 $*）赋值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;HOME:=/tmp&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>:&#x3D; 执行赋值操作，同时返回运算符右侧的值。:- 只做了前者一半的工作：返回值，但不赋值</p></blockquote><ol start="14"><li><strong>使用空值作为有效的默认值</strong></li></ol><p>如果写成不带冒号的 ${HOME&#x3D;&#x2F;tmp}，那么赋值操作仅会在该变量不存在的情况下（从未设置或已明确删除）发生</p><ol start="15"><li><strong>不只使用字符串常量作为默认值</strong></li></ol><p>能出现在 shell 变量引用右侧的内容并不局限于字符串常量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;BASE:=&quot;$(pwd)&quot;&#125;</span><br></code></pre></td></tr></table></figure><ol start="16"><li><strong>对不存在的参数输出错误消息</strong></li></ol><p>使用 set -u 命令，​“在变量替换时，将不存在的变量视为一种错误”​。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"> <span class="hljs-comment">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：check_unset_parms</span><br><span class="hljs-comment">#</span><br>USAGE=<span class="hljs-string">&quot;usage: myscript scratchdir sourcefile conversion&quot;</span><br>FILEDIR=<span class="hljs-variable">$&#123;1:?&quot;Error. You must supply a scratch directory.&quot;&#125;</span><br>FILESRC=<span class="hljs-variable">$&#123;2:?&quot;Error. You must supply a source file.&quot;&#125;</span><br>CVTTYPE=<span class="hljs-variable">$&#123;3:?&quot;Error. <span class="hljs-variable">$&#123;USAGE&#125;</span>&quot;&#125;</span><br> <br> <span class="hljs-comment">## 还可以在其中执行其他命令</span><br> CVTTYPE=<span class="hljs-variable">$&#123;3:?&quot;Error. $USAGE. $(rm $SCRATCHFILE)&quot;&#125;</span><br></code></pre></td></tr></table></figure><ol start="17"><li><strong>变量字符串替换</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从字符串name的索引位置start开始，返回长度为number的子串</span><br><span class="hljs-comment"># 如果子串为空格分隔的字符串，转为数组，比如 name=&quot;jack rose lucy&quot;, name=($&#123;name&#125;)</span><br><span class="hljs-comment"># 然后用 $&#123;name[@]:0:1&#125;形式进行引用，不然会按字符串数量计数取子集</span><br><span class="hljs-comment"># 如果不转换为数组，直接 $&#123;name:0:1&#125; 会输出 j</span><br><span class="hljs-variable">$&#123;name:start:number&#125;</span><br><span class="hljs-comment"># 返回字符串长度</span><br><span class="hljs-variable">$&#123;#name&#125;</span><br><span class="hljs-comment">## 从字符串起始位置开始，删除匹配pattern的最短子串</span><br><span class="hljs-variable">$&#123;name#pattern&#125;</span><br><span class="hljs-comment">## 从字符串起始位置开始，删除匹配pattern的最长子串</span><br><span class="hljs-variable">$&#123;name##pattern&#125;</span><br><span class="hljs-comment">## 从字符串结束位置开始，删除匹配pattern的最短子串</span><br><span class="hljs-variable">$&#123;name%pattern&#125;</span><br><span class="hljs-comment">## 从字符串结束位置开始，删除匹配pattern的最长子串</span><br><span class="hljs-variable">$&#123;name%%pattern&#125;</span><br><span class="hljs-comment">## 替换字符串中第一次出现的pattern</span><br><span class="hljs-variable">$&#123;name/pattern/string&#125;</span><br><span class="hljs-comment">## 替换字符串中出现的所有pattern</span><br><span class="hljs-variable">$&#123;name//pattern/string&#125;</span><br><br><span class="hljs-comment">## 变量不为空，替换为逗号</span><br><span class="hljs-variable">$&#123;LIST:+,&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>FILE&#x3D;${FULLPATHTOFILE##*&#x2F;}<br>等价于（结尾处不含&#x2F;时）<br>basename $FULLPATHTOFILE</p></blockquote><ol start="18"><li><strong>变量字符串大小写转换</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 转换成小写</span><br><span class="hljs-variable">$&#123;name,,&#125;</span><br><span class="hljs-comment"># 转换成大写</span><br><span class="hljs-variable">$&#123;name^^&#125;</span><br><span class="hljs-comment"># 首字母转换成大写</span><br><span class="hljs-variable">$&#123;name^&#125;</span><br><span class="hljs-comment"># 大写转成小写，小写转大写</span><br><span class="hljs-variable">$&#123;name~~&#125;</span><br><span class="hljs-comment"># 变量内容会转换成小写字母</span><br><span class="hljs-built_in">declare</span> -l name<br><span class="hljs-comment"># 全部大写</span><br><span class="hljs-built_in">declare</span> -u name<br><span class="hljs-comment"># 仅首字母大写</span><br><span class="hljs-built_in">declare</span> -c name<br></code></pre></td></tr></table></figure><ol start="19"><li><strong>简单算数</strong></li></ol><p>用 <code>$(( ))</code> 或 <code>let</code> 进行整数运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##  $(( ))可以用 ** 进行幂运算</span><br>COUNT=$((COUNT + <span class="hljs-number">5</span> + MAX * <span class="hljs-number">2</span>))<br><span class="hljs-built_in">let</span> COUNT+=<span class="hljs-string">&#x27;5+MAX*2&#x27;</span><br><br><span class="hljs-built_in">let</span> COUNT+=5<br></code></pre></td></tr></table></figure><ol start="20"><li><strong>测试文件属性</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 是否更新（检查文件的修改时间）​。现有文件要比不存在的文件“新”​。</span><br><span class="hljs-built_in">test</span> FILE1 -nt FILE2　　<br><span class="hljs-comment"># 是否更旧。同样，不存在的文件要比现有文件“旧”​。</span><br><span class="hljs-built_in">test</span> FILE1 -ot FILE2　　<br><span class="hljs-comment"># 具有相同设备和 inode 编号（即便由不同链接所指向，也视为相同的文件）​。</span><br><span class="hljs-built_in">test</span> FILE1 -ef FILE2　　<br><span class="hljs-comment"># 测试文件大小是否不为空</span><br><span class="hljs-built_in">test</span> -s FILE<br></code></pre></td></tr></table></figure><ol start="21"><li><strong>用正则表达式匹配</strong></li></ol><blockquote><p>bash 3.0 或更高版本</p></blockquote><p>使用 &#x3D;~ 运算符进行正则表达式匹配。只要能够匹配到某个字符串，就可以在 shell 数组变量 $BASH_REMATCH 中找到模式中的各个部分所匹配到的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># 实例文件：trackmatch</span><br><span class="hljs-comment">#</span><br><span class="hljs-keyword">for</span> CDTRACK <span class="hljs-keyword">in</span> *<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$CDTRACK</span>&quot;</span> =~ <span class="hljs-string">&quot;([[:alpha:][:blank:]]*)- ([[:digit:]]*) - (.*)$&quot;</span> ]]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> Track <span class="hljs-variable">$&#123;BASH_REMATCH[2]&#125;</span> is <span class="hljs-variable">$&#123;BASH_REMATCH[3]&#125;</span><br>        <span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$CDTRACK</span>&quot;</span> <span class="hljs-string">&quot;Track<span class="hljs-variable">$&#123;BASH_REMATCH[2]&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ol start="22"><li><strong>循环</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## while 循环</span><br>$ svn status bcb<br>M      bcb/amin.c<br>?      bcb/dmin.c<br>?      bcb/mdiv.tmp<br>A      bcb/optrn.c<br>M      bcb/optson.c<br>?      bcb/prtbout.4161<br>?      bcb/rideaslist.odt<br>?      bcb/x.maxc<br><br><span class="hljs-comment">## cut提取从第 8 列开始（一直到行尾）的字符串</span><br>svn status mysrc | grep <span class="hljs-string">&#x27;^?&#x27;</span> | <span class="hljs-built_in">cut</span> -c8- |<br>  <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> FN; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$FN</span>&quot;</span>; <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$FN</span>&quot;</span>; <span class="hljs-keyword">done</span><br><br><span class="hljs-comment">## 将输入传给两个变量，最后一个变量获得输入行中剩余的所有内容</span><br>svn status mysrc |<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> TAG FN<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$TAG</span> == \? ]]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$FN</span><br>        <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$FN</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">## for 循环</span><br><span class="hljs-comment">## 双括号表明这是算术表达式，在其中引用变量时，不用加 $（但 $1 等位置参数除外）​，只要是 bash 中出现双括号的地方，均是如此</span><br><span class="hljs-keyword">for</span> (( expr1 ; expr2 ; expr3 )) ; <span class="hljs-keyword">do</span> list ; <span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> (( i=<span class="hljs-number">0</span>, j=<span class="hljs-number">0</span> ; i+j &lt; <span class="hljs-number">10</span> ; i++, j++ ))<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> $((i*j))<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">## seq 可以生成浮点值，参数依次是起始值、增量、结束值</span><br><span class="hljs-keyword">for</span> fp <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1.0 .01 1.1)<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$fp</span>; other stuff too<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">seq</span> 1.0 .01 1.1 |<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> fp<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$fp</span>; other stuff too<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">## $() 在子 shell 中执行命令</span><br><br><span class="hljs-comment">## 在第一个例子的for 循环中，seq 必须先运行完毕，然后用全部的输出结果替换掉 $()。对于冗长的数值序列来说，这种方法的时间开销和内存开销都不小。</span><br><span class="hljs-comment">## 在第二个例子中，seq 作为单独的命令运行，通过管道将其输出传入 while 循环，后者读取其中的每一行并做相应处理，seq 命令是与 while 并行运行的</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo部署GitHub个人博客</title>
    <link href="/2024/08/05/deploy-hexo/"/>
    <url>/2024/08/05/deploy-hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo部署GitHub个人博客"><a href="#Hexo部署GitHub个人博客" class="headerlink" title="Hexo部署GitHub个人博客"></a>Hexo部署GitHub个人博客</h1><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h2><p>安装Hexo需要</p><ul><li>nodejs</li><li>npm</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注意nodejs版本</span><br><span class="hljs-comment"># 需要 ubuntu noble版本</span><br>apt install nodejs npm<br><span class="hljs-comment"># npm 下载慢需要跟换国内源，或者添加代理</span><br>npm install -g hexo<br></code></pre></td></tr></table></figure><h2 id="2-Hexo-常用命令"><a href="#2-Hexo-常用命令" class="headerlink" title="2. Hexo 常用命令"></a>2. Hexo 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 需要一点时间</span><br>hexo init <span class="hljs-variable">$proj_name</span><br><br><span class="hljs-comment">## 新建post</span><br>hexo new <span class="hljs-string">&quot;My First Blog&quot;</span><br><br><span class="hljs-comment">## 启动本地server</span><br>hexo server<br><br><span class="hljs-comment">## 生成页面并部署到github</span><br>hexo generate &amp;&amp; hexo deploy<br><span class="hljs-comment">## 可简写</span><br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><h2 id="3-配置-GitHub"><a href="#3-配置-GitHub" class="headerlink" title="3. 配置 GitHub"></a>3. 配置 GitHub</h2><ol><li><p>新建一个github项目</p></li><li><p>点进项目找到Settings -&gt; Pages 进行配置 GitHub Pages</p><p><img src="/../images/deploy-hexo/page.png" alt="page"></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将项目clone下来</span><br><span class="hljs-comment"># 此处最好配置ssh类型, 不然后面每次部署推送都需要输入账号和token，且ssh不容易出现某些网络问题</span><br>git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$url</span><br><span class="hljs-comment"># 创建一个分支用来存储hexo源代码</span><br>git checkout -b hexo<br></code></pre></td></tr></table></figure><p><strong>配置SSH方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成sshkey</span><br>ssh-keygen -t rsa<br><span class="hljs-comment">## 将公钥复制到github的项目settings -&gt; Deploy keys里</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><blockquote><p>GitHub从2021年8月13号开始不能用密码推送，需要用token。</p><p>token需要在右上角个人Settings -&gt; <a href="https://github.com/settings/apps">Developer Settings</a> -&gt; <a href="https://github.com/settings/tokens">Personal access tokens</a>里生成。</p><p>注意保管，丢失了需要重新生成。</p></blockquote><h2 id="4-配置-Hexo"><a href="#4-配置-Hexo" class="headerlink" title="4. 配置 Hexo"></a>4. 配置 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看目录结构</span><br>tree -L 1 <br><span class="hljs-comment">## 输出如下</span><br>MyBlog/<br>├── _config.landscape.yml <span class="hljs-comment">## 主题配置文件，默认主题landscape，主题可在 https://hexo.io/themes/ 官网自行寻找</span><br>├── _config.yml <span class="hljs-comment">## hexo配置文件</span><br>├── node_modules<br>├── package-lock.json<br>├── package.json<br>├── scaffolds<br>├── <span class="hljs-built_in">source</span> <span class="hljs-comment">## post存放目录，可在同级建立image存放图片</span><br>└── themes<br></code></pre></td></tr></table></figure><p>此处<code>_config.yml</code>配置自行修改，注意url填写你的 GitHub Pages地址。</p><p><img src="/../images/deploy-hexo/config.png" alt="config"></p><p>在<code>_config.yml</code>最后有deploy的配置选项，默认如图：</p><p><img src="/../images/deploy-hexo/deploy-config.png"></p><p>修改为：</p><p><img src="/../images/deploy-hexo/deploy-git.png"></p><p>branch填写你需要部署的分支，我这里选择master；</p><p>repo 填写git地址，可以是https形式，也可以是ssh形式。</p><h2 id="5-部署-推送到仓库"><a href="#5-部署-推送到仓库" class="headerlink" title="5. 部署&amp;推送到仓库"></a>5. 部署&amp;推送到仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## hexo 会生成一个 .deploy_git</span><br><span class="hljs-comment">## 所以我们将这个文件写入 .gitignore</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;.deploy_git/&quot;</span> &gt;&gt; .gitignore<br><span class="hljs-comment">## 如果之前有过推送需要删掉</span><br>git <span class="hljs-built_in">rm</span> -r --cached .deploy_git<br><br><span class="hljs-comment">## 生成页面并部署，因为配置过git仓地址，会自动触发github action 进行部署</span><br>hexo g &amp;&amp; hexo d<br><br><span class="hljs-comment">## 将源文件推送到hexo分支</span><br>git push origin hexo<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL启动Linux并初始化及代理配置</title>
    <link href="/2024/08/04/WSL-Linux-init-proxy/"/>
    <url>/2024/08/04/WSL-Linux-init-proxy/</url>
    
    <content type="html"><![CDATA[<h2 id="WSL-启动-Ubuntu"><a href="#WSL-启动-Ubuntu" class="headerlink" title="WSL 启动 Ubuntu"></a>WSL 启动 Ubuntu</h2><p>由于22.04 jammy不支持高版本nodejs，所以我们下载24.04 noble版本的Ubuntu。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看可下载的发行版</span><br>wsl <span class="hljs-literal">-l</span> <span class="hljs-literal">-o</span><br><br>wsl <span class="hljs-literal">--install</span> <span class="hljs-literal">-d</span> Ubuntu<span class="hljs-literal">-24</span>.<span class="hljs-number">04</span> <br></code></pre></td></tr></table></figure><p><img src="/../images/wsl-linux-init/available_list.png" alt="list"></p><p>等待下载完成就会自动进入。</p><h3 id="配置-apt阿里源"><a href="#配置-apt阿里源" class="headerlink" title="配置 apt阿里源"></a>配置 apt阿里源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><br><span class="hljs-comment">## 查看版本codename</span><br><span class="hljs-built_in">cat</span> /etc/os-release | grep UBUNTU_CODENAME<br><span class="hljs-comment">## 如用其他版本，如22.04 jammy，将noble替换为jammy即可</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/apt/sources.list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">## 配置完后update</span><br>apt update<br><br>apt install nodejs npm<br></code></pre></td></tr></table></figure><h2 id="WSL-本地导入CentOS"><a href="#WSL-本地导入CentOS" class="headerlink" title="WSL 本地导入CentOS"></a>WSL 本地导入CentOS</h2><p>WSL没有CentOS的发行版，因此需要自行导出一个。</p><p>centos的tar包从docker容器导出。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--import</span> CentOS D:\wsl\centos\ .\centos.tar<br>wsl <span class="hljs-literal">-d</span> CentOS<br><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/wsl.conf &lt;&lt;EOF<br>[<span class="hljs-type">boot</span>]<br>systemd=true<br>EOF<br></code></pre></td></tr></table></figure><h3 id="配置-yum阿里源"><a href="#配置-yum阿里源" class="headerlink" title="配置 yum阿里源"></a>配置 yum阿里源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak<br>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>yum clean all &amp;&amp; yum makecache<br><br>yum install initscripts<br>yum install net-tools<br>yum install <span class="hljs-built_in">which</span><br>yum install <span class="hljs-built_in">sudo</span><br>yum install tmux<br></code></pre></td></tr></table></figure><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>此处我将自己的WSL网络设置成了<code>mirrored</code>，因此在访问一些服务的时候可以通过127.0.0.1来访问。</p><p>比如 ssh可以通过<code>ssh root@127.0.0.1</code>来远程连接，方便使用其他终端程序；Web服务可以通过<a href="http://127.0.0.1/">http://127.0.0.1:80</a> 访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 设置网络为镜像网络，完成后关闭虚拟机，等待8秒后再启动</span><br><span class="hljs-built_in">cat</span> &gt;&gt;/mnt/c/Users/xxx/.wslconfig &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[experimental]</span><br><span class="hljs-string">networkingMode=mirrored</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">## 配置代理</span><br><span class="hljs-comment">## 根据自己选择的工具填写端口号</span><br><span class="hljs-built_in">cat</span> &gt;&gt; ~/.bashrc &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">alias proxy=&#x27;export all_proxy=http://127.0.0.1:7890&#x27;</span><br><span class="hljs-string">alias unproxy=&#x27;unset all_proxy&#x27;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment">## 运行即可启动代理</span><br>proxy<br><br><span class="hljs-comment">## 配置npm代理</span><br>npm config <span class="hljs-built_in">set</span> proxy=http://127.0.0.1:7890<br><span class="hljs-comment">## 默认registry地址，可换成其他国内源</span><br>npm config <span class="hljs-built_in">set</span> registry=http://registry.npmjs.org<br><br>npm install -g hexo<br><br><span class="hljs-comment"># 或设置代理</span><br>npm config <span class="hljs-built_in">set</span> proxy http://127.0.0.1:7890<br>npm config <span class="hljs-built_in">set</span> https-proxy http://127.0.0.1:7890<br>npm config <span class="hljs-built_in">set</span> strict-ssl <span class="hljs-literal">false</span><br><span class="hljs-comment"># 取消代理</span><br>npm config delete proxy<br>npm config delete https-proxy<br></code></pre></td></tr></table></figure><h2 id="配置-github加速"><a href="#配置-github加速" class="headerlink" title="配置 github加速"></a>配置 github加速</h2><p>在<code>/etc/hosts</code>下添加</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">199.96.58.157</span> github.global.ssl.fastly.net<br><span class="hljs-number">20.205.243.166</span> github.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地大模型部署</title>
    <link href="/2024/08/04/local-llm-deploy/"/>
    <url>/2024/08/04/local-llm-deploy/</url>
    
    <content type="html"><![CDATA[<h1 id="本地大模型部署"><a href="#本地大模型部署" class="headerlink" title="本地大模型部署"></a>本地大模型部署</h1><blockquote><p>Windows根据官网下载安装即可</p><p><a href="https://github.com/ollama/ollama/blob/main/docs/linux.md">Linux 官方安装步骤</a></p></blockquote><h2 id="1-安装ollama"><a href="#1-安装ollama" class="headerlink" title="1. 安装ollama"></a>1. 安装ollama</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 可能会比较慢，需要magic</span><br>curl -fsSL https://ollama.com/install.sh | sh<br><span class="hljs-comment">## 也可先把ollama-linux-amd64下载到本地</span><br><span class="hljs-comment">## 然后上传到linux</span><br><span class="hljs-comment">## 修改安装脚本两处地方再安装</span><br>curl -fsSL https://ollama.com/install.sh &gt;&gt; ollama_install.sh<br>sed -i.bak -e <span class="hljs-string">&#x27;/TEMP_DIR=/c TEMP_DIR=/tmp&#x27;</span> -e <span class="hljs-string">&#x27;/curl --fail.*-o/s/^/#/&#x27;</span> ollama_install.sh<br><span class="hljs-comment">## 将 ollama-linux-amd64放到tmp下，并重命名为ollama</span><br><span class="hljs-built_in">mv</span> ollama-linux-amd64 /tmp/ollama<br><span class="hljs-comment">## 运行ollama_install.sh即可</span><br>sh ollama_install.sh<br><span class="hljs-comment">## 查看ollama状态</span><br>systemctl status ollama<br></code></pre></td></tr></table></figure><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python-repl">root@localhost:~/mp_mount/llm# sh ollama_install.sh<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Downloading ollama...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Installing ollama to /usr/local/<span class="hljs-built_in">bin</span>...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Creating ollama user...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Adding ollama user to render group...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Adding ollama user to video group...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Adding current user to ollama group...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Creating ollama systemd service...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Enabling <span class="hljs-keyword">and</span> starting ollama service...</span><br>Created symlink /etc/systemd/system/default.target.wants/ollama.service → /etc/systemd/system/ollama.service.<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">The Ollama API <span class="hljs-keyword">is</span> now available at <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">11434.</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">Install complete. Run <span class="hljs-string">&quot;ollama&quot;</span> <span class="hljs-keyword">from</span> the command line.</span><br></code></pre></td></tr></table></figure><p>此时访问<code>127.0.0.1:11434</code>显示<code>Ollama is running</code>，则部署成功。</p><p>容器形式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama<br></code></pre></td></tr></table></figure><h2 id="2-选择模型"><a href="#2-选择模型" class="headerlink" title="2. 选择模型"></a>2. 选择模型</h2><p><a href="https://ollama.com/">https://ollama.com/</a> 官网右上角 model</p><p><img src="/../images/local-llm-deploy/select-model.png" alt="select-model"></p><p>这里模型我们选择阿里的千问2，复制命令<code>ollama run qwen2</code>在linux上运行即可，下载时间会有点长，耐心等待。</p><p><img src="/../images/local-llm-deploy/qwen2.png" alt="open-webui"></p><h2 id="3-安装open-webui"><a href="#3-安装open-webui" class="headerlink" title="3. 安装open-webui"></a>3. 安装open-webui</h2><p><a href="https://github.com/open-webui/open-webui">https://github.com/open-webui/open-webui</a></p><p>通过容器化部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main<br></code></pre></td></tr></table></figure><p><a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a> 访问，需要注册，随便填写即可。</p><p>登录后效果如图：</p><p><img src="/../images/local-llm-deploy/open-webui.png" alt="open-webui"></p><p>至此，我们就成功部署了一个由CPU提供算力的大语言模型。</p><p>由于CPU和GPU设计结构的不同，CPU在处理大模型语言时效果并不理想。</p><p>根据前面部署完后，使用时会发现模型给出回复的时候反应很慢，且是一个字一个字蹦出来的。</p><p>然而GPU驱动大模型能够显著提高其反应速度，回复也是一段一段显示。</p><p>下面容器化部署一并介绍如何使用GPU提供算力。</p><h2 id="4-容器化部署"><a href="#4-容器化部署" class="headerlink" title="4. 容器化部署"></a>4. 容器化部署</h2><p>使用Nvidia显卡需要下载驱动</p><blockquote><p>Nvidia 官网</p><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 配置apt包仓库地址</span><br>curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \<br>  &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \<br>    sed <span class="hljs-string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \<br>    <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list<br>    <br><span class="hljs-comment">## 更新仓库包列表</span><br><span class="hljs-built_in">sudo</span> apt-get update<br><br><span class="hljs-comment">## 安装工具</span><br><span class="hljs-built_in">sudo</span> apt-get install -y nvidia-container-toolkit<br><br><span class="hljs-comment">## 可使用该命令查看gpu</span><br>nvidia-smi<br><span class="hljs-comment">## 查看显卡列表</span><br>nvidia-smi -L<br><span class="hljs-comment">## 在使用过程中可观察gpu运行情况变化</span><br>watch -n 1 nvidia-smi<br><span class="hljs-comment"># 或</span><br>nvidia-smi -l<br><br><span class="hljs-comment">## 运行由gpu驱动的ollama，将大模型存放路径持久化，--gpus all将所有gpu设备加入容器</span><br>docker run --gpus all -d -v /opt/ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama<br><br><span class="hljs-comment">## 下载大模型</span><br>docker <span class="hljs-built_in">exec</span> -it ollama ollama pull qwen2:7b<br></code></pre></td></tr></table></figure><p><strong>其他包管理工具配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## yum 地址</span><br>curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \<br>  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/yum.repos.d/nvidia-container-toolkit.repo<br>  <br><span class="hljs-comment">## zypper地址</span><br><span class="hljs-built_in">sudo</span> zypper ar https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo<br><span class="hljs-built_in">sudo</span> zypper --gpg-auto-import-keys install -y nvidia-container-toolkit<br></code></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="mac-环境下部署"><a href="#mac-环境下部署" class="headerlink" title="mac 环境下部署"></a>mac 环境下部署</h3><p>Docker Desktop 在 macOS 上运行时，会通过一个轻量级的虚拟机（如 colima 或基于 HyperKit 的虚拟机）来运行 Docker 容器。这种方式确保容器运行在一个 Linux 内核上，而不是 macOS 的内核。因此，&#x2F;var&#x2F;lib&#x2F;docker 实际上存在于虚拟机内，而不是 macOS 本地文件系统中。</p><p>进入 Docker Desktop 的虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker context use default<br>docker run --<span class="hljs-built_in">rm</span> -it --privileged --pid=host justincormack/nsenter1<br></code></pre></td></tr></table></figure><p>数据位置通常在:  <code>~/Library/Containers/com.docker.docker/Data/vms/0/</code></p><p>调整 Docker Desktop 虚拟机的磁盘大小:<br><code>settings -&gt; resuorces -&gt; advanced -&gt; Disk usage limit</code></p>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL 基础用法</title>
    <link href="/2024/08/04/wsl-base/"/>
    <url>/2024/08/04/wsl-base/</url>
    
    <content type="html"><![CDATA[<h1 id="WSL-基础用法"><a href="#WSL-基础用法" class="headerlink" title="WSL 基础用法"></a>WSL 基础用法</h1><h2 id="检查-WSL是否安装"><a href="#检查-WSL是否安装" class="headerlink" title="检查 WSL是否安装"></a>检查 WSL是否安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 检查版本</span><br>wsl <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></figure><p><img src="/../images/wsl-base/wsl-version.png" alt="wsl-version"></p><p>有输出如图则为已安装。</p><h2 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h2><blockquote><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">旧版安装方式</a></p></blockquote><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。</p><p>运行如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">dism.exe /online /<span class="hljs-built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart<br></code></pre></td></tr></table></figure><p>必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。 </p><p>在管理员模式下打开 PowerShell 或 Windows 命令提示符，输入如下命令，然后重启计算机。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 此命令将启用运行 WSL 并安装 Linux 的 Ubuntu 发行版所需的功能</span><br>wsl <span class="hljs-literal">--install</span><br><br><span class="hljs-comment">## 更新内核</span><br><span class="hljs-comment">## Linux 内核更新包会安装最新版本的 WSL 2 Linux 内核，以便在 Windows 操作系统中运行 WSL</span><br>wsl <span class="hljs-literal">--update</span><br><br><span class="hljs-comment">## 设置默认版本</span><br>wsl <span class="hljs-literal">--set-default-version</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="查看发行版本"><a href="#查看发行版本" class="headerlink" title="查看发行版本"></a>查看发行版本</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看可安装发行版</span><br>wsl <span class="hljs-literal">--list</span> <span class="hljs-literal">--online</span><br>wsl <span class="hljs-literal">-l</span> <span class="hljs-literal">-o</span><br><span class="hljs-comment">## 查看已安装发行版</span><br>wsl <span class="hljs-literal">-l</span> <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><h2 id="安装一个发行版"><a href="#安装一个发行版" class="headerlink" title="安装一个发行版"></a>安装一个发行版</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 可直接运行下载安装</span><br>wsl <span class="hljs-literal">--install</span> <span class="hljs-literal">-d</span> &lt;Distribution Name&gt;<br>wsl <span class="hljs-literal">--install</span> <span class="hljs-literal">--web-download</span> <span class="hljs-literal">-d</span> &lt;Distribution Name&gt;<br><span class="hljs-comment">## 也可直接本地导入</span><br><span class="hljs-comment">## docker导出的容器tar包可用在wsl</span><br>docker export <span class="hljs-variable">$container</span> <span class="hljs-literal">-o</span> <span class="hljs-variable">$container</span>.tar<br>wsl <span class="hljs-literal">--import</span> centos D:\wsl\centos\ .\centos.tar<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/use-custom-distro">导入任意发行版</a></p></blockquote><h2 id="操作虚拟机"><a href="#操作虚拟机" class="headerlink" title="操作虚拟机"></a>操作虚拟机</h2><p>使用<code>wsl -l -v</code>可看到如图有四个已安装发行版</p><p><img src="/../images/wsl-base/installed.png" alt="installed"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 进入centos版本linux</span><br>wsl <span class="hljs-literal">-d</span> centos<br></code></pre></td></tr></table></figure><p>要设置与 <code>wsl</code> 命令一起使用的默认 Linux 发行版，输入 <code>wsl -s </code> 或 <code>wsl --set-default </code>。</p><p>例如，从 PowerShell&#x2F;CMD 输入 <code>wsl -s Debian</code>，将默认发行版设置为 Debian。 现在从 Powershell 运行 <code>wsl npm init</code> 将在 Debian 中运行 <code>npm init</code> 命令。</p><h2 id="修改-WSL配置"><a href="#修改-WSL配置" class="headerlink" title="修改 WSL配置"></a>修改 WSL配置</h2><ol><li><p>机器内配置</p><p>进入虚拟机后，运行<code>df -h</code>可以查看到宿主机的各个盘符都已挂载到该机器上。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 默认不可用systemctl控制服务，需要WSL版本0.67.6以上</span><br><span class="hljs-comment">## 默认windows访问wsl linux 以默认用户访问，因此无法访问root用户文件</span><br><span class="hljs-comment">## 修改为可用systemd及默认root用户登录</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/wsl.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[boot]</span><br><span class="hljs-string">systemd=true</span><br><span class="hljs-string">[user]</span><br><span class="hljs-string">default=root</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>WSL 全局配置</p><p>开启镜像ip地址，虚拟机地址会变更为宿主机同一个ip。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt;/mnt/c/Users/xxx/.wslconfig &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[experimental]</span><br><span class="hljs-string">networkingMode=mirrored</span><br><span class="hljs-string">autoProxy=true</span><br><span class="hljs-string">dnsTunneling=true</span><br><span class="hljs-string">firewall=true</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>修改完配置文件后需要运行<code>wsl --shutdown</code>，并需要<strong>间隔8秒</strong>后再启动虚拟机。</p><blockquote><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config">高级设置配置</a></p></blockquote><h2 id="删除不需要的发行版"><a href="#删除不需要的发行版" class="headerlink" title="删除不需要的发行版"></a>删除不需要的发行版</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--unregister</span> &lt;Distro&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 磁盘基础</title>
    <link href="/2024/07/17/Linux-disk-base/"/>
    <url>/2024/07/17/Linux-disk-base/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-磁盘基础"><a href="#Linux-磁盘基础" class="headerlink" title="Linux 磁盘基础"></a>Linux 磁盘基础</h1><p>先从如何使用开始</p><ul><li><p>如何查磁盘占用大小及基本信息</p><p>将会用到的命令：</p><ul><li>df</li><li>lsblk</li><li>du</li><li>blkid</li></ul></li><li><p>如何进行磁盘分区、制作逻辑卷、格式化、挂载</p><p>将会用到的命令：</p><ul><li>fdisk</li><li>gdisk</li><li>parted</li><li>pvcreate</li><li>vgcreate</li><li>lvcreate</li><li>mkfs</li><li>mount</li></ul></li></ul><p>然后简单了解磁盘分区的原理</p><ul><li>MBR</li><li>GPT</li></ul><p>最后是操作磁盘时可能遇到的各种问题。例如机器添加磁盘后系统层面没有显示、已分区没做逻辑卷的磁盘扩容、曾经使用过的磁盘换到新机器使用报错、已删除文件<code>df -h</code>仍然显示占用、挂载类似nfs等网络盘时操作卡顿、实际占用与显示不符等等…</p><h2 id="磁盘信息查看"><a href="#磁盘信息查看" class="headerlink" title="磁盘信息查看"></a>磁盘信息查看</h2><h3 id="1-查看磁盘使用量-–-display-file-system"><a href="#1-查看磁盘使用量-–-display-file-system" class="headerlink" title="1. 查看磁盘使用量 – display file system"></a>1. 查看磁盘使用量 – display file system</h3>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h <span class="hljs-comment"># 二进制计算方式，以人类友好形式显示，如1024M=1G</span><br><span class="hljs-built_in">df</span> -l <span class="hljs-comment"># 只列出本地文件系统，即排除nfs或其他类似的如nas盘存储挂载</span><br><span class="hljs-built_in">df</span> -T <span class="hljs-comment"># 显示挂载类型</span><br><span class="hljs-built_in">df</span> -H <span class="hljs-comment"># 十进制计算方式，以人类友好形式显示，如1000M=1G</span><br><span class="hljs-built_in">df</span> -t xfs <span class="hljs-comment"># 指定显示xfs类型的挂载</span><br><span class="hljs-built_in">df</span> -i<br></code></pre></td></tr></table></figure><h3 id="2-查看磁盘分区挂载信息-–-list-block"><a href="#2-查看磁盘分区挂载信息-–-list-block" class="headerlink" title="2. 查看磁盘分区挂载信息 – list block"></a>2. 查看磁盘分区挂载信息 – list block</h3>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br>lsblk -l <br></code></pre></td></tr></table></figure><p>   使用<code>lsblk</code>输出如下:</p>   <figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>sda       8:0   <span class="hljs-number"> 0 </span>  15G <span class="hljs-number"> 0 </span>disk<br>├─sda1    8:1   <span class="hljs-number"> 0 </span>  14G <span class="hljs-number"> 0 </span>part /<br>├─sda14   8:14  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 0 </span>part<br>├─sda15   8:15  <span class="hljs-number"> 0 </span> 106M <span class="hljs-number"> 0 </span>part /boot/efi<br>└─sda16 259:0   <span class="hljs-number"> 0 </span> 913M <span class="hljs-number"> 0 </span>part /boot<br>sr0      11:0   <span class="hljs-number"> 1 </span>  54K <span class="hljs-number"> 0 </span>rom<br></code></pre></td></tr></table></figure><h3 id="3-查看具体文件或目录大小-–-disk-usage"><a href="#3-查看具体文件或目录大小-–-disk-usage" class="headerlink" title="3. 查看具体文件或目录大小 – disk usage"></a>3. 查看具体文件或目录大小 – disk usage</h3>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh <span class="hljs-comment"># 计算总大小</span><br><span class="hljs-built_in">du</span> -ahd 0 <span class="hljs-comment"># 与上述相同</span><br><span class="hljs-built_in">du</span> -sh * <span class="hljs-comment"># 计算当前目录下所有文件具体大小，最后计算出总值，并以人类友好形式输出</span><br><span class="hljs-built_in">du</span> -ahd 1 <span class="hljs-comment"># 与上述相同</span><br><span class="hljs-comment"># -d 在有某些版本不可用，需要换成--max-depth 1</span><br><span class="hljs-built_in">du</span> -ahd 1 --time <span class="hljs-comment"># 显示文件或目录修改时间</span><br><span class="hljs-built_in">du</span> -ahd 1 --time | <span class="hljs-built_in">sort</span> -h <span class="hljs-comment">## 以人类友好形式进行排序输出</span><br><span class="hljs-built_in">du</span> -ahd 1 ./ -x ./ <span class="hljs-comment"># 跳过不同文件系统的目录，经常可以用来规避nfs这类网络挂载</span><br></code></pre></td></tr></table></figure><h3 id="4-其他命令"><a href="#4-其他命令" class="headerlink" title="4. 其他命令"></a>4. 其他命令</h3>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">blkid <span class="hljs-comment">## block id, 可以用来查看uuid及文件系统类型</span><br><span class="hljs-comment">## 以下命令可以用来查看分区情况</span><br>fdisk -l <br>gdisk -l<br>parted /dev/vda <span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><h2 id="磁盘分区、格式化、挂载"><a href="#磁盘分区、格式化、挂载" class="headerlink" title="磁盘分区、格式化、挂载"></a>磁盘分区、格式化、挂载</h2><blockquote><p>磁盘有价，数据无价，对磁盘进行分区、扩容操作时请务必做好数据备份！！！</p></blockquote><h3 id="1-分区"><a href="#1-分区" class="headerlink" title="1. 分区"></a>1. 分区</h3><p>一般分区有两种常用形式，<code>GPT</code>和<code>MBR</code></p><p>MBR格式最多只能有四个主分区，若想继续分区就需要建立逻辑分区。</p><p>GPT格式没有分区限制，建议使用GPT分区</p><ol><li><strong>fdisk</strong></li></ol><p>fdisk使用方法如下，进入交互式命令行后，用<code>p</code>查看磁盘信息，<code>n</code>新建分区，下面的操作无特殊指定回车即可。</p><p>如有指定，一般起始扇区默认即可，结束扇区可用<code>+10G</code>类似写法指定，<code>+</code>号是在现有基础上增加空间。</p><p>有时候缩容操作（一般不考虑缩容）不会指定+号，直接指定大小而不是在原基础上增加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@docker:~# fdisk /dev/sda<br><br>Welcome to fdisk (util-linux 2.39.3).<br>Changes will remain <span class="hljs-keyword">in</span> memory only, <span class="hljs-keyword">until</span> you decide to write them.<br>Be careful before using the write <span class="hljs-built_in">command</span>.<br><br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n<br>Partition number (2-13,17-128, default 2):<br>First sector (33556480-52428766, default 33556480):<br>Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (33556480-52428766, default 52426751):<br><br>Created a new partition 2 of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> and of size 9 GiB.<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): p<br>Disk /dev/sda: 25 GiB, 26843545600 bytes, 52428800 sectors<br>Disk model: VBOX HARDDISK<br>Units: sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disklabel <span class="hljs-built_in">type</span>: gpt<br>Disk identifier: A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br><br>Device        Start      End  Sectors  Size Type<br>/dev/sda1   2099200 33556479 31457280   15G Linux filesystem<br>/dev/sda2  33556480 52426751 18870272    9G Linux filesystem<br>/dev/sda14     2048    10239     8192    4M BIOS boot<br>/dev/sda15    10240   227327   217088  106M EFI System<br>/dev/sda16   227328  2097152  1869825  913M Linux extended boot<br><br>Partition table entries are not <span class="hljs-keyword">in</span> disk order.<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): w<br>The partition table has been altered.<br>Syncing disks.<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>gdisk</strong></li></ol><p>gdisk的操作类似于fdisk，多了一步需要输入Hex code，可回车默认。</p><p>如果保存退出后<code>lsblk</code>查看不到分区，可使用<code>partprobe</code>刷新分区表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@docker:~# gdisk /dev/sda<br>GPT fdisk (gdisk) version 1.0.10<br><br>Partition table scan:<br>  MBR: protective<br>  BSD: not present<br>  APM: not present<br>  GPT: present<br><br>Found valid GPT with protective MBR; using GPT.<br><br>Command (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): p<br>Disk /dev/sda: 52428800 sectors, 25.0 GiB<br>Model: VBOX HARDDISK<br>Sector size (logical/physical): 512/512 bytes<br>Disk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br>Partition table holds up to 128 entries<br>Main partition table begins at sector 2 and ends at sector 33<br>First usable sector is 34, last usable sector is 52428766<br>Partitions will be aligned on 2048-sector boundaries<br>Total free space is 18876348 sectors (9.0 GiB)<br><br>Number  Start (sector)    End (sector)  Size       Code  Name<br>   1         2099200        33556479   15.0 GiB    8300<br>  14            2048           10239   4.0 MiB     EF02<br>  15           10240          227327   106.0 MiB   EF00<br>  16          227328         2097152   913.0 MiB   EA00<br><br>Command (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): n<br>Partition number (2-128, default 2):<br>First sector (34-52428766, default = 33556480) or &#123;+-&#125;size&#123;KMGTP&#125;:<br>Last sector (33556480-52428766, default = 52426751) or &#123;+-&#125;size&#123;KMGTP&#125;: +8G<br>Current <span class="hljs-built_in">type</span> is 8300 (Linux filesystem)<br>Hex code or GUID (L to show codes, Enter = 8300): 8e00<br>Changed <span class="hljs-built_in">type</span> of partition to <span class="hljs-string">&#x27;Linux LVM&#x27;</span><br><br>Command (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): p<br>Disk /dev/sda: 52428800 sectors, 25.0 GiB<br>Model: VBOX HARDDISK<br>Sector size (logical/physical): 512/512 bytes<br>Disk identifier (GUID): A102F557-254C-4E8A-BB7B-5CE2CBC42B40<br>Partition table holds up to 128 entries<br>Main partition table begins at sector 2 and ends at sector 33<br>First usable sector is 34, last usable sector is 52428766<br>Partitions will be aligned on 2048-sector boundaries<br>Total free space is 2099132 sectors (1025.0 MiB)<br><br>Number  Start (sector)    End (sector)  Size       Code  Name<br>   1         2099200        33556479   15.0 GiB    8300<br>   2        33556480        50333695   8.0 GiB     8E00  Linux LVM<br>  14            2048           10239   4.0 MiB     EF02<br>  15           10240          227327   106.0 MiB   EF00<br>  16          227328         2097152   913.0 MiB   EA00<br><br>Command (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): w<br><br>Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING<br>PARTITIONS!!<br><br>Do you want to proceed? (Y/N): y<br>OK; writing new GUID partition table (GPT) to /dev/sda.<br>Warning: The kernel is still using the old partition table.<br>The new table will be used at the next reboot or after you<br>run partprobe(8) or kpartx(8)<br>The operation has completed successfully.<br><br>root@docker:~# lsblk<br>NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>loop0     7:0    0    4K  1 loop /snap/bare/5<br>loop1     7:1    0 74.2M  1 loop /snap/core22/1380<br>loop2     7:2    0    1M  1 loop /snap/multipass-sshfs/145<br>loop3     7:3    0 38.8M  1 loop /snap/snapd/21759<br>sda       8:0    0   25G  0 disk<br>├─sda1    8:1    0   15G  0 part /<br>├─sda14   8:14   0    4M  0 part<br>├─sda15   8:15   0  106M  0 part /boot/efi<br>└─sda16 259:0    0  913M  0 part /boot<br>sr0      11:0    1   54K  0 rom<br>root@docker:~# partprobe -s<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>parted</strong></li></ol><blockquote><p>需谨慎使用，该命令操作会直接生效，不像gdisk、fdisk先将数据写入内存</p></blockquote><p><code>parted</code> 命令也可以直接运行进入类似<code>fdisk</code>的交互式界面，但本人更习惯直接命令行操作</p><p>分区三步法：</p><ol><li>设置分区形式 - mklabel</li><li>设置分区大小 - mkpart<ul><li>mkpart的开始分区从第2048个扇区开始，也就是1024kb,给头部信息留足空间</li></ul></li><li>按需格式化磁盘或做成pv卷扩容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 指定分区形式以及分区名和大小</span><br>parted /dev/sda mklabel gpt mkpart primary 1024kb 100%<br><span class="hljs-comment">## 更倾向于用扇区来指定大小，假设上一个分区的结束扇区为227328，则新分区可以+1从227329扇区开始。</span><br><span class="hljs-comment">## 此处会自动调整结束扇区，因为磁盘尾还需要存放GPT备份表</span><br>parted /dev/sda mklabel gpt mkpart primary 227329s 100%<br></code></pre></td></tr></table></figure><h3 id="2-格式化"><a href="#2-格式化" class="headerlink" title="2. 格式化"></a>2. 格式化</h3><p>一个磁盘分区完后还不能直接挂载使用，还需要进行文件系统格式化，格式化完成后才能挂载使用。</p><p>一般常见的为xfs、ext4格式，建议使用xfs格式，对应的命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.xfs /dev/sda1<br>mkfs.ext4 /dev/sda1<br><br><span class="hljs-comment">## 格式化完成后可以用blkid查看信息</span><br>blkid /dev/sda1 <br></code></pre></td></tr></table></figure><h3 id="3-挂载"><a href="#3-挂载" class="headerlink" title="3. 挂载"></a>3. 挂载</h3><p>挂载可以是临时挂载，也可以开机自动挂载</p><ul><li><p>临时挂载</p><p>关机重启挂载消失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -t xfs /dev/sda2 /tmp<br></code></pre></td></tr></table></figure></li><li><p>开机自动挂载</p><p>将挂载写入<code>/etc/fstab</code>文件即可实现开机自挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/dev/sda2   /tmp        xfs   defaults     0 0&quot;</span> &gt;&gt; /etc/fstab<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-制作逻辑卷"><a href="#4-制作逻辑卷" class="headerlink" title="4. 制作逻辑卷"></a>4. 制作逻辑卷</h3><p>LVM允许系统将多个物理硬盘或分区组合成一个逻辑卷组，‌从而形成一个大的存储池。利用逻辑卷的特性可以实现跨盘扩容，因此在制作逻辑卷的时候最好使用性能相近的磁盘，否则将会影响逻辑卷整体性能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 先将某块磁盘或分区创建为PV</span><br>pvcreate /dev/sda<br><span class="hljs-comment">## 将sda创建一个名为vg1的卷组</span><br>vgcreate vg1 /dev/sda<br><span class="hljs-comment">## 在vg1卷组创建一个名为lv1的逻辑卷，将所有vg1空间都使用</span><br>lvcreate -l +100%free -n lv1 vg1<br><span class="hljs-comment">## 在vg1卷组创建一个名为lv1,大小为40G的逻辑卷</span><br>lvcreate -L 40G -n lv1 vg1<br><span class="hljs-comment">## 制作文件系统</span><br>mkfs.xfs /dev/vg1/lv1<br><span class="hljs-comment">## 挂载，同样可以写入fstab</span><br>mount /dev/vg1/lv1 /root/tmp/<br></code></pre></td></tr></table></figure><h3 id="5-磁盘扩容"><a href="#5-磁盘扩容" class="headerlink" title="5. 磁盘扩容"></a>5. 磁盘扩容</h3><p>通常磁盘需要做逻辑卷或者处于最后一个分区的时候进行扩容是最方便的。</p><p>扩容前一定必须做好备份！！！</p><ol><li>逻辑卷扩容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 首先加入pv</span><br>pvcreate /dev/sda<br><span class="hljs-comment">## 然后扩展vg</span><br>vgextend vg1 /dev/sda<br><span class="hljs-comment">## 扩充lv</span><br><span class="hljs-comment">## +号必须有，不然就变成了调整lv大小，造成数据丢失</span><br>lvextend -l +100%free /dev/vg1/lv1<br>lvextend -L +20G /dev/vg1/lv1<br><span class="hljs-comment">## 同步文件系统</span><br><span class="hljs-comment">## xfs </span><br>xfs_growfs /dev/vg1/lv1<br><span class="hljs-comment">## ext4</span><br>resize2fs /dev/vg1/lv1<br></code></pre></td></tr></table></figure><ol start="2"><li>没分区的整块盘</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 可以直接同步文件系统</span><br>xfs_growfs /dev/sda<br>resize2fs /dev/sda<br></code></pre></td></tr></table></figure><h2 id="磁盘分区类型及原理"><a href="#磁盘分区类型及原理" class="headerlink" title="磁盘分区类型及原理"></a>磁盘分区类型及原理</h2><h4 id="MBR（Master-Boot-Record）分区格式"><a href="#MBR（Master-Boot-Record）分区格式" class="headerlink" title="MBR（Master Boot Record）分区格式"></a>MBR（Master Boot Record）分区格式</h4><p>早期磁盘第一个扇区（<code>521bytes</code>）里面包含重要的信息<code>MBR（Master Boot Record）</code>，其中<code>446 bytes</code>，安装开机管理程序的地方；剩下的<code>64bytes</code>记录硬盘分区的数据，即分区表，如图</p><p><img src="/../images/Linux-disk-base/MBR.png" alt="mbr"></p><p>由于分区表所在区块仅有64bytes容量，因此最多仅能有四组记录区，每组记录区记录了该区段的起始与结束的磁柱号码。</p><p>也就是MBR只支持四个主分区，且最大只支持2TB的硬盘。</p><p>若想多个分区，需要使用扩展分区，扩展分区从5开始计数。</p><h4 id="GPT（GUID-Partition-Table）分区格式"><a href="#GPT（GUID-Partition-Table）分区格式" class="headerlink" title="GPT（GUID Partition Table）分区格式"></a>GPT（GUID Partition Table）分区格式</h4><p>GPT将磁盘划分为一块块的<code>逻辑区块地址（Logical Block Address，简称LBA）</code> 来处理，每个LBA预设计为512bytes，即一个扇区的大小；同时改进MBR之用一块扇区来标识分区表的弊端，GPT使用了前后各34个LBA来标识分区表信息（最后的34各区可以理解为备份，达到高可用），如图</p><p><img src="/../images/Linux-disk-base/GPT.png" alt="gpt"></p><p> LBA的标识是从0开始的，LBA0-34共35块，这里分别阐述下其含义:</p><ul><li><code>LBA0</code> :包含两部分，一部分是类似MBR的446bytes,存储开机管理程序，第二部分则是存储一个特殊的标记，标识该磁盘为GPT格式，而看不懂GPT分区的程序则无法操作该磁盘，起到保护作用，放心，目前基本的管理程序都能识别GPT格式，所以该LBA块实际上与分区信息并无直接关联，这就是为啥不算入34LBA的原因</li><li><code>LBA1</code> :GPT的表头，记录分区本身的位置与大小，同时记录分区在备份中最后34个LBA中的位置，方便恢复</li><li><code>LBA2-34</code>:共32块LBA，每块LBA记录4笔分区表，共支持4*32&#x3D;128笔分区；而每个LBA默认为512bytes，则每笔记录用到512&#x2F;4&#x3D;128bytes,每笔记录拿出64bytes来记录开始、结束的扇区号码，因此对一个单一分区槽而言，支持的最大容量为2^64∗512bytes&#x3D;2^63∗1Kbytes&#x3D;2^33TB&#x3D;8ZB</li></ul><blockquote><p>1024TB&#x3D;1PB <br>1024PB&#x3D;1EB <br>1024EB&#x3D;1ZB</p></blockquote><h1 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h1><h2 id="1-已添加磁盘无法识别"><a href="#1-已添加磁盘无法识别" class="headerlink" title="1. 已添加磁盘无法识别"></a>1. 已添加磁盘无法识别</h2><p>有时候机房加了磁盘可能不会在系统层面立即显示出来，需要重启服务器，也可以重新扫描下scsi总线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> /sys/class/scsi_host/*/scan; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- - -&quot;</span> &gt; <span class="hljs-variable">$i</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="2-已分区没做lvm的磁盘扩容"><a href="#2-已分区没做lvm的磁盘扩容" class="headerlink" title="2. 已分区没做lvm的磁盘扩容"></a>2. 已分区没做lvm的磁盘扩容</h2><p>有时候我们会遇到项目组在原磁盘上加空间，而想要扩容的那个分区是没有做逻辑卷的，以至于加的空间会浪费，下面有两种方案，其一是<code>fdisk</code>的一种特殊用法，其二是提供一个工具<code>growpart</code>，可以对没有做过逻辑卷的分区进行扩容。</p><p>两种方案都需要该分区必需是整个磁盘的最后一个分区</p><ul><li><p>其一，使用<code>fdisk</code>扩容。因为fdisk在进行操作的时候分区数据不会直接写入磁盘，而是先会保存在内存中，所以可以利用这点来进行扩容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk /dev/sda<br><span class="hljs-comment">## 进入后用p查看分区</span><br><span class="hljs-comment">## 按d 删除最后一个分区</span><br><span class="hljs-comment">## 然后再n，创建新分区。</span><br><span class="hljs-comment">## 新分区的大小必须比原来的分区大，不能缩小，否则会造成数据丢失</span><br><span class="hljs-comment">## 最后w保存，然后xfs_growf或resize2fs同步对应文件系统即可</span><br></code></pre></td></tr></table></figure></li><li><p>其二，可使用<code>growpart</code>来进行扩容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 联网条件下</span><br>yum install cloud-utils-growpart<br><span class="hljs-comment"># 没联网就传包吧</span><br>rpm -ivhU cloud-utils-growpart.rpm<br><span class="hljs-comment"># 如服务器有一块盘vda，仅有一个分区vda1，且没做过逻辑卷</span><br><span class="hljs-comment"># 先用growpart将空间加到vda1上</span><br><span class="hljs-comment">## 表示对/dev/sda的分区1进行扩容</span><br>growpart /dev/vda 1<br><span class="hljs-comment">## 如果报错 unexpected output in sfdisk --version</span><br><span class="hljs-comment">## LANG=en_US.UTF-8 就可以了,不行可以重启下物理机试一下.(编码问题)</span><br><span class="hljs-comment"># 然后同步文件系统即可</span><br>xfs_growfs /<br>resize2fs /dev/vda1<br></code></pre></td></tr></table></figure></li></ul><p><strong>案例</strong></p><blockquote><p>由于没有找到现成的做了分区而没做lvm的项目，但是步骤是一样的。</p></blockquote><p><img src="/../images/Linux-disk-base/20221031165313.jpg" alt="gdisk_caution"></p><h2 id="3-旧磁盘换到新机器无法使用"><a href="#3-旧磁盘换到新机器无法使用" class="headerlink" title="3. 旧磁盘换到新机器无法使用"></a>3. 旧磁盘换到新机器无法使用</h2><p>面对这个情况其实如果在确定磁盘里面的数据进行了备份，或者不需要的时候可以直接进行强制格式化。</p><p>也可以<code>dd</code>去备份一下磁盘头和磁盘尾信息，或者整个磁盘。</p><p>如下有一个磁盘sda，通过parted查看磁盘信息，这里建议把unit切换成s单位来看会更精确更清楚些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@docker:~# parted /dev/sda u s p<br>Model: ATA VBOX HARDDISK (scsi)<br>Disk /dev/sda: 31457280s<br>Sector size (logical/physical): 512B/512B<br>Partition Table: gpt<br>Disk Flags:<br><br>Number  Start     End        Size       File system  Name  Flags<br>14      2048s     10239s     8192s                         bios_grub<br>15      10240s    227327s    217088s    fat32              boot, esp<br>16      227328s   2097152s   1869825s   ext4               bls_boot<br> 1      2099200s  31457246s  29358047s  ext4<br></code></pre></td></tr></table></figure><p>在这个输出中可以看到磁盘总大小31457280个扇区，磁盘实际分配到第31457246个扇区结束，<code>31457280-31457246=34</code>，也就是刚好留下了GPT格式备份的34个LBA。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## dd默认1count为512B，与扇区size对应</span><br><span class="hljs-comment">## 备份前34个扇区</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/sda of=~/sda.img.bak count=34<br><span class="hljs-comment">## 跳过前面31457246个扇区进行备份</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/sda of=~/sda.img.bak skip=31457246<br></code></pre></td></tr></table></figure><p>如下输出可见备份了最后34个扇区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@docker:~# dd if=/dev/sda of=~/sda.end.bak skip=31457246<br>34+0 records in<br>34+0 records out<br>17408 bytes (17 kB, 17 KiB) copied, 0.000214267 s, 81.2 MB/s<br></code></pre></td></tr></table></figure><p>备份好后可以直接用<code>dd</code>命令把磁头磁尾清空即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/sda count=34<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/sda skip=31457246<br></code></pre></td></tr></table></figure><h2 id="4-已删除文件占用空间"><a href="#4-已删除文件占用空间" class="headerlink" title="4. 已删除文件占用空间"></a>4. 已删除文件占用空间</h2><p>这种情况一般是有进程在占用被删除的文件，从而导致空间未释放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 可使用lsof来排查，找到对应的pid</span><br>lsof | grep deleted<br><span class="hljs-comment">## 非业务时间段可以通过 kill对应进程来释放</span><br><span class="hljs-comment">## 但业务时间段肯定不能这样操作</span><br><span class="hljs-comment">## 所以有了第二种方法</span><br><span class="hljs-built_in">ls</span> -l /proc/<span class="hljs-variable">$pid</span>/fd/* | grep <span class="hljs-variable">$filename</span><br><span class="hljs-built_in">echo</span> &gt; /proc/<span class="hljs-variable">$pid</span>/fd/<span class="hljs-variable">$fdnum</span><br></code></pre></td></tr></table></figure><h2 id="5-实际占用与显示不符"><a href="#5-实际占用与显示不符" class="headerlink" title="5. 实际占用与显示不符"></a>5. 实际占用与显示不符</h2><p>一可能是前面说的已删除文件后<code>df</code>没有变化</p><p>二可能是覆盖挂载</p><p>三可能是计算的时候没有排除网络挂载</p><p>前面已经介绍过第一种处理办法，下面介绍后面两种</p><p>对于覆盖挂载可以在非业务时间将异常挂载的目录先卸载下来，然后去看看卸载后的该目录下面是否有文件，如有文件占用空间则属于覆盖挂载。</p><p>对于网络挂载，可以在使用<code>du</code>命令的时候使用<code>-x</code>选项来进行排除（前面有介绍过），便可计算出当前本地的准确值。</p><h2 id="6-由MBR-MSDOS-格式转GPT"><a href="#6-由MBR-MSDOS-格式转GPT" class="headerlink" title="6. 由MBR (MSDOS) 格式转GPT"></a>6. 由MBR (MSDOS) 格式转GPT</h2><p><strong>场景</strong></p><p>MBR分区只支持四个主分区，因此，当有人在第四个分区不用逻辑分区而继续用主分区的话将无法再进行分区，且最大只能操作2T空间的磁盘，所以在面对这种四个主分区都用满或磁盘空间超过2T的情况下，需要将磁盘格式转成GPT后才能进一步进行分区和扩容。</p><p><strong>前提条件</strong></p><p>磁盘头信息需要留足空间转换成GPT分区，start最小需要从第63个扇区开始。</p><p>可以自己模拟下，用parted工具进行分区，第一个分区头从0开始，命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">parted /dev/vdx mklabel msdos/gpt mkpart primary 0 100%<br></code></pre></td></tr></table></figure><p>如果使用的label是mbr则会默认从63s开始，如果是gpt，则会从34s开始。</p><p><img src="/../images/Linux-disk-base/078092image.png" alt="mbr_default"></p><p><img src="/../images/Linux-disk-base/098712image.png" alt="gpt_default"></p><p>如果用的是gdisk和fdisk分区，默认是从2048s开始，所以完全够从mbr转换成gpt格式。</p><p>但是需要注意磁盘末尾是否还有空间，因为MBR末尾并不记录信息，所以当磁盘100%时也就是空间完全没有了，此时进行gpt转换可能造成尾部数据丢失。</p><p><img src="/../images/Linux-disk-base/052384image.png" alt="fdisk_default"></p><ul><li>先备份分区表信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 备份分区表信息</span><br><span class="hljs-comment"># 最好选择另外的盘进行备份</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/vda of=/xxxx/xxx.mbr.bak  bs=1024 count=2000<br><span class="hljs-comment"># 恢复分区表信息</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/home/xxx.mbr.bak  of=/dev/vda bs=1024 count=2000<br></code></pre></td></tr></table></figure><ul><li>使用gdisk将分区格式转换为gpt</li></ul><p><img src="/../images/Linux-disk-base/016511image.png" alt="gdisk_default"></p><h2 id="7-新磁盘残留GPT分区信息导致无法分区扩容"><a href="#7-新磁盘残留GPT分区信息导致无法分区扩容" class="headerlink" title="7. 新磁盘残留GPT分区信息导致无法分区扩容"></a>7. 新磁盘残留GPT分区信息导致无法分区扩容</h2><blockquote><p>类似第三点</p></blockquote><p>当项目组拿来新磁盘，要求分区扩容时，碰到如下提示gpt备份区信息与主分区信息不一致的提示时，考虑是该磁盘是曾经做过分区的盘。</p><p><img src="/../images/Linux-disk-base/20221029005856.png" alt="gdisk_caution"></p><p>先与项目组确认是否是新盘无数据，当确认是新盘无数据后，可用<code>dd</code>命令去清空头尾记录的分区信息，一般取首尾1M左右即可，清空完后就可以按正常流程进行分区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如项目组有893G磁盘</span><br><span class="hljs-comment"># 清空头部信息</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/sdb bs=512 count=4000<br><span class="hljs-comment"># 清空尾部信息</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/sdb bs=1M seek=890000<br><span class="hljs-comment"># seek参数为跳过sdb的第890000个block，即将if的内容从第890000个block后开始写入</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ansible ad-hoc简介</title>
    <link href="/2024/07/12/ansible-ad-hoc/"/>
    <url>/2024/07/12/ansible-ad-hoc/</url>
    
    <content type="html"><![CDATA[<h1 id="Ansible-Ad-Hoc"><a href="#Ansible-Ad-Hoc" class="headerlink" title="Ansible Ad-Hoc"></a>Ansible Ad-Hoc</h1><p>Ad-Hoc形式应用场景主要在临时执行一些操作时会用到，更注重解决一些简单或临时任务，复杂操作会使用playbook来实现。<br>比如想临时传一个文件到被控机上就可以使用ad-hoc形式来完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible all -m copy -a <span class="hljs-string">&quot;src=/root/monitor.sh dest=/root/ backup=yes&quot;</span><br></code></pre></td></tr></table></figure><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -v 可使用-vvv输出更详细内容</span><br><span class="hljs-comment"># -i 指定inventory</span><br><span class="hljs-comment"># -f 指定并发线程数</span><br><span class="hljs-comment"># --private-key 指定密钥文件</span><br><span class="hljs-comment"># -m 指定执行模块</span><br><span class="hljs-comment"># -M 指定模块存放路径</span><br><span class="hljs-comment"># -a 模块参数，默认command模块</span><br><span class="hljs-comment"># -t 输出信息到指定目录，文件以主机名命名</span><br><span class="hljs-comment"># -T 指定最大超时时间</span><br><span class="hljs-comment"># -B 后台执行命令，超过指定时间后中止执行的任务</span><br><span class="hljs-comment"># -P 定期以指定时间间隔返回后台任务进度</span><br><span class="hljs-comment"># --list-hosts 列出符合条件的主机，不执行任何命令</span><br>ansible -i hosts all -f 20 -B 10 -P 2 -T 1 -m shell -a <span class="hljs-string">&quot;df -h&quot;</span> -vvv<br>ansible all --list-hosts<br></code></pre></td></tr></table></figure><p>success 表示命令执行成功，changed 是否对主机做出变更</p><blockquote><p>建议并发数配置为CPU核数偶数倍就行。如4C 8G的机器，最多并发20个线程</p></blockquote><h2 id="ansible-doc"><a href="#ansible-doc" class="headerlink" title="ansible-doc"></a>ansible-doc</h2><p>如果不知道有哪些模块以及模块有哪些参数可用，就可使用此命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible-doc -l<br>ansible-doc -s shell<br></code></pre></td></tr></table></figure><ul><li><code>-l</code> 选项列出所有可用模块</li><li><code>-s</code> 只显示playbook说明的代码段</li></ul><h2 id="指定主机执行任务"><a href="#指定主机执行任务" class="headerlink" title="指定主机执行任务"></a>指定主机执行任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># --limit </span><br>ansible all -m shell -a <span class="hljs-string">&quot;ls -l&quot;</span> --<span class="hljs-built_in">limit</span> <span class="hljs-string">&quot;192.168.3.27&quot;</span><br><span class="hljs-comment"># 指定IP</span><br>ansible 192.168.3.27 -m shell -a <span class="hljs-string">&quot;ls -l&quot;</span><br><span class="hljs-comment"># : 分隔符指定多台机器做变更，但&quot;&quot;必须使用</span><br>ansible <span class="hljs-string">&quot;192.168.3.27:192.168.33.22&quot;</span> -m shell -a <span class="hljs-string">&quot;ls -l&quot;</span><br><span class="hljs-comment"># * 通配符匹配多台机器</span><br>ansible 192.168.3.* -m shell -a <span class="hljs-string">&quot;ls -l&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ansible Inventory Intro</title>
    <link href="/2024/07/12/Ansible-Inventory-Intro/"/>
    <url>/2024/07/12/Ansible-Inventory-Intro/</url>
    
    <content type="html"><![CDATA[<h1 id="ansible-inventory-文件基本介绍"><a href="#ansible-inventory-文件基本介绍" class="headerlink" title="ansible inventory 文件基本介绍"></a>ansible inventory 文件基本介绍</h1><blockquote><p>默认配置路径</p><p><code>/etc/ansible/hosts</code></p></blockquote><h2 id="定义主机和组"><a href="#定义主机和组" class="headerlink" title="定义主机和组"></a>定义主机和组</h2><p>ansible 支持将同一个主机同时归并到多个不同的组中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 可以直接写IP地址</span><br>192.168.3.27<br><span class="hljs-comment"># 支持hostname</span><br>ntp.example.com<br><span class="hljs-comment"># 支持:+port</span><br>192.168.3.27:22<br>ntp.example.com:222<br><span class="hljs-comment"># []表示一个分组</span><br><span class="hljs-section">[ntpserver]</span><br>ntp1.example.com<br>ntp2.example.com<br><span class="hljs-comment"># 表示3-4之间的所有数字,包含3,4</span><br>ntp<span class="hljs-section">[3:4]</span>.example.com<br><span class="hljs-comment"># 表示a-c之间所有数字,包含a,c</span><br>ntp<span class="hljs-section">[a:c]</span>.example.com<br></code></pre></td></tr></table></figure><h2 id="定义主机变量"><a href="#定义主机变量" class="headerlink" title="定义主机变量"></a>定义主机变量</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[webservers]</span><br>web1.example.com <span class="hljs-attr">http_port</span>=<span class="hljs-number">808</span><br><span class="hljs-attr">maxRequestsPerChild</span>=<span class="hljs-number">801</span> <br><span class="hljs-comment"># 自定义http_port的端口号为808，配置maxRequestsPerChild为801</span><br></code></pre></td></tr></table></figure><blockquote><p>Ansible其实支持多种方式修改或自定义变量，Inventory是其中的一种修改方式</p></blockquote><h2 id="定义组变量"><a href="#定义组变量" class="headerlink" title="定义组变量"></a>定义组变量</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[groupservers]</span><br>web1.example.com<br>web2.example.com<br><span class="hljs-section">[groupservers:vars]</span><br><span class="hljs-attr">ntp_server</span>=ntp.example.com  <br><span class="hljs-comment"># 定义groupservers组中所有主机ntp_server值为ntp.magedu.com</span><br><span class="hljs-attr">nfs_server</span>=nfs.example.com <br><span class="hljs-comment"># 定义groupservers组中所有主机nfs_server值为nfs.magedu.com</span><br></code></pre></td></tr></table></figure><h2 id="定义组嵌套及组变量"><a href="#定义组嵌套及组变量" class="headerlink" title="定义组嵌套及组变量"></a>定义组嵌套及组变量</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[apache]</span><br>httpd1.example.com<br>httpd2.example.com<br><span class="hljs-section">[nginx]</span><br>ngx1.example.com<br>ngx2.example.com<br><span class="hljs-section">[webservers:children]</span><br>apache<br>nginx<br><span class="hljs-section">[webservers:vars]</span><br><span class="hljs-attr">ntp_server</span>=ntp.example.com<br></code></pre></td></tr></table></figure><h2 id="多重变量定义"><a href="#多重变量定义" class="headerlink" title="多重变量定义"></a>多重变量定义</h2><p>变量除了在inventory中定义,还可以在其他格式的配置文件中定义，如：yml、json</p><p>通常在以下四个位置检索</p><ul><li>inventory配置文件</li><li>playbook中vars定义的区域</li><li>roles中vars目录下的文件</li><li>roles同级目录group_vars和hosts_vars目录下的文件</li></ul><h2 id="其他参数列表"><a href="#其他参数列表" class="headerlink" title="其他参数列表"></a>其他参数列表</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ansible_ssh_host</span>=<br><span class="hljs-attr">ansible_ssh_user</span>=root<br><span class="hljs-attr">ansible_ssh_pass</span>=xxx<br><span class="hljs-attr">ansible_ssh_port</span>=<span class="hljs-number">22</span><br><span class="hljs-comment"># 指定特有私钥文件</span><br>ansible_ssh_private_key_file=<br></code></pre></td></tr></table></figure><blockquote><p>更多参数查询官网</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TMUX 基础操作</title>
    <link href="/2024/07/11/tmux/"/>
    <url>/2024/07/11/tmux/</url>
    
    <content type="html"><![CDATA[<ul><li>三个概念<ul><li>session - 会话<ul><li>每运行一次<code>tmux</code>会创建一个session</li></ul></li><li>window - 窗口<ul><li>在session内按前缀键后，<code>c</code>键创建的就是一个window</li></ul></li><li>pane - 窗格<ul><li>将window进行分割后得到的就是pane</li></ul></li></ul></li></ul><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="1-会话外操作"><a href="#1-会话外操作" class="headerlink" title="1. 会话外操作"></a>1. 会话外操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux attach -t 0 <span class="hljs-comment">## 进入一个会话</span><br>tmux <span class="hljs-built_in">ls</span> <span class="hljs-comment">## 查看当前服务器的tmux会话</span><br>tmux kill-session -t 0<br>tmux kill-pane -t 0<br>tmux kill-window -t 0<br><br>tmux list-commands <span class="hljs-comment">## 显示tmux所有命令 </span><br>tmux show-options -g <span class="hljs-comment">## 显示所有选项</span><br></code></pre></td></tr></table></figure><h3 id="2-会话内操作"><a href="#2-会话内操作" class="headerlink" title="2. 会话内操作"></a>2. 会话内操作</h3><p>默认前缀键<code>ctrl+b</code></p><blockquote><p>以下操作都在某个tmux session中操作，需要先按前缀键</p></blockquote><p><code>&quot;</code> 上下分屏</p><p><code>%</code>左右分屏</p><p><code>c</code>创建新窗口</p><p><code>d</code>暂时退出tmux窗口</p><p><code>s</code>列出会话，选择切换会话</p><blockquote><p>切换会话也可用<code>:</code> ，然后输入以下命令，可tab补全</p><p>switch-client -t 0  </p><p>attach-session -t 0 </p></blockquote><p>数字0-9切换窗口</p><p><code>z</code>放大缩小窗格</p><p><code>n</code>切换下一个窗口</p><p><code>p</code>切换上一个窗口</p><p><code>q</code>显示窗格编号，根据提示输入对应数字切换pane</p><p><code>o</code>切换到下一个窗格，方向键亦可</p><p><code>space</code>循环切换窗格布局</p><p><code>&amp;</code>关闭当前窗口</p><p><code>[</code>开启复制模式</p><p><code>&#123;</code>将pane布局往前移动</p><p><code>&#125;</code>将pane布局往后移动</p><p><code>?</code>查看帮助页</p><h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><blockquote><p>以下配置将会修改</p><p>​前缀键为ctrl+x</p><p>​开启鼠标模式</p><p>​绑定kjhl为上下左右，类似vim</p><p>​设置vi风格模式，这样就可以使用<code>[</code>复制模式下<code>/</code>来查找输出信息的关键字</p></blockquote><p>修改配置文件<code> ~/.tmux.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -g prefix C-x<br>unbind C-b<br><span class="hljs-built_in">bind</span> C-x send-prefix<br><span class="hljs-comment">#set swap pane key</span><br>bind-key k select-pane -U<br>bind-key j select-pane -D<br>bind-key h select-pane -L<br>bind-key l select-pane -R<br>set-option -g mouse on<br>setw -g mode-keys vi<br></code></pre></td></tr></table></figure><p>修改完配置文件后关掉session，重开就能生效了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 或者也可用此命令生效</span><br>tmux source-file ~/.tmux.conf<br></code></pre></td></tr></table></figure><p>部分终端修改后可能无法复制，需要安装<code>xclip</code>，再修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install xclip<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启用鼠标支持</span><br><span class="hljs-built_in">set</span> -g mouse on<br><span class="hljs-comment"># 启用复制模式</span><br><span class="hljs-comment"># 允许鼠标选择文本并复制</span><br><span class="hljs-built_in">set</span> -g set-clipboard on<br><br><span class="hljs-built_in">set</span> -g pane-base-index    1     <span class="hljs-comment"># 窗格编号从 1 开始计数</span><br><span class="hljs-built_in">set</span> -g renumber-windows   on    <span class="hljs-comment"># 关掉某个窗口后，编号重排</span><br><br><span class="hljs-comment"># 启用这种模式后，你可以通过鼠标选择来复制文本</span><br><span class="hljs-built_in">bind</span> -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel <span class="hljs-string">&quot;xclip -in -selection clipboard&quot;</span><br></code></pre></td></tr></table></figure><p>部分终端可能直接鼠标滚轮即可在pane中翻页，部分需要配合<strong>shift键</strong>才能翻页。</p>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 基本用法</title>
    <link href="/2024/07/08/git-intro/"/>
    <url>/2024/07/08/git-intro/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-基本用法"><a href="#Git-基本用法" class="headerlink" title="Git 基本用法"></a>Git 基本用法</h1><blockquote><p>git的结构就像一棵树一样</p><p>main主干，dev，test，issue … 都是分支树杈</p></blockquote><h2 id="pull-push"><a href="#pull-push" class="headerlink" title="pull &amp; push"></a>pull &amp; push</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 初始化一个git仓</span><br>git init <br>git remote add <span class="hljs-variable">$alias</span> <span class="hljs-variable">$url</span><br>git branch -M master(main)<br><span class="hljs-comment">## 查看远程仓库</span><br>git remote -v<br>git push -u origin master <br><br><span class="hljs-comment">## 远程分支名:本地分支名</span><br><span class="hljs-comment">## 旧版为master ，新版默认main</span><br>git pull origin master:master <br><br><span class="hljs-comment">## 修改git地址</span><br>git remote set-url origin <span class="hljs-variable">$url</span><br><span class="hljs-comment">## 已跟踪文件取消跟踪，配合.gitignore，之后推送都忽略</span><br>git <span class="hljs-built_in">rm</span> -r --cached <span class="hljs-variable">$file</span><br></code></pre></td></tr></table></figure><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">git ls-files <span class="hljs-comment">## 查看暂存区文件</span><br><br>git reset --soft <span class="hljs-comment">## 工作区和暂存区都不清空</span><br>git reset --hard <span class="hljs-comment">## 工作区暂存区全部清空</span><br>git reset --mixed <span class="hljs-comment">## 保留工作区，清理暂存区，默认选项</span><br><br>git reset HEAD^ <span class="hljs-comment">## 回退到上一次提交</span><br><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment">## 公共提交记录</span><br>git reflog <span class="hljs-comment">## 本地操作记录</span><br></code></pre></td></tr></table></figure><h2 id="switch-checkout"><a href="#switch-checkout" class="headerlink" title="switch&#x2F;checkout"></a>switch&#x2F;checkout</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建一个分支</span><br>git branch <span class="hljs-variable">$branch</span> <br><span class="hljs-comment">## 可以切换分支也可以切换至某次提交或恢复某次提交的文件，如分支与文件名相同会产生冲突，默认是切换分支</span><br>git checkout <span class="hljs-variable">$branch</span>(<span class="hljs-variable">$commit</span>) <br><span class="hljs-comment">## 切换某分支的某次提交</span><br>git checkout -b <span class="hljs-variable">$branch</span> <span class="hljs-variable">$commit</span> <br><span class="hljs-comment">## 仅切换至某分支</span><br>git switch <span class="hljs-variable">$branch</span><br><span class="hljs-comment">## 误删除文件，还未add时</span><br><span class="hljs-comment">## 放弃所有修改，恢复全部</span><br>git checkout .<br>git checkout -- *<br><span class="hljs-comment">## 放弃某个文件，恢复某个文件</span><br>git checkout -- <span class="hljs-variable">$filename</span><br><span class="hljs-comment">## 如果一个分支提交过后可以用-d选项删掉分支，没有提交想删除需用-D强制删除分支</span><br>git branch -d <span class="hljs-variable">$branch</span><br>git branch -D <span class="hljs-variable">$branch</span><br><span class="hljs-comment">## 图表形式查看分支结构</span><br>git <span class="hljs-built_in">log</span> --graph --oneline --decorate --all<br></code></pre></td></tr></table></figure><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 先切换至main分支</span><br><span class="hljs-comment"># 然后再执行如下命令合并develop分支到main分支</span><br>git merge <span class="hljs-variable">$branch</span><br><span class="hljs-comment">## 两个分支修改了同一个文件的同一处位置会产生冲突</span><br><span class="hljs-comment">## 查看冲突具体内容，修改文件中的冲突后再提交</span><br>git diff<br><span class="hljs-comment">## 中止合并</span><br>git merge --abort<br></code></pre></td></tr></table></figure><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 如果当前有两个分支，main和dev</span><br><span class="hljs-comment">## 当前处在dev分支时，rebase会把dev分支接在main分支最新一次提交后</span><br>git switch dev<br>git rebase main<br><span class="hljs-comment">## 当前处在main分支时，rebase会把main分支接在dev分支最新一次提交后</span><br>git switch main<br>git rebase dev<br></code></pre></td></tr></table></figure><h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 暂存当前工作区的所有修改</span><br>git stash<br><br><span class="hljs-comment"># 查看stash列表</span><br>git stash list<br><br><span class="hljs-comment"># 恢复最近一次stash的内容</span><br>git stash pop<br><br><span class="hljs-comment"># 恢复指定的stash内容</span><br>git stash apply stash@&#123;0&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[K8s] Kubernetes Install</title>
    <link href="/2024/07/08/k8s-K8s-Install/"/>
    <url>/2024/07/08/k8s-K8s-Install/</url>
    
    <content type="html"><![CDATA[<h1 id="K8s-Install"><a href="#K8s-Install" class="headerlink" title="K8s Install"></a>K8s Install</h1><h2 id="1-Standard"><a href="#1-Standard" class="headerlink" title="1. Standard"></a>1. Standard</h2><ul><li>2GB or more of RAM</li><li>2CPUs or more</li></ul><h2 id="2-Prepare"><a href="#2-Prepare" class="headerlink" title="2. Prepare"></a>2. Prepare</h2><ul><li><p>You need to install a container runtime into each node in the cluster so that Pods can run there.</p></li><li><p>Certain ports are open on your machines</p><ul><li>systemctl firewalld stop</li></ul></li><li><p>Disable swap</p><ul><li>swapoff -a</li><li>check &#x2F;etc&#x2F;fstab</li></ul></li><li><p>Verify glibc is provide or not in machines</p></li><li><p>Verify the MAC address and product_uuid are unique for every node</p><ul><li>ip link</li><li>ifconfig -a</li><li>cat &#x2F;sys&#x2F;class&#x2F;dmi&#x2F;id&#x2F;product_uuid</li></ul></li><li><p>Check required ports</p><ul><li>nc 127.0.0.1 6443</li></ul></li></ul><h2 id="3-Installing-kubeadm-kubelet-and-kubectl"><a href="#3-Installing-kubeadm-kubelet-and-kubectl" class="headerlink" title="3. Installing kubeadm, kubelet and kubectl"></a>3. Installing kubeadm, kubelet and kubectl</h2><blockquote><p>kubelet version may never exceed the API server version.</p><p>For example, the kubelet running 1.7.0 should be fully compatible with a 1.8.0 API server, but not vice versa.</p></blockquote><h4 id="Red-Hat-based-distributions"><a href="#Red-Hat-based-distributions" class="headerlink" title="Red Hat-based distributions"></a><strong>Red Hat-based distributions</strong></h4><ul><li><p>Set SELinux to <code>permissive</code> mode</p><ul><li>setenforce 0</li><li>sed -i ‘s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;‘ &#x2F;etc&#x2F;selinux&#x2F;config</li></ul></li><li><p>Add the Kubernetes <code>yum</code> repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key</span><br><span class="hljs-string">exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure></li><li><p>Install kubelet, kubeadm and kubectl, and enable kubelet to ensure it’s automatically started on startup</p><ul><li>yum install -y kubelet kubeadm kubectl –disableexcludes&#x3D;kubernetes</li><li>systemctl enable –now kubelet</li></ul></li></ul><h4 id="Without-a-package-manager"><a href="#Without-a-package-manager" class="headerlink" title="Without a package manager"></a><strong>Without a package manager</strong></h4><ul><li><p>Install CNI plugins (required for most pod network)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">CNI_PLUGINS_VERSION=<span class="hljs-string">&quot;v1.3.0&quot;</span><br>ARCH=<span class="hljs-string">&quot;amd64&quot;</span><br>DEST=<span class="hljs-string">&quot;/opt/cni/bin&quot;</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$DEST</span>&quot;</span><br>curl -L <span class="hljs-string">&quot;https://github.com/containernetworking/plugins/releases/download/<span class="hljs-variable">$&#123;CNI_PLUGINS_VERSION&#125;</span>/cni-plugins-linux-<span class="hljs-variable">$&#123;ARCH&#125;</span>-<span class="hljs-variable">$&#123;CNI_PLUGINS_VERSION&#125;</span>.tgz&quot;</span> | <span class="hljs-built_in">sudo</span> tar -C <span class="hljs-string">&quot;<span class="hljs-variable">$DEST</span>&quot;</span> -xz<br><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/cni/net.d/10-containerd-net.conflist &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;cniVersion&quot;: &quot;1.0.0&quot;,</span><br><span class="hljs-string">  &quot;name&quot;: &quot;containerd-net&quot;,</span><br><span class="hljs-string">  &quot;plugins&quot;: [</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;type&quot;: &quot;bridge&quot;,</span><br><span class="hljs-string">      &quot;bridge&quot;: &quot;cni0&quot;,</span><br><span class="hljs-string">      &quot;isGateway&quot;: true,</span><br><span class="hljs-string">      &quot;ipMasq&quot;: true,</span><br><span class="hljs-string">      &quot;promiscMode&quot;: true,</span><br><span class="hljs-string">      &quot;ipam&quot;: &#123;</span><br><span class="hljs-string">        &quot;type&quot;: &quot;host-local&quot;,</span><br><span class="hljs-string">        &quot;ranges&quot;: [</span><br><span class="hljs-string">          [&#123;</span><br><span class="hljs-string">            &quot;subnet&quot;: &quot;10.88.0.0/16&quot;</span><br><span class="hljs-string">          &#125;],</span><br><span class="hljs-string">          [&#123;</span><br><span class="hljs-string">            &quot;subnet&quot;: &quot;2001:4860:4860::/64&quot;</span><br><span class="hljs-string">          &#125;]</span><br><span class="hljs-string">        ],</span><br><span class="hljs-string">        &quot;routes&quot;: [</span><br><span class="hljs-string">          &#123; &quot;dst&quot;: &quot;0.0.0.0/0&quot; &#125;,</span><br><span class="hljs-string">          &#123; &quot;dst&quot;: &quot;::/0&quot; &#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="hljs-string">      &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure></li><li><p>Define the directory to download command files</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">DOWNLOAD_DIR=<span class="hljs-string">&quot;/usr/local/bin&quot;</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$DOWNLOAD_DIR</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>Install crictl (required for kubeadm &#x2F; Kubelet Container Runtime Interface (CRI))</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">CRICTL_VERSION=<span class="hljs-string">&quot;v1.28.0&quot;</span><br>ARCH=<span class="hljs-string">&quot;amd64&quot;</span><br>curl -L <span class="hljs-string">&quot;https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class="hljs-variable">$&#123;CRICTL_VERSION&#125;</span>/crictl-<span class="hljs-variable">$&#123;CRICTL_VERSION&#125;</span>-linux-<span class="hljs-variable">$&#123;ARCH&#125;</span>.tar.gz&quot;</span> | <span class="hljs-built_in">sudo</span> tar -C <span class="hljs-variable">$DOWNLOAD_DIR</span> -xz<br></code></pre></td></tr></table></figure></li><li><p>Install <code>kubeadm</code>, <code>kubelet</code>, <code>kubectl</code> and add a <code>kubelet</code> systemd service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">RELEASE=<span class="hljs-string">&quot;<span class="hljs-subst">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span><br>ARCH=<span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$DOWNLOAD_DIR</span><br><span class="hljs-built_in">sudo</span> curl -L --remote-name-all https://dl.k8s.io/release/<span class="hljs-variable">$&#123;RELEASE&#125;</span>/bin/linux/<span class="hljs-variable">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet&#125;<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x &#123;kubeadm,kubelet&#125;<br><br>RELEASE_VERSION=<span class="hljs-string">&quot;v0.16.2&quot;</span><br>curl -sSL <span class="hljs-string">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class="hljs-variable">$&#123;RELEASE_VERSION&#125;</span>/cmd/krel/templates/latest/kubelet/kubelet.service&quot;</span> | sed <span class="hljs-string">&quot;s:/usr/bin:<span class="hljs-variable">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/systemd/system/kubelet.service<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/kubelet.service.d<br>curl -sSL <span class="hljs-string">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class="hljs-variable">$&#123;RELEASE_VERSION&#125;</span>/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class="hljs-string">&quot;s:/usr/bin:<span class="hljs-variable">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br></code></pre></td></tr></table></figure><blockquote><p>Notes:</p><p>Site raw.githubusercontent.com is 404 … replace following url</p><p><a href="https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service">https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubelet/kubelet.service</a></p><p><a href="https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf">https://github.com/kubernetes/release/blob/master/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/systemd/system/kubelet.service &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br>[Unit]<br>Description=kubelet: The Kubernetes Node Agent<br>Documentation=https://kubernetes.io/docs/<br>Wants=network-online.target<br>After=network-online.target<br><br>[Service]<br>ExecStart=/usr/bin/kubelet<br>Restart=always<br>StartLimitInterval=0<br>RestartSec=10<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment"># Note: This dropin only works with kubeadm and kubelet v1.11+</span><br>[Service]<br>Environment=<span class="hljs-string">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;</span><br>Environment=<span class="hljs-string">&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;</span><br><span class="hljs-comment"># This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span><br>EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env<br><span class="hljs-comment"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span><br><span class="hljs-comment"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span><br>EnvironmentFile=-/etc/sysconfig/kubelet<br>ExecStart=<br>ExecStart=/usr/bin/kubelet <span class="hljs-variable">$KUBELET_KUBECONFIG_ARGS</span> <span class="hljs-variable">$KUBELET_CONFIG_ARGS</span> <span class="hljs-variable">$KUBELET_KUBEADM_ARGS</span> <span class="hljs-variable">$KUBELET_EXTRA_ARGS</span><br>EOF<br></code></pre></td></tr></table></figure></li><li><p>Install and Set Up kubectl on Linux</p><ul><li><p>Install kubectl binary with curl on Linux</p><ol><li><p>Download the latest release with the command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span><br><br><span class="hljs-comment">## View stable version</span><br>curl -L -s https://dl.k8s.io/release/stable.txt<br></code></pre></td></tr></table></figure></li><li><p>Validate the binary (optional)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## Download the kubectl checksum file</span><br>curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl.sha256&quot;</span><br><br><span class="hljs-comment">## Validate the kubectl binary against the checksum file</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat kubectl.sha256)</span>  kubectl&quot;</span> | <span class="hljs-built_in">sha256sum</span> --check<br></code></pre></td></tr></table></figure></li><li><p>Install kubectl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl<br></code></pre></td></tr></table></figure></li><li><p>Test to ensure the version you installed is up-to-date</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl version --client<br><span class="hljs-comment">## Or use this for detailed view of version</span><br>kubectl version --client --output=yaml<br></code></pre></td></tr></table></figure></li></ol></li><li><p>Install using native package management</p><ol><li><p>Add the Kubernetes <code>yum</code> repository. If you want to use Kubernetes version different than v1.29, replace v1.29 with the desired minor version in the command below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># This overwrites any existing configuration in /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure></li><li><p>Install kubectl using <code>yum</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y kubectl<br></code></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>Enable and start <code>kubelet</code></p><ul><li><pre><code class="bash">systemctl enable --now kubelet<figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Container</span> runtimes</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">`kubeadm init`</span> output error</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">` [ERROR CRI]: container runtime is not running`</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/containerd/containerd/blob/main/docs/getting-started.md</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/containerd/containerd/blob/main/containerd.service</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">yum -y install socat conntrack-tools</span><br><br>## 4. Creating a cluster with kubeadm<br><br>```bash<br>kubeadm init   --apiserver-advertise-address=192.168.175.133   --image-repository registry.aliyuncs.com/google_containers   --kubernetes-version v1.29.0   --service-cidr=10.1.0.0/16   --pod-network-cidr=10.244.0.0/16<br><br><br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>## if you are the root user, you can run:<br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="Installing-a-Pod-network-add-on"><a href="#Installing-a-Pod-network-add-on" class="headerlink" title="Installing a Pod network add-on"></a>Installing a Pod network add-on</h3><blockquote><p><a href="https://github.com/containerd/containerd/blob/main/script/setup/install-cni">https://github.com/containerd/containerd/blob/main/script/setup/install-cni</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br><span class="hljs-comment">#   Copyright The containerd Authors.</span><br><br><span class="hljs-comment">#   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">#   you may not use this file except in compliance with the License.</span><br><span class="hljs-comment">#   You may obtain a copy of the License at</span><br><br><span class="hljs-comment">#       http://www.apache.org/licenses/LICENSE-2.0</span><br><br><span class="hljs-comment">#   Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">#   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">#   See the License for the specific language governing permissions and</span><br><span class="hljs-comment">#   limitations under the License.</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Builds and installs cni plugins to /opt/cni/bin,</span><br><span class="hljs-comment"># and create basic cni config in /etc/cni/net.d.</span><br><span class="hljs-comment"># The commit defined in go.mod</span><br><span class="hljs-comment">#</span><br><span class="hljs-built_in">set</span> -eu -o pipefail<br><br>CNI_COMMIT=<span class="hljs-variable">$&#123;1:-$(go list -f &quot;&#123;&#123;.Version&#125;</span>&#125;<span class="hljs-string">&quot; -m github.com/containernetworking/plugins)&#125;</span><br><span class="hljs-string">CNI_DIR=<span class="hljs-variable">$&#123;DESTDIR:=&#x27;&#x27;&#125;</span>/opt/cni</span><br><span class="hljs-string">CNI_CONFIG_DIR=<span class="hljs-variable">$&#123;DESTDIR&#125;</span>/etc/cni/net.d</span><br><span class="hljs-string">: &quot;</span><span class="hljs-variable">$&#123;CNI_REPO:=https://github.com/containernetworking/plugins.git&#125;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"># e2e and Cirrus will fail with &quot;</span><span class="hljs-built_in">sudo</span>: <span class="hljs-built_in">command</span> not found<span class="hljs-string">&quot;</span><br><span class="hljs-string">SUDO=&#x27;&#x27;</span><br><span class="hljs-string">if (( <span class="hljs-variable">$EUID</span> != 0 )); then</span><br><span class="hljs-string">    SUDO=&#x27;sudo&#x27;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string"></span><br><span class="hljs-string">TMPROOT=<span class="hljs-subst">$(mktemp -d)</span></span><br><span class="hljs-string">git clone &quot;</span><span class="hljs-variable">$&#123;CNI_REPO&#125;</span><span class="hljs-string">&quot; &quot;</span><span class="hljs-variable">$&#123;TMPROOT&#125;</span><span class="hljs-string">&quot;/plugins</span><br><span class="hljs-string">pushd &quot;</span><span class="hljs-variable">$&#123;TMPROOT&#125;</span><span class="hljs-string">&quot;/plugins</span><br><span class="hljs-string">git checkout &quot;</span><span class="hljs-variable">$CNI_COMMIT</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">./build_linux.sh</span><br><span class="hljs-string"><span class="hljs-variable">$SUDO</span> mkdir -p <span class="hljs-variable">$CNI_DIR</span></span><br><span class="hljs-string"><span class="hljs-variable">$SUDO</span> cp -r ./bin <span class="hljs-variable">$CNI_DIR</span></span><br><span class="hljs-string"><span class="hljs-variable">$SUDO</span> mkdir -p <span class="hljs-variable">$CNI_CONFIG_DIR</span></span><br><span class="hljs-string"><span class="hljs-variable">$SUDO</span> cat &lt;&lt; EOF | <span class="hljs-variable">$SUDO</span> tee <span class="hljs-variable">$CNI_CONFIG_DIR</span>/10-containerd-net.conflist</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;</span>cniVersion<span class="hljs-string">&quot;: &quot;</span>1.0.0<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span>name<span class="hljs-string">&quot;: &quot;</span>containerd-net<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span>plugins<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span><span class="hljs-built_in">type</span><span class="hljs-string">&quot;: &quot;</span>bridge<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>bridge<span class="hljs-string">&quot;: &quot;</span>cni0<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>isGateway<span class="hljs-string">&quot;: true,</span><br><span class="hljs-string">      &quot;</span>ipMasq<span class="hljs-string">&quot;: true,</span><br><span class="hljs-string">      &quot;</span>promiscMode<span class="hljs-string">&quot;: true,</span><br><span class="hljs-string">      &quot;</span>ipam<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">        &quot;</span><span class="hljs-built_in">type</span><span class="hljs-string">&quot;: &quot;</span>host-local<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>ranges<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">          [&#123;</span><br><span class="hljs-string">            &quot;</span>subnet<span class="hljs-string">&quot;: &quot;</span>10.88.0.0/16<span class="hljs-string">&quot;</span><br><span class="hljs-string">          &#125;],</span><br><span class="hljs-string">          [&#123;</span><br><span class="hljs-string">            &quot;</span>subnet<span class="hljs-string">&quot;: &quot;</span>2001:4860:4860::/64<span class="hljs-string">&quot;</span><br><span class="hljs-string">          &#125;]</span><br><span class="hljs-string">        ],</span><br><span class="hljs-string">        &quot;</span>routes<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">          &#123; &quot;</span>dst<span class="hljs-string">&quot;: &quot;</span>0.0.0.0/0<span class="hljs-string">&quot; &#125;,</span><br><span class="hljs-string">          &#123; &quot;</span>dst<span class="hljs-string">&quot;: &quot;</span>::/0<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span><span class="hljs-built_in">type</span><span class="hljs-string">&quot;: &quot;</span>portmap<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>capabilities<span class="hljs-string">&quot;: &#123;&quot;</span>portMappings<span class="hljs-string">&quot;: true&#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">popd</span><br><span class="hljs-string">rm -fR &quot;</span><span class="hljs-variable">$&#123;TMPROOT&#125;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Control-plane-node-isolation"><a href="#Control-plane-node-isolation" class="headerlink" title="Control plane node isolation"></a>Control plane node isolation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## By default, your cluster will not schedule Pods on the control plane nodes for security reasons. If you want to be able to schedule Pods on the control plane nodes, for example for a single machine Kubernetes cluster, run:</span><br>kubectl taint nodes --all node-role.kubernetes.io/control-plane-<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[K8s] Prepare Environment</title>
    <link href="/2024/07/08/k8s-Prepare-Environment/"/>
    <url>/2024/07/08/k8s-Prepare-Environment/</url>
    
    <content type="html"><![CDATA[<h1 id="Prepare-Environment"><a href="#Prepare-Environment" class="headerlink" title="Prepare Environment"></a>Prepare Environment</h1><h2 id="Containerd-Install"><a href="#Containerd-Install" class="headerlink" title="Containerd Install"></a>Containerd Install</h2><blockquote><p>Container Runtimes</p><p>Kubernetes 1.29 requires that you use a runtime that conforms with the <a href="https://kubernetes.io/docs/concepts/overview/components/#container-runtime">Container Runtime Interface</a> (CRI).</p></blockquote><h3 id="1-Installing-containerd"><a href="#1-Installing-containerd" class="headerlink" title="1. Installing containerd"></a>1. Installing containerd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/containerd/containerd/releases/download/v1.7.11/containerd-1.7.11-linux-amd64.tar.gz<br><br>tar -xvf containerd-1.6.26-linux-amd64.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/containerd/containerd/blob/main/containerd.service">https://github.com/containerd/containerd/blob/main/containerd.service</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/systemd/system/containerd.service &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment"># Copyright The containerd Authors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"># you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"># You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><br>[Unit]<br>Description=containerd container runtime<br>Documentation=https://containerd.io<br>After=network.target local-fs.target<br><br>[Service]<br>ExecStartPre=-/sbin/modprobe overlay<br>ExecStart=/usr/local/bin/containerd<br><br>Type=notify<br>Delegate=<span class="hljs-built_in">yes</span><br>KillMode=process<br>Restart=always<br>RestartSec=5<br><br><span class="hljs-comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br>LimitNPROC=infinity<br>LimitCORE=infinity<br><br><span class="hljs-comment"># Comment TasksMax if your systemd version does not supports it.</span><br><span class="hljs-comment"># Only systemd 226 and above support this version.</span><br>TasksMax=infinity<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> --now containerd<br>systemctl status containerd<br></code></pre></td></tr></table></figure><h3 id="2-Installing-runc"><a href="#2-Installing-runc" class="headerlink" title="2. Installing runc"></a>2. Installing runc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/opencontainers/runc/releases/download/v1.1.11/runc.amd64<br><br>install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure><h3 id="3-Installing-CNI-plugins"><a href="#3-Installing-CNI-plugins" class="headerlink" title="3. Installing CNI plugins"></a>3. Installing CNI plugins</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz<br><br><span class="hljs-built_in">mkdir</span> -p /opt/cni/bin<br>tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz<br></code></pre></td></tr></table></figure><h3 id="Default-config"><a href="#Default-config" class="headerlink" title="Default config"></a>Default config</h3><blockquote><p>containerd uses a configuration file located in <code>/etc/containerd/config.toml</code> for specifying daemon level options. A sample configuration file can be found <a href="https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md">here</a>.</p><p>The default configuration can be generated via <code>containerd config default &gt; /etc/containerd/config.toml</code>.</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">version</span> = <span class="hljs-number">2</span><br><br><span class="hljs-attr">root</span> = <span class="hljs-string">&quot;/var/lib/containerd&quot;</span><br><span class="hljs-attr">state</span> = <span class="hljs-string">&quot;/run/containerd&quot;</span><br><span class="hljs-attr">oom_score</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">imports</span> = [<span class="hljs-string">&quot;/etc/containerd/runtime_*.toml&quot;</span>, <span class="hljs-string">&quot;./debug.toml&quot;</span>]<br><br><span class="hljs-section">[grpc]</span><br>  <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;/run/containerd/containerd.sock&quot;</span><br>  <span class="hljs-attr">uid</span> = <span class="hljs-number">0</span><br>  <span class="hljs-attr">gid</span> = <span class="hljs-number">0</span><br><br><span class="hljs-section">[debug]</span><br>  <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;/run/containerd/debug.sock&quot;</span><br>  <span class="hljs-attr">uid</span> = <span class="hljs-number">0</span><br>  <span class="hljs-attr">gid</span> = <span class="hljs-number">0</span><br>  <span class="hljs-attr">level</span> = <span class="hljs-string">&quot;info&quot;</span><br><br><span class="hljs-section">[metrics]</span><br>  <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">grpc_histogram</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-section">[cgroup]</span><br>  <span class="hljs-attr">path</span> = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-section">[plugins]</span><br>  <span class="hljs-section">[plugins.&quot;io.containerd.monitor.v1.cgroups&quot;]</span><br>    <span class="hljs-attr">no_prometheus</span> = <span class="hljs-literal">false</span><br>  <span class="hljs-section">[plugins.&quot;io.containerd.service.v1.diff-service&quot;]</span><br>    <span class="hljs-attr">default</span> = [<span class="hljs-string">&quot;walking&quot;</span>]<br>  <span class="hljs-section">[plugins.&quot;io.containerd.gc.v1.scheduler&quot;]</span><br>    <span class="hljs-attr">pause_threshold</span> = <span class="hljs-number">0.02</span><br>    <span class="hljs-attr">deletion_threshold</span> = <span class="hljs-number">0</span><br>    <span class="hljs-attr">mutation_threshold</span> = <span class="hljs-number">100</span><br>    <span class="hljs-attr">schedule_delay</span> = <span class="hljs-number">0</span><br>    <span class="hljs-attr">startup_delay</span> = <span class="hljs-string">&quot;100ms&quot;</span><br>  <span class="hljs-section">[plugins.&quot;io.containerd.runtime.v2.task&quot;]</span><br>    <span class="hljs-attr">platforms</span> = [<span class="hljs-string">&quot;linux/amd64&quot;</span>]<br>    <span class="hljs-attr">sched_core</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-section">[plugins.&quot;io.containerd.service.v1.tasks-service&quot;]</span><br>    <span class="hljs-attr">blockio_config_file</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">rdt_config_file</span> = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Install-and-configure-prerequisites"><a href="#Install-and-configure-prerequisites" class="headerlink" title="Install and configure prerequisites"></a>Install and configure prerequisites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## Forwarding IPv4 and letting iptables see bridged traffic</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">overlay</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">sudo</span> modprobe overlay<br><span class="hljs-built_in">sudo</span> modprobe br_netfilter<br><br><span class="hljs-comment">## sysctl params required by setup, params persist across reboots</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.ipv4.ip_forward                 = 1</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># Apply sysctl params without reboot</span><br><span class="hljs-built_in">sudo</span> sysctl --system<br><br><span class="hljs-comment">## Verify that the br_netfilter, overlay modules are loaded by running the following commands:</span><br>lsmod | grep br_netfilter<br>lsmod | grep overlay<br><br><span class="hljs-comment">## Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:</span><br>sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward<br></code></pre></td></tr></table></figure><h2 id="Cgroup-drivers"><a href="#Cgroup-drivers" class="headerlink" title="Cgroup drivers"></a>Cgroup drivers</h2><ul><li><p>cgroupfs</p><ul><li>The <code>cgroupfs</code> driver is <strong>not</strong> recommended when <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> is the init system because systemd expects a single cgroup manager on the system. Additionally, if you use <a href="https://kubernetes.io/docs/concepts/architecture/cgroups">cgroup v2</a>, use the <code>systemd</code> cgroup driver instead of <code>cgroupfs</code>.</li></ul></li><li><p>systemd</p><ul><li><p>To set <code>systemd</code> as the cgroup driver, edit the <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/"><code>KubeletConfiguration</code></a> option of <code>cgroupDriver</code> and set it to <code>systemd</code>. For example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-string">...</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>Note: Starting with v1.22 and later, when creating a cluster with kubeadm, if the user does not set the cgroupDriver field under KubeletConfiguration, kubeadm defaults it to systemd</p></blockquote></li></ul><h2 id="Container-runtimes"><a href="#Container-runtimes" class="headerlink" title="Container runtimes"></a>Container runtimes</h2><blockquote><p>In this step once you’ve created a valid <code>config.toml</code> configuration file.</p><p>You can find this file under the path <code>/etc/containerd/config.toml</code>.</p><p>On Linux the default CRI socket for containerd is <code>/run/containerd/containerd.sock</code>.</p></blockquote><h3 id="Configuring-the-systemd-cgroup-driver"><a href="#Configuring-the-systemd-cgroup-driver" class="headerlink" title="Configuring the systemd cgroup driver"></a>Configuring the systemd cgroup driver</h3><blockquote><p>The <code>systemd</code> cgroup driver is recommended if you use <a href="https://kubernetes.io/docs/concepts/architecture/cgroups">cgroup v2</a>.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]<br>  ...<br>  [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]<br>    SystemdCgroup = <span class="hljs-literal">true</span><br>    <br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&quot;s#SystemdCgroup = false#SystemdCgroup = true#g&quot;</span> /etc/containerd/config.toml<br><span class="hljs-comment">### If you apply this change, make sure to restart containerd:</span><br><span class="hljs-built_in">sudo</span> systemctl restart containerd<br></code></pre></td></tr></table></figure><h3 id="Overriding-the-sandbox-pause-image"><a href="#Overriding-the-sandbox-pause-image" class="headerlink" title="Overriding the sandbox (pause) image"></a>Overriding the sandbox (pause) image</h3><p>In your <a href="https://github.com/containerd/containerd/blob/main/docs/cri/config.md">containerd config</a> you can overwrite the sandbox image by setting the following config:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br>  <span class="hljs-attr">sandbox_image</span> = <span class="hljs-string">&quot;registry.k8s.io/pause:3.2&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]<br><span class="hljs-comment">### add following config in China   [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;k8s.gcr.io&quot;]</span><br>      endpoint = [<span class="hljs-string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;</span>]<br><br><span class="hljs-comment">### This is important if you live in China.</span><br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&quot;s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&quot;</span> /etc/containerd/config.toml<br><span class="hljs-built_in">sudo</span> systemctl restart containerd<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0<br>ctr images pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4<br><br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.22.3 k8s.gcr.io/kube-apiserver:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.22.3 k8s.gcr.io/kube-controller-manager:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.22.3 k8s.gcr.io/kube-scheduler:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.22.3 k8s.gcr.io/kube-proxy:v1.22.3<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5 k8s.gcr.io/pause:3.5<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.0-0 k8s.gcr.io/etcd:3.5.0-0<br>ctr images tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4 k8s.gcr.io/coredns/coredns:v1.8.4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Multipass 基本用法及常见问题</title>
    <link href="/2024/07/08/multipass/"/>
    <url>/2024/07/08/multipass/</url>
    
    <content type="html"><![CDATA[<p>这是一份Multipass基本操作文档，以及包含一些常见问题的解决方法。</p><p>Multipass 是一个轻量级的虚拟机管理工具，旨在简化在本地环境中创建和管理 Ubuntu 虚拟机。</p><p>参考资料</p><ul><li><a href="https://multipass.run/">Multipass 官网</a></li><li><a href="https://multipass.run/docs">Multipass 文档</a></li></ul><h1 id="安装Multipass"><a href="#安装Multipass" class="headerlink" title="安装Multipass"></a>安装Multipass</h1><ol><li><p><strong>在 Linux 上安装</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> snap install multipass<br></code></pre></td></tr></table></figure></li><li><p><strong>在 macOS 上安装</strong>:<br>使用 Homebrew:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install --cask multipass<br></code></pre></td></tr></table></figure></li><li><p><strong>在 Windows 上安装</strong>:<br>访问 <a href="https://multipass.run/">Multipass 官网</a> 下载适用于 Windows 的安装程序，并按照提示完成安装。</p></li></ol><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol><li><p><strong>启动一个新的虚拟机</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass launch --name &lt;instance-name&gt;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass launch --name my-vm<br></code></pre></td></tr></table></figure></li><li><p><strong>列出所有虚拟机</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass list<br></code></pre></td></tr></table></figure></li><li><p><strong>进入虚拟机</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass shell &lt;instance-name&gt;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass shell my-vm<br></code></pre></td></tr></table></figure></li><li><p><strong>停止虚拟机</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass stop &lt;instance-name&gt;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass stop my-vm<br></code></pre></td></tr></table></figure></li><li><p><strong>删除虚拟机</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass delete &lt;instance-name&gt;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass delete my-vm<br></code></pre></td></tr></table></figure></li><li><p><strong>清理已删除的虚拟机</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass purge<br></code></pre></td></tr></table></figure></li></ol><h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><ol><li><p><strong>指定 Ubuntu 版本</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass launch --name &lt;instance-name&gt; &lt;ubuntu-version&gt;<br></code></pre></td></tr></table></figure><p>例如，启动一个 Ubuntu 20.04 的虚拟机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass launch --name my-vm 20.04<br></code></pre></td></tr></table></figure></li><li><p><strong>分配更多资源（CPU、内存、磁盘）</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass launch --name &lt;instance-name&gt; --cpus &lt;number&gt; --mem &lt;size&gt; --disk &lt;size&gt;<br></code></pre></td></tr></table></figure><p>例如，分配 2 个 CPU，4GB 内存，20GB 磁盘:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass launch --name my-vm --cpus 2 --mem 4G --disk 20G<br></code></pre></td></tr></table></figure></li><li><p><strong>共享文件夹</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass mount &lt;host-directory&gt; &lt;instance-name&gt;:&lt;target-directory&gt;<br></code></pre></td></tr></table></figure><p>例如，将本地目录 <code>/home/user/projects</code> 挂载到虚拟机的 <code>/home/ubuntu/projects</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass mount /home/user/projects my-vm:/home/ubuntu/projects<br></code></pre></td></tr></table></figure></li><li><p><strong>运行命令</strong>:<br>可以在虚拟机中运行命令而不进入虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass <span class="hljs-built_in">exec</span> &lt;instance-name&gt; -- &lt;<span class="hljs-built_in">command</span>&gt;<br></code></pre></td></tr></table></figure><p>例如，更新虚拟机中的包列表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass <span class="hljs-built_in">exec</span> my-vm -- <span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure></li></ol><h1 id="启动前配置"><a href="#启动前配置" class="headerlink" title="启动前配置"></a>启动前配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 开启mount挂载，方便拿或传文件到服务器，默认false</span><br>multipass <span class="hljs-built_in">set</span> local.privileged-mounts=<span class="hljs-literal">true</span><br><span class="hljs-comment">## 选择虚拟机驱动，hyperv/virtualbox</span><br><span class="hljs-comment">## win专业版可用hyperv，家庭版只能virtualbox</span><br>multipass <span class="hljs-built_in">set</span> local.driver=hyperv<br><span class="hljs-comment">## 设置默认操作实例</span><br>multipass get client.primary-name=primary<br></code></pre></td></tr></table></figure><h1 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass launch -n <span class="hljs-variable">$name</span> -d 10G -m 2G -c 2 --bridged --mount &lt;local-path&gt;:&lt;instance-path&gt;<br></code></pre></td></tr></table></figure><blockquote><p>如果启动不了可以尝试重启multipass</p></blockquote><h1 id="调整实例配置"><a href="#调整实例配置" class="headerlink" title="调整实例配置"></a>调整实例配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass stop handsome-ling<br>multipass <span class="hljs-built_in">set</span> local.handsome-ling.cpus=4<br>multipass <span class="hljs-built_in">set</span> local.handsome-ling.disk=60G<br>multipass <span class="hljs-built_in">set</span> local.handsome-ling.memory=7G<br></code></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 删除并清除</span><br><span class="hljs-comment">## delete 相当于把实例转为删除状态 </span><br><span class="hljs-comment">## -p or --purge 删除并清除</span><br>multipass delete <span class="hljs-variable">$instance</span> -p<br><span class="hljs-comment">## purge</span><br>multipass purge <span class="hljs-variable">$instance</span><br></code></pre></td></tr></table></figure><h1 id="IPv4-N-A"><a href="#IPv4-N-A" class="headerlink" title="IPv4 N&#x2F;A"></a>IPv4 N&#x2F;A</h1><ul><li><p>重启实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass restart <span class="hljs-variable">$instance</span><br></code></pre></td></tr></table></figure></li><li><p>停止后再启动实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass stop <span class="hljs-variable">$instance</span><br>multipass start <span class="hljs-variable">$instance</span><br></code></pre></td></tr></table></figure></li><li><p>重启multipass服务</p><ul><li>可直接杀进程</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">taskkill /f /pid <span class="hljs-variable">$pid</span><br></code></pre></td></tr></table></figure></li><li><p>状态suspending ，尝试suspend实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass <span class="hljs-built_in">suspend</span> <span class="hljs-variable">$instance</span><br></code></pre></td></tr></table></figure></li><li><p>状态suspended， shell连接即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">multipass shell <span class="hljs-variable">$instance</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Posts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
